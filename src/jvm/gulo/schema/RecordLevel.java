/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Darwin Core Record-level structure.
 * 
 * http://rs.tdwg.org/dwc/terms/index.htm#MeasurementOrFact
 */
public class RecordLevel implements org.apache.thrift.TBase<RecordLevel, RecordLevel._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecordLevel");

  private static final org.apache.thrift.protocol.TField ACCESS_RIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("accessRights", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BASIS_OF_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("basisOfRecord", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BIBLIOGRAPHIC_CITATION_FIELD_DESC = new org.apache.thrift.protocol.TField("bibliographicCitation", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COLLECTION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COLLECTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_GENERALIZATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("dataGeneralizations", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DATASET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DYNAMIC_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("dynamicProperties", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField INFORMATION_WITHHELD_FIELD_DESC = new org.apache.thrift.protocol.TField("informationWithheld", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField INSTITUTION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("institutionCode", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField INSTITUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("institutionID", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("modified", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField OWNER_INSTITUTION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerInstitutionCode", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("references", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField RIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("rights", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField RIGHTS_HOLDER_FIELD_DESC = new org.apache.thrift.protocol.TField("rightsHolder", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecordLevelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecordLevelTupleSchemeFactory());
  }

  public String accessRights; // required
  public String basisOfRecord; // required
  public String bibliographicCitation; // required
  public String collectionCode; // required
  public String collectionID; // required
  public String dataGeneralizations; // required
  public String datasetID; // required
  public String datasetName; // required
  public String dynamicProperties; // required
  public String informationWithheld; // required
  public String institutionCode; // required
  public String institutionID; // required
  public String language; // required
  public String modified; // required
  public String ownerInstitutionCode; // required
  public String references; // required
  public String rights; // required
  public String rightsHolder; // required
  public String type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCESS_RIGHTS((short)1, "accessRights"),
    BASIS_OF_RECORD((short)2, "basisOfRecord"),
    BIBLIOGRAPHIC_CITATION((short)3, "bibliographicCitation"),
    COLLECTION_CODE((short)4, "collectionCode"),
    COLLECTION_ID((short)5, "collectionID"),
    DATA_GENERALIZATIONS((short)6, "dataGeneralizations"),
    DATASET_ID((short)7, "datasetID"),
    DATASET_NAME((short)8, "datasetName"),
    DYNAMIC_PROPERTIES((short)9, "dynamicProperties"),
    INFORMATION_WITHHELD((short)10, "informationWithheld"),
    INSTITUTION_CODE((short)11, "institutionCode"),
    INSTITUTION_ID((short)12, "institutionID"),
    LANGUAGE((short)13, "language"),
    MODIFIED((short)14, "modified"),
    OWNER_INSTITUTION_CODE((short)15, "ownerInstitutionCode"),
    REFERENCES((short)16, "references"),
    RIGHTS((short)17, "rights"),
    RIGHTS_HOLDER((short)18, "rightsHolder"),
    TYPE((short)19, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCESS_RIGHTS
          return ACCESS_RIGHTS;
        case 2: // BASIS_OF_RECORD
          return BASIS_OF_RECORD;
        case 3: // BIBLIOGRAPHIC_CITATION
          return BIBLIOGRAPHIC_CITATION;
        case 4: // COLLECTION_CODE
          return COLLECTION_CODE;
        case 5: // COLLECTION_ID
          return COLLECTION_ID;
        case 6: // DATA_GENERALIZATIONS
          return DATA_GENERALIZATIONS;
        case 7: // DATASET_ID
          return DATASET_ID;
        case 8: // DATASET_NAME
          return DATASET_NAME;
        case 9: // DYNAMIC_PROPERTIES
          return DYNAMIC_PROPERTIES;
        case 10: // INFORMATION_WITHHELD
          return INFORMATION_WITHHELD;
        case 11: // INSTITUTION_CODE
          return INSTITUTION_CODE;
        case 12: // INSTITUTION_ID
          return INSTITUTION_ID;
        case 13: // LANGUAGE
          return LANGUAGE;
        case 14: // MODIFIED
          return MODIFIED;
        case 15: // OWNER_INSTITUTION_CODE
          return OWNER_INSTITUTION_CODE;
        case 16: // REFERENCES
          return REFERENCES;
        case 17: // RIGHTS
          return RIGHTS;
        case 18: // RIGHTS_HOLDER
          return RIGHTS_HOLDER;
        case 19: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCESS_RIGHTS, new org.apache.thrift.meta_data.FieldMetaData("accessRights", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASIS_OF_RECORD, new org.apache.thrift.meta_data.FieldMetaData("basisOfRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIBLIOGRAPHIC_CITATION, new org.apache.thrift.meta_data.FieldMetaData("bibliographicCitation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECTION_CODE, new org.apache.thrift.meta_data.FieldMetaData("collectionCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECTION_ID, new org.apache.thrift.meta_data.FieldMetaData("collectionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_GENERALIZATIONS, new org.apache.thrift.meta_data.FieldMetaData("dataGeneralizations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATASET_NAME, new org.apache.thrift.meta_data.FieldMetaData("datasetName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DYNAMIC_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("dynamicProperties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INFORMATION_WITHHELD, new org.apache.thrift.meta_data.FieldMetaData("informationWithheld", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTITUTION_CODE, new org.apache.thrift.meta_data.FieldMetaData("institutionCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTITUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("institutionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("modified", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER_INSTITUTION_CODE, new org.apache.thrift.meta_data.FieldMetaData("ownerInstitutionCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFERENCES, new org.apache.thrift.meta_data.FieldMetaData("references", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHTS, new org.apache.thrift.meta_data.FieldMetaData("rights", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHTS_HOLDER, new org.apache.thrift.meta_data.FieldMetaData("rightsHolder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecordLevel.class, metaDataMap);
  }

  public RecordLevel() {
  }

  public RecordLevel(
    String accessRights,
    String basisOfRecord,
    String bibliographicCitation,
    String collectionCode,
    String collectionID,
    String dataGeneralizations,
    String datasetID,
    String datasetName,
    String dynamicProperties,
    String informationWithheld,
    String institutionCode,
    String institutionID,
    String language,
    String modified,
    String ownerInstitutionCode,
    String references,
    String rights,
    String rightsHolder,
    String type)
  {
    this();
    this.accessRights = accessRights;
    this.basisOfRecord = basisOfRecord;
    this.bibliographicCitation = bibliographicCitation;
    this.collectionCode = collectionCode;
    this.collectionID = collectionID;
    this.dataGeneralizations = dataGeneralizations;
    this.datasetID = datasetID;
    this.datasetName = datasetName;
    this.dynamicProperties = dynamicProperties;
    this.informationWithheld = informationWithheld;
    this.institutionCode = institutionCode;
    this.institutionID = institutionID;
    this.language = language;
    this.modified = modified;
    this.ownerInstitutionCode = ownerInstitutionCode;
    this.references = references;
    this.rights = rights;
    this.rightsHolder = rightsHolder;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecordLevel(RecordLevel other) {
    if (other.isSetAccessRights()) {
      this.accessRights = other.accessRights;
    }
    if (other.isSetBasisOfRecord()) {
      this.basisOfRecord = other.basisOfRecord;
    }
    if (other.isSetBibliographicCitation()) {
      this.bibliographicCitation = other.bibliographicCitation;
    }
    if (other.isSetCollectionCode()) {
      this.collectionCode = other.collectionCode;
    }
    if (other.isSetCollectionID()) {
      this.collectionID = other.collectionID;
    }
    if (other.isSetDataGeneralizations()) {
      this.dataGeneralizations = other.dataGeneralizations;
    }
    if (other.isSetDatasetID()) {
      this.datasetID = other.datasetID;
    }
    if (other.isSetDatasetName()) {
      this.datasetName = other.datasetName;
    }
    if (other.isSetDynamicProperties()) {
      this.dynamicProperties = other.dynamicProperties;
    }
    if (other.isSetInformationWithheld()) {
      this.informationWithheld = other.informationWithheld;
    }
    if (other.isSetInstitutionCode()) {
      this.institutionCode = other.institutionCode;
    }
    if (other.isSetInstitutionID()) {
      this.institutionID = other.institutionID;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetModified()) {
      this.modified = other.modified;
    }
    if (other.isSetOwnerInstitutionCode()) {
      this.ownerInstitutionCode = other.ownerInstitutionCode;
    }
    if (other.isSetReferences()) {
      this.references = other.references;
    }
    if (other.isSetRights()) {
      this.rights = other.rights;
    }
    if (other.isSetRightsHolder()) {
      this.rightsHolder = other.rightsHolder;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public RecordLevel deepCopy() {
    return new RecordLevel(this);
  }

  @Override
  public void clear() {
    this.accessRights = null;
    this.basisOfRecord = null;
    this.bibliographicCitation = null;
    this.collectionCode = null;
    this.collectionID = null;
    this.dataGeneralizations = null;
    this.datasetID = null;
    this.datasetName = null;
    this.dynamicProperties = null;
    this.informationWithheld = null;
    this.institutionCode = null;
    this.institutionID = null;
    this.language = null;
    this.modified = null;
    this.ownerInstitutionCode = null;
    this.references = null;
    this.rights = null;
    this.rightsHolder = null;
    this.type = null;
  }

  public String getAccessRights() {
    return this.accessRights;
  }

  public RecordLevel setAccessRights(String accessRights) {
    this.accessRights = accessRights;
    return this;
  }

  public void unsetAccessRights() {
    this.accessRights = null;
  }

  /** Returns true if field accessRights is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessRights() {
    return this.accessRights != null;
  }

  public void setAccessRightsIsSet(boolean value) {
    if (!value) {
      this.accessRights = null;
    }
  }

  public String getBasisOfRecord() {
    return this.basisOfRecord;
  }

  public RecordLevel setBasisOfRecord(String basisOfRecord) {
    this.basisOfRecord = basisOfRecord;
    return this;
  }

  public void unsetBasisOfRecord() {
    this.basisOfRecord = null;
  }

  /** Returns true if field basisOfRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetBasisOfRecord() {
    return this.basisOfRecord != null;
  }

  public void setBasisOfRecordIsSet(boolean value) {
    if (!value) {
      this.basisOfRecord = null;
    }
  }

  public String getBibliographicCitation() {
    return this.bibliographicCitation;
  }

  public RecordLevel setBibliographicCitation(String bibliographicCitation) {
    this.bibliographicCitation = bibliographicCitation;
    return this;
  }

  public void unsetBibliographicCitation() {
    this.bibliographicCitation = null;
  }

  /** Returns true if field bibliographicCitation is set (has been assigned a value) and false otherwise */
  public boolean isSetBibliographicCitation() {
    return this.bibliographicCitation != null;
  }

  public void setBibliographicCitationIsSet(boolean value) {
    if (!value) {
      this.bibliographicCitation = null;
    }
  }

  public String getCollectionCode() {
    return this.collectionCode;
  }

  public RecordLevel setCollectionCode(String collectionCode) {
    this.collectionCode = collectionCode;
    return this;
  }

  public void unsetCollectionCode() {
    this.collectionCode = null;
  }

  /** Returns true if field collectionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionCode() {
    return this.collectionCode != null;
  }

  public void setCollectionCodeIsSet(boolean value) {
    if (!value) {
      this.collectionCode = null;
    }
  }

  public String getCollectionID() {
    return this.collectionID;
  }

  public RecordLevel setCollectionID(String collectionID) {
    this.collectionID = collectionID;
    return this;
  }

  public void unsetCollectionID() {
    this.collectionID = null;
  }

  /** Returns true if field collectionID is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionID() {
    return this.collectionID != null;
  }

  public void setCollectionIDIsSet(boolean value) {
    if (!value) {
      this.collectionID = null;
    }
  }

  public String getDataGeneralizations() {
    return this.dataGeneralizations;
  }

  public RecordLevel setDataGeneralizations(String dataGeneralizations) {
    this.dataGeneralizations = dataGeneralizations;
    return this;
  }

  public void unsetDataGeneralizations() {
    this.dataGeneralizations = null;
  }

  /** Returns true if field dataGeneralizations is set (has been assigned a value) and false otherwise */
  public boolean isSetDataGeneralizations() {
    return this.dataGeneralizations != null;
  }

  public void setDataGeneralizationsIsSet(boolean value) {
    if (!value) {
      this.dataGeneralizations = null;
    }
  }

  public String getDatasetID() {
    return this.datasetID;
  }

  public RecordLevel setDatasetID(String datasetID) {
    this.datasetID = datasetID;
    return this;
  }

  public void unsetDatasetID() {
    this.datasetID = null;
  }

  /** Returns true if field datasetID is set (has been assigned a value) and false otherwise */
  public boolean isSetDatasetID() {
    return this.datasetID != null;
  }

  public void setDatasetIDIsSet(boolean value) {
    if (!value) {
      this.datasetID = null;
    }
  }

  public String getDatasetName() {
    return this.datasetName;
  }

  public RecordLevel setDatasetName(String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

  public void unsetDatasetName() {
    this.datasetName = null;
  }

  /** Returns true if field datasetName is set (has been assigned a value) and false otherwise */
  public boolean isSetDatasetName() {
    return this.datasetName != null;
  }

  public void setDatasetNameIsSet(boolean value) {
    if (!value) {
      this.datasetName = null;
    }
  }

  public String getDynamicProperties() {
    return this.dynamicProperties;
  }

  public RecordLevel setDynamicProperties(String dynamicProperties) {
    this.dynamicProperties = dynamicProperties;
    return this;
  }

  public void unsetDynamicProperties() {
    this.dynamicProperties = null;
  }

  /** Returns true if field dynamicProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetDynamicProperties() {
    return this.dynamicProperties != null;
  }

  public void setDynamicPropertiesIsSet(boolean value) {
    if (!value) {
      this.dynamicProperties = null;
    }
  }

  public String getInformationWithheld() {
    return this.informationWithheld;
  }

  public RecordLevel setInformationWithheld(String informationWithheld) {
    this.informationWithheld = informationWithheld;
    return this;
  }

  public void unsetInformationWithheld() {
    this.informationWithheld = null;
  }

  /** Returns true if field informationWithheld is set (has been assigned a value) and false otherwise */
  public boolean isSetInformationWithheld() {
    return this.informationWithheld != null;
  }

  public void setInformationWithheldIsSet(boolean value) {
    if (!value) {
      this.informationWithheld = null;
    }
  }

  public String getInstitutionCode() {
    return this.institutionCode;
  }

  public RecordLevel setInstitutionCode(String institutionCode) {
    this.institutionCode = institutionCode;
    return this;
  }

  public void unsetInstitutionCode() {
    this.institutionCode = null;
  }

  /** Returns true if field institutionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetInstitutionCode() {
    return this.institutionCode != null;
  }

  public void setInstitutionCodeIsSet(boolean value) {
    if (!value) {
      this.institutionCode = null;
    }
  }

  public String getInstitutionID() {
    return this.institutionID;
  }

  public RecordLevel setInstitutionID(String institutionID) {
    this.institutionID = institutionID;
    return this;
  }

  public void unsetInstitutionID() {
    this.institutionID = null;
  }

  /** Returns true if field institutionID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstitutionID() {
    return this.institutionID != null;
  }

  public void setInstitutionIDIsSet(boolean value) {
    if (!value) {
      this.institutionID = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public RecordLevel setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getModified() {
    return this.modified;
  }

  public RecordLevel setModified(String modified) {
    this.modified = modified;
    return this;
  }

  public void unsetModified() {
    this.modified = null;
  }

  /** Returns true if field modified is set (has been assigned a value) and false otherwise */
  public boolean isSetModified() {
    return this.modified != null;
  }

  public void setModifiedIsSet(boolean value) {
    if (!value) {
      this.modified = null;
    }
  }

  public String getOwnerInstitutionCode() {
    return this.ownerInstitutionCode;
  }

  public RecordLevel setOwnerInstitutionCode(String ownerInstitutionCode) {
    this.ownerInstitutionCode = ownerInstitutionCode;
    return this;
  }

  public void unsetOwnerInstitutionCode() {
    this.ownerInstitutionCode = null;
  }

  /** Returns true if field ownerInstitutionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerInstitutionCode() {
    return this.ownerInstitutionCode != null;
  }

  public void setOwnerInstitutionCodeIsSet(boolean value) {
    if (!value) {
      this.ownerInstitutionCode = null;
    }
  }

  public String getReferences() {
    return this.references;
  }

  public RecordLevel setReferences(String references) {
    this.references = references;
    return this;
  }

  public void unsetReferences() {
    this.references = null;
  }

  /** Returns true if field references is set (has been assigned a value) and false otherwise */
  public boolean isSetReferences() {
    return this.references != null;
  }

  public void setReferencesIsSet(boolean value) {
    if (!value) {
      this.references = null;
    }
  }

  public String getRights() {
    return this.rights;
  }

  public RecordLevel setRights(String rights) {
    this.rights = rights;
    return this;
  }

  public void unsetRights() {
    this.rights = null;
  }

  /** Returns true if field rights is set (has been assigned a value) and false otherwise */
  public boolean isSetRights() {
    return this.rights != null;
  }

  public void setRightsIsSet(boolean value) {
    if (!value) {
      this.rights = null;
    }
  }

  public String getRightsHolder() {
    return this.rightsHolder;
  }

  public RecordLevel setRightsHolder(String rightsHolder) {
    this.rightsHolder = rightsHolder;
    return this;
  }

  public void unsetRightsHolder() {
    this.rightsHolder = null;
  }

  /** Returns true if field rightsHolder is set (has been assigned a value) and false otherwise */
  public boolean isSetRightsHolder() {
    return this.rightsHolder != null;
  }

  public void setRightsHolderIsSet(boolean value) {
    if (!value) {
      this.rightsHolder = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public RecordLevel setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCESS_RIGHTS:
      if (value == null) {
        unsetAccessRights();
      } else {
        setAccessRights((String)value);
      }
      break;

    case BASIS_OF_RECORD:
      if (value == null) {
        unsetBasisOfRecord();
      } else {
        setBasisOfRecord((String)value);
      }
      break;

    case BIBLIOGRAPHIC_CITATION:
      if (value == null) {
        unsetBibliographicCitation();
      } else {
        setBibliographicCitation((String)value);
      }
      break;

    case COLLECTION_CODE:
      if (value == null) {
        unsetCollectionCode();
      } else {
        setCollectionCode((String)value);
      }
      break;

    case COLLECTION_ID:
      if (value == null) {
        unsetCollectionID();
      } else {
        setCollectionID((String)value);
      }
      break;

    case DATA_GENERALIZATIONS:
      if (value == null) {
        unsetDataGeneralizations();
      } else {
        setDataGeneralizations((String)value);
      }
      break;

    case DATASET_ID:
      if (value == null) {
        unsetDatasetID();
      } else {
        setDatasetID((String)value);
      }
      break;

    case DATASET_NAME:
      if (value == null) {
        unsetDatasetName();
      } else {
        setDatasetName((String)value);
      }
      break;

    case DYNAMIC_PROPERTIES:
      if (value == null) {
        unsetDynamicProperties();
      } else {
        setDynamicProperties((String)value);
      }
      break;

    case INFORMATION_WITHHELD:
      if (value == null) {
        unsetInformationWithheld();
      } else {
        setInformationWithheld((String)value);
      }
      break;

    case INSTITUTION_CODE:
      if (value == null) {
        unsetInstitutionCode();
      } else {
        setInstitutionCode((String)value);
      }
      break;

    case INSTITUTION_ID:
      if (value == null) {
        unsetInstitutionID();
      } else {
        setInstitutionID((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case MODIFIED:
      if (value == null) {
        unsetModified();
      } else {
        setModified((String)value);
      }
      break;

    case OWNER_INSTITUTION_CODE:
      if (value == null) {
        unsetOwnerInstitutionCode();
      } else {
        setOwnerInstitutionCode((String)value);
      }
      break;

    case REFERENCES:
      if (value == null) {
        unsetReferences();
      } else {
        setReferences((String)value);
      }
      break;

    case RIGHTS:
      if (value == null) {
        unsetRights();
      } else {
        setRights((String)value);
      }
      break;

    case RIGHTS_HOLDER:
      if (value == null) {
        unsetRightsHolder();
      } else {
        setRightsHolder((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCESS_RIGHTS:
      return getAccessRights();

    case BASIS_OF_RECORD:
      return getBasisOfRecord();

    case BIBLIOGRAPHIC_CITATION:
      return getBibliographicCitation();

    case COLLECTION_CODE:
      return getCollectionCode();

    case COLLECTION_ID:
      return getCollectionID();

    case DATA_GENERALIZATIONS:
      return getDataGeneralizations();

    case DATASET_ID:
      return getDatasetID();

    case DATASET_NAME:
      return getDatasetName();

    case DYNAMIC_PROPERTIES:
      return getDynamicProperties();

    case INFORMATION_WITHHELD:
      return getInformationWithheld();

    case INSTITUTION_CODE:
      return getInstitutionCode();

    case INSTITUTION_ID:
      return getInstitutionID();

    case LANGUAGE:
      return getLanguage();

    case MODIFIED:
      return getModified();

    case OWNER_INSTITUTION_CODE:
      return getOwnerInstitutionCode();

    case REFERENCES:
      return getReferences();

    case RIGHTS:
      return getRights();

    case RIGHTS_HOLDER:
      return getRightsHolder();

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCESS_RIGHTS:
      return isSetAccessRights();
    case BASIS_OF_RECORD:
      return isSetBasisOfRecord();
    case BIBLIOGRAPHIC_CITATION:
      return isSetBibliographicCitation();
    case COLLECTION_CODE:
      return isSetCollectionCode();
    case COLLECTION_ID:
      return isSetCollectionID();
    case DATA_GENERALIZATIONS:
      return isSetDataGeneralizations();
    case DATASET_ID:
      return isSetDatasetID();
    case DATASET_NAME:
      return isSetDatasetName();
    case DYNAMIC_PROPERTIES:
      return isSetDynamicProperties();
    case INFORMATION_WITHHELD:
      return isSetInformationWithheld();
    case INSTITUTION_CODE:
      return isSetInstitutionCode();
    case INSTITUTION_ID:
      return isSetInstitutionID();
    case LANGUAGE:
      return isSetLanguage();
    case MODIFIED:
      return isSetModified();
    case OWNER_INSTITUTION_CODE:
      return isSetOwnerInstitutionCode();
    case REFERENCES:
      return isSetReferences();
    case RIGHTS:
      return isSetRights();
    case RIGHTS_HOLDER:
      return isSetRightsHolder();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecordLevel)
      return this.equals((RecordLevel)that);
    return false;
  }

  public boolean equals(RecordLevel that) {
    if (that == null)
      return false;

    boolean this_present_accessRights = true && this.isSetAccessRights();
    boolean that_present_accessRights = true && that.isSetAccessRights();
    if (this_present_accessRights || that_present_accessRights) {
      if (!(this_present_accessRights && that_present_accessRights))
        return false;
      if (!this.accessRights.equals(that.accessRights))
        return false;
    }

    boolean this_present_basisOfRecord = true && this.isSetBasisOfRecord();
    boolean that_present_basisOfRecord = true && that.isSetBasisOfRecord();
    if (this_present_basisOfRecord || that_present_basisOfRecord) {
      if (!(this_present_basisOfRecord && that_present_basisOfRecord))
        return false;
      if (!this.basisOfRecord.equals(that.basisOfRecord))
        return false;
    }

    boolean this_present_bibliographicCitation = true && this.isSetBibliographicCitation();
    boolean that_present_bibliographicCitation = true && that.isSetBibliographicCitation();
    if (this_present_bibliographicCitation || that_present_bibliographicCitation) {
      if (!(this_present_bibliographicCitation && that_present_bibliographicCitation))
        return false;
      if (!this.bibliographicCitation.equals(that.bibliographicCitation))
        return false;
    }

    boolean this_present_collectionCode = true && this.isSetCollectionCode();
    boolean that_present_collectionCode = true && that.isSetCollectionCode();
    if (this_present_collectionCode || that_present_collectionCode) {
      if (!(this_present_collectionCode && that_present_collectionCode))
        return false;
      if (!this.collectionCode.equals(that.collectionCode))
        return false;
    }

    boolean this_present_collectionID = true && this.isSetCollectionID();
    boolean that_present_collectionID = true && that.isSetCollectionID();
    if (this_present_collectionID || that_present_collectionID) {
      if (!(this_present_collectionID && that_present_collectionID))
        return false;
      if (!this.collectionID.equals(that.collectionID))
        return false;
    }

    boolean this_present_dataGeneralizations = true && this.isSetDataGeneralizations();
    boolean that_present_dataGeneralizations = true && that.isSetDataGeneralizations();
    if (this_present_dataGeneralizations || that_present_dataGeneralizations) {
      if (!(this_present_dataGeneralizations && that_present_dataGeneralizations))
        return false;
      if (!this.dataGeneralizations.equals(that.dataGeneralizations))
        return false;
    }

    boolean this_present_datasetID = true && this.isSetDatasetID();
    boolean that_present_datasetID = true && that.isSetDatasetID();
    if (this_present_datasetID || that_present_datasetID) {
      if (!(this_present_datasetID && that_present_datasetID))
        return false;
      if (!this.datasetID.equals(that.datasetID))
        return false;
    }

    boolean this_present_datasetName = true && this.isSetDatasetName();
    boolean that_present_datasetName = true && that.isSetDatasetName();
    if (this_present_datasetName || that_present_datasetName) {
      if (!(this_present_datasetName && that_present_datasetName))
        return false;
      if (!this.datasetName.equals(that.datasetName))
        return false;
    }

    boolean this_present_dynamicProperties = true && this.isSetDynamicProperties();
    boolean that_present_dynamicProperties = true && that.isSetDynamicProperties();
    if (this_present_dynamicProperties || that_present_dynamicProperties) {
      if (!(this_present_dynamicProperties && that_present_dynamicProperties))
        return false;
      if (!this.dynamicProperties.equals(that.dynamicProperties))
        return false;
    }

    boolean this_present_informationWithheld = true && this.isSetInformationWithheld();
    boolean that_present_informationWithheld = true && that.isSetInformationWithheld();
    if (this_present_informationWithheld || that_present_informationWithheld) {
      if (!(this_present_informationWithheld && that_present_informationWithheld))
        return false;
      if (!this.informationWithheld.equals(that.informationWithheld))
        return false;
    }

    boolean this_present_institutionCode = true && this.isSetInstitutionCode();
    boolean that_present_institutionCode = true && that.isSetInstitutionCode();
    if (this_present_institutionCode || that_present_institutionCode) {
      if (!(this_present_institutionCode && that_present_institutionCode))
        return false;
      if (!this.institutionCode.equals(that.institutionCode))
        return false;
    }

    boolean this_present_institutionID = true && this.isSetInstitutionID();
    boolean that_present_institutionID = true && that.isSetInstitutionID();
    if (this_present_institutionID || that_present_institutionID) {
      if (!(this_present_institutionID && that_present_institutionID))
        return false;
      if (!this.institutionID.equals(that.institutionID))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_modified = true && this.isSetModified();
    boolean that_present_modified = true && that.isSetModified();
    if (this_present_modified || that_present_modified) {
      if (!(this_present_modified && that_present_modified))
        return false;
      if (!this.modified.equals(that.modified))
        return false;
    }

    boolean this_present_ownerInstitutionCode = true && this.isSetOwnerInstitutionCode();
    boolean that_present_ownerInstitutionCode = true && that.isSetOwnerInstitutionCode();
    if (this_present_ownerInstitutionCode || that_present_ownerInstitutionCode) {
      if (!(this_present_ownerInstitutionCode && that_present_ownerInstitutionCode))
        return false;
      if (!this.ownerInstitutionCode.equals(that.ownerInstitutionCode))
        return false;
    }

    boolean this_present_references = true && this.isSetReferences();
    boolean that_present_references = true && that.isSetReferences();
    if (this_present_references || that_present_references) {
      if (!(this_present_references && that_present_references))
        return false;
      if (!this.references.equals(that.references))
        return false;
    }

    boolean this_present_rights = true && this.isSetRights();
    boolean that_present_rights = true && that.isSetRights();
    if (this_present_rights || that_present_rights) {
      if (!(this_present_rights && that_present_rights))
        return false;
      if (!this.rights.equals(that.rights))
        return false;
    }

    boolean this_present_rightsHolder = true && this.isSetRightsHolder();
    boolean that_present_rightsHolder = true && that.isSetRightsHolder();
    if (this_present_rightsHolder || that_present_rightsHolder) {
      if (!(this_present_rightsHolder && that_present_rightsHolder))
        return false;
      if (!this.rightsHolder.equals(that.rightsHolder))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_accessRights = true && (isSetAccessRights());
    builder.append(present_accessRights);
    if (present_accessRights)
      builder.append(accessRights);

    boolean present_basisOfRecord = true && (isSetBasisOfRecord());
    builder.append(present_basisOfRecord);
    if (present_basisOfRecord)
      builder.append(basisOfRecord);

    boolean present_bibliographicCitation = true && (isSetBibliographicCitation());
    builder.append(present_bibliographicCitation);
    if (present_bibliographicCitation)
      builder.append(bibliographicCitation);

    boolean present_collectionCode = true && (isSetCollectionCode());
    builder.append(present_collectionCode);
    if (present_collectionCode)
      builder.append(collectionCode);

    boolean present_collectionID = true && (isSetCollectionID());
    builder.append(present_collectionID);
    if (present_collectionID)
      builder.append(collectionID);

    boolean present_dataGeneralizations = true && (isSetDataGeneralizations());
    builder.append(present_dataGeneralizations);
    if (present_dataGeneralizations)
      builder.append(dataGeneralizations);

    boolean present_datasetID = true && (isSetDatasetID());
    builder.append(present_datasetID);
    if (present_datasetID)
      builder.append(datasetID);

    boolean present_datasetName = true && (isSetDatasetName());
    builder.append(present_datasetName);
    if (present_datasetName)
      builder.append(datasetName);

    boolean present_dynamicProperties = true && (isSetDynamicProperties());
    builder.append(present_dynamicProperties);
    if (present_dynamicProperties)
      builder.append(dynamicProperties);

    boolean present_informationWithheld = true && (isSetInformationWithheld());
    builder.append(present_informationWithheld);
    if (present_informationWithheld)
      builder.append(informationWithheld);

    boolean present_institutionCode = true && (isSetInstitutionCode());
    builder.append(present_institutionCode);
    if (present_institutionCode)
      builder.append(institutionCode);

    boolean present_institutionID = true && (isSetInstitutionID());
    builder.append(present_institutionID);
    if (present_institutionID)
      builder.append(institutionID);

    boolean present_language = true && (isSetLanguage());
    builder.append(present_language);
    if (present_language)
      builder.append(language);

    boolean present_modified = true && (isSetModified());
    builder.append(present_modified);
    if (present_modified)
      builder.append(modified);

    boolean present_ownerInstitutionCode = true && (isSetOwnerInstitutionCode());
    builder.append(present_ownerInstitutionCode);
    if (present_ownerInstitutionCode)
      builder.append(ownerInstitutionCode);

    boolean present_references = true && (isSetReferences());
    builder.append(present_references);
    if (present_references)
      builder.append(references);

    boolean present_rights = true && (isSetRights());
    builder.append(present_rights);
    if (present_rights)
      builder.append(rights);

    boolean present_rightsHolder = true && (isSetRightsHolder());
    builder.append(present_rightsHolder);
    if (present_rightsHolder)
      builder.append(rightsHolder);

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type);

    return builder.toHashCode();
  }

  public int compareTo(RecordLevel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RecordLevel typedOther = (RecordLevel)other;

    lastComparison = Boolean.valueOf(isSetAccessRights()).compareTo(typedOther.isSetAccessRights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessRights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessRights, typedOther.accessRights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBasisOfRecord()).compareTo(typedOther.isSetBasisOfRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasisOfRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basisOfRecord, typedOther.basisOfRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBibliographicCitation()).compareTo(typedOther.isSetBibliographicCitation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBibliographicCitation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bibliographicCitation, typedOther.bibliographicCitation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectionCode()).compareTo(typedOther.isSetCollectionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionCode, typedOther.collectionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectionID()).compareTo(typedOther.isSetCollectionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionID, typedOther.collectionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataGeneralizations()).compareTo(typedOther.isSetDataGeneralizations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataGeneralizations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataGeneralizations, typedOther.dataGeneralizations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatasetID()).compareTo(typedOther.isSetDatasetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatasetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetID, typedOther.datasetID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatasetName()).compareTo(typedOther.isSetDatasetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatasetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetName, typedOther.datasetName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDynamicProperties()).compareTo(typedOther.isSetDynamicProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDynamicProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dynamicProperties, typedOther.dynamicProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInformationWithheld()).compareTo(typedOther.isSetInformationWithheld());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInformationWithheld()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.informationWithheld, typedOther.informationWithheld);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstitutionCode()).compareTo(typedOther.isSetInstitutionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstitutionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.institutionCode, typedOther.institutionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstitutionID()).compareTo(typedOther.isSetInstitutionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstitutionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.institutionID, typedOther.institutionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModified()).compareTo(typedOther.isSetModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modified, typedOther.modified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerInstitutionCode()).compareTo(typedOther.isSetOwnerInstitutionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerInstitutionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerInstitutionCode, typedOther.ownerInstitutionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReferences()).compareTo(typedOther.isSetReferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.references, typedOther.references);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRights()).compareTo(typedOther.isSetRights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rights, typedOther.rights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRightsHolder()).compareTo(typedOther.isSetRightsHolder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightsHolder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightsHolder, typedOther.rightsHolder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecordLevel(");
    boolean first = true;

    sb.append("accessRights:");
    if (this.accessRights == null) {
      sb.append("null");
    } else {
      sb.append(this.accessRights);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("basisOfRecord:");
    if (this.basisOfRecord == null) {
      sb.append("null");
    } else {
      sb.append(this.basisOfRecord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bibliographicCitation:");
    if (this.bibliographicCitation == null) {
      sb.append("null");
    } else {
      sb.append(this.bibliographicCitation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectionCode:");
    if (this.collectionCode == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectionID:");
    if (this.collectionID == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataGeneralizations:");
    if (this.dataGeneralizations == null) {
      sb.append("null");
    } else {
      sb.append(this.dataGeneralizations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datasetID:");
    if (this.datasetID == null) {
      sb.append("null");
    } else {
      sb.append(this.datasetID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datasetName:");
    if (this.datasetName == null) {
      sb.append("null");
    } else {
      sb.append(this.datasetName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dynamicProperties:");
    if (this.dynamicProperties == null) {
      sb.append("null");
    } else {
      sb.append(this.dynamicProperties);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("informationWithheld:");
    if (this.informationWithheld == null) {
      sb.append("null");
    } else {
      sb.append(this.informationWithheld);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("institutionCode:");
    if (this.institutionCode == null) {
      sb.append("null");
    } else {
      sb.append(this.institutionCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("institutionID:");
    if (this.institutionID == null) {
      sb.append("null");
    } else {
      sb.append(this.institutionID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modified:");
    if (this.modified == null) {
      sb.append("null");
    } else {
      sb.append(this.modified);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerInstitutionCode:");
    if (this.ownerInstitutionCode == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerInstitutionCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("references:");
    if (this.references == null) {
      sb.append("null");
    } else {
      sb.append(this.references);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rights:");
    if (this.rights == null) {
      sb.append("null");
    } else {
      sb.append(this.rights);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rightsHolder:");
    if (this.rightsHolder == null) {
      sb.append("null");
    } else {
      sb.append(this.rightsHolder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecordLevelStandardSchemeFactory implements SchemeFactory {
    public RecordLevelStandardScheme getScheme() {
      return new RecordLevelStandardScheme();
    }
  }

  private static class RecordLevelStandardScheme extends StandardScheme<RecordLevel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecordLevel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCESS_RIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessRights = iprot.readString();
              struct.setAccessRightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASIS_OF_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.basisOfRecord = iprot.readString();
              struct.setBasisOfRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BIBLIOGRAPHIC_CITATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bibliographicCitation = iprot.readString();
              struct.setBibliographicCitationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLLECTION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectionCode = iprot.readString();
              struct.setCollectionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLLECTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectionID = iprot.readString();
              struct.setCollectionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA_GENERALIZATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataGeneralizations = iprot.readString();
              struct.setDataGeneralizationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATASET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datasetID = iprot.readString();
              struct.setDatasetIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATASET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datasetName = iprot.readString();
              struct.setDatasetNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DYNAMIC_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dynamicProperties = iprot.readString();
              struct.setDynamicPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INFORMATION_WITHHELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.informationWithheld = iprot.readString();
              struct.setInformationWithheldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // INSTITUTION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.institutionCode = iprot.readString();
              struct.setInstitutionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INSTITUTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.institutionID = iprot.readString();
              struct.setInstitutionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modified = iprot.readString();
              struct.setModifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OWNER_INSTITUTION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerInstitutionCode = iprot.readString();
              struct.setOwnerInstitutionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.references = iprot.readString();
              struct.setReferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rights = iprot.readString();
              struct.setRightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RIGHTS_HOLDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rightsHolder = iprot.readString();
              struct.setRightsHolderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecordLevel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.accessRights != null) {
        oprot.writeFieldBegin(ACCESS_RIGHTS_FIELD_DESC);
        oprot.writeString(struct.accessRights);
        oprot.writeFieldEnd();
      }
      if (struct.basisOfRecord != null) {
        oprot.writeFieldBegin(BASIS_OF_RECORD_FIELD_DESC);
        oprot.writeString(struct.basisOfRecord);
        oprot.writeFieldEnd();
      }
      if (struct.bibliographicCitation != null) {
        oprot.writeFieldBegin(BIBLIOGRAPHIC_CITATION_FIELD_DESC);
        oprot.writeString(struct.bibliographicCitation);
        oprot.writeFieldEnd();
      }
      if (struct.collectionCode != null) {
        oprot.writeFieldBegin(COLLECTION_CODE_FIELD_DESC);
        oprot.writeString(struct.collectionCode);
        oprot.writeFieldEnd();
      }
      if (struct.collectionID != null) {
        oprot.writeFieldBegin(COLLECTION_ID_FIELD_DESC);
        oprot.writeString(struct.collectionID);
        oprot.writeFieldEnd();
      }
      if (struct.dataGeneralizations != null) {
        oprot.writeFieldBegin(DATA_GENERALIZATIONS_FIELD_DESC);
        oprot.writeString(struct.dataGeneralizations);
        oprot.writeFieldEnd();
      }
      if (struct.datasetID != null) {
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeString(struct.datasetID);
        oprot.writeFieldEnd();
      }
      if (struct.datasetName != null) {
        oprot.writeFieldBegin(DATASET_NAME_FIELD_DESC);
        oprot.writeString(struct.datasetName);
        oprot.writeFieldEnd();
      }
      if (struct.dynamicProperties != null) {
        oprot.writeFieldBegin(DYNAMIC_PROPERTIES_FIELD_DESC);
        oprot.writeString(struct.dynamicProperties);
        oprot.writeFieldEnd();
      }
      if (struct.informationWithheld != null) {
        oprot.writeFieldBegin(INFORMATION_WITHHELD_FIELD_DESC);
        oprot.writeString(struct.informationWithheld);
        oprot.writeFieldEnd();
      }
      if (struct.institutionCode != null) {
        oprot.writeFieldBegin(INSTITUTION_CODE_FIELD_DESC);
        oprot.writeString(struct.institutionCode);
        oprot.writeFieldEnd();
      }
      if (struct.institutionID != null) {
        oprot.writeFieldBegin(INSTITUTION_ID_FIELD_DESC);
        oprot.writeString(struct.institutionID);
        oprot.writeFieldEnd();
      }
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.modified != null) {
        oprot.writeFieldBegin(MODIFIED_FIELD_DESC);
        oprot.writeString(struct.modified);
        oprot.writeFieldEnd();
      }
      if (struct.ownerInstitutionCode != null) {
        oprot.writeFieldBegin(OWNER_INSTITUTION_CODE_FIELD_DESC);
        oprot.writeString(struct.ownerInstitutionCode);
        oprot.writeFieldEnd();
      }
      if (struct.references != null) {
        oprot.writeFieldBegin(REFERENCES_FIELD_DESC);
        oprot.writeString(struct.references);
        oprot.writeFieldEnd();
      }
      if (struct.rights != null) {
        oprot.writeFieldBegin(RIGHTS_FIELD_DESC);
        oprot.writeString(struct.rights);
        oprot.writeFieldEnd();
      }
      if (struct.rightsHolder != null) {
        oprot.writeFieldBegin(RIGHTS_HOLDER_FIELD_DESC);
        oprot.writeString(struct.rightsHolder);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecordLevelTupleSchemeFactory implements SchemeFactory {
    public RecordLevelTupleScheme getScheme() {
      return new RecordLevelTupleScheme();
    }
  }

  private static class RecordLevelTupleScheme extends TupleScheme<RecordLevel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecordLevel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAccessRights()) {
        optionals.set(0);
      }
      if (struct.isSetBasisOfRecord()) {
        optionals.set(1);
      }
      if (struct.isSetBibliographicCitation()) {
        optionals.set(2);
      }
      if (struct.isSetCollectionCode()) {
        optionals.set(3);
      }
      if (struct.isSetCollectionID()) {
        optionals.set(4);
      }
      if (struct.isSetDataGeneralizations()) {
        optionals.set(5);
      }
      if (struct.isSetDatasetID()) {
        optionals.set(6);
      }
      if (struct.isSetDatasetName()) {
        optionals.set(7);
      }
      if (struct.isSetDynamicProperties()) {
        optionals.set(8);
      }
      if (struct.isSetInformationWithheld()) {
        optionals.set(9);
      }
      if (struct.isSetInstitutionCode()) {
        optionals.set(10);
      }
      if (struct.isSetInstitutionID()) {
        optionals.set(11);
      }
      if (struct.isSetLanguage()) {
        optionals.set(12);
      }
      if (struct.isSetModified()) {
        optionals.set(13);
      }
      if (struct.isSetOwnerInstitutionCode()) {
        optionals.set(14);
      }
      if (struct.isSetReferences()) {
        optionals.set(15);
      }
      if (struct.isSetRights()) {
        optionals.set(16);
      }
      if (struct.isSetRightsHolder()) {
        optionals.set(17);
      }
      if (struct.isSetType()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetAccessRights()) {
        oprot.writeString(struct.accessRights);
      }
      if (struct.isSetBasisOfRecord()) {
        oprot.writeString(struct.basisOfRecord);
      }
      if (struct.isSetBibliographicCitation()) {
        oprot.writeString(struct.bibliographicCitation);
      }
      if (struct.isSetCollectionCode()) {
        oprot.writeString(struct.collectionCode);
      }
      if (struct.isSetCollectionID()) {
        oprot.writeString(struct.collectionID);
      }
      if (struct.isSetDataGeneralizations()) {
        oprot.writeString(struct.dataGeneralizations);
      }
      if (struct.isSetDatasetID()) {
        oprot.writeString(struct.datasetID);
      }
      if (struct.isSetDatasetName()) {
        oprot.writeString(struct.datasetName);
      }
      if (struct.isSetDynamicProperties()) {
        oprot.writeString(struct.dynamicProperties);
      }
      if (struct.isSetInformationWithheld()) {
        oprot.writeString(struct.informationWithheld);
      }
      if (struct.isSetInstitutionCode()) {
        oprot.writeString(struct.institutionCode);
      }
      if (struct.isSetInstitutionID()) {
        oprot.writeString(struct.institutionID);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetModified()) {
        oprot.writeString(struct.modified);
      }
      if (struct.isSetOwnerInstitutionCode()) {
        oprot.writeString(struct.ownerInstitutionCode);
      }
      if (struct.isSetReferences()) {
        oprot.writeString(struct.references);
      }
      if (struct.isSetRights()) {
        oprot.writeString(struct.rights);
      }
      if (struct.isSetRightsHolder()) {
        oprot.writeString(struct.rightsHolder);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecordLevel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.accessRights = iprot.readString();
        struct.setAccessRightsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.basisOfRecord = iprot.readString();
        struct.setBasisOfRecordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bibliographicCitation = iprot.readString();
        struct.setBibliographicCitationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.collectionCode = iprot.readString();
        struct.setCollectionCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.collectionID = iprot.readString();
        struct.setCollectionIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dataGeneralizations = iprot.readString();
        struct.setDataGeneralizationsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.datasetID = iprot.readString();
        struct.setDatasetIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.datasetName = iprot.readString();
        struct.setDatasetNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dynamicProperties = iprot.readString();
        struct.setDynamicPropertiesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.informationWithheld = iprot.readString();
        struct.setInformationWithheldIsSet(true);
      }
      if (incoming.get(10)) {
        struct.institutionCode = iprot.readString();
        struct.setInstitutionCodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.institutionID = iprot.readString();
        struct.setInstitutionIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.modified = iprot.readString();
        struct.setModifiedIsSet(true);
      }
      if (incoming.get(14)) {
        struct.ownerInstitutionCode = iprot.readString();
        struct.setOwnerInstitutionCodeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.references = iprot.readString();
        struct.setReferencesIsSet(true);
      }
      if (incoming.get(16)) {
        struct.rights = iprot.readString();
        struct.setRightsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.rightsHolder = iprot.readString();
        struct.setRightsHolderIsSet(true);
      }
      if (incoming.get(18)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
    }
  }

}

