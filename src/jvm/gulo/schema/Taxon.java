/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Darwin Core Taxon class structure.
 * 
 * http://rs.tdwg.org/dwc/terms/index.htm#Taxon
 */
public class Taxon implements org.apache.thrift.TBase<Taxon, Taxon._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Taxon");

  private static final org.apache.thrift.protocol.TField ACCEPTED_NAME_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptedNameUsage", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACCEPTED_NAME_USAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptedNameUsageID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLAZZ_FIELD_DESC = new org.apache.thrift.protocol.TField("clazz", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("family", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GENUS_FIELD_DESC = new org.apache.thrift.protocol.TField("genus", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HIGHER_CLASSIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("higherClassification", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField INFRASPECIFIC_EPITHET_FIELD_DESC = new org.apache.thrift.protocol.TField("infraspecificEpithet", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField KINGDOM_FIELD_DESC = new org.apache.thrift.protocol.TField("kingdom", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NAME_ACCORDING_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("nameAccordingTo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NAME_ACCORDING_TO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nameAccordingToID", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField NAME_PUBLISHED_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("namePublishedIn", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField NAME_PUBLISHED_IN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("namePublishedInID", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField NAME_PUBLISHED_IN_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("namePublishedInYear", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField NOMENCLATURAL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("nomenclaturalCode", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField NOMENCLATURAL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("nomenclaturalStatus", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ORIGINAL_NAME_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("originalNameUsage", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ORIGINAL_NAME_USAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("originalNameUsageID", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PARENT_NAME_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("parentNameUsage", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PARENT_NAME_USAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentNameUsageID", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PHYLUM_FIELD_DESC = new org.apache.thrift.protocol.TField("phylum", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SCIENTIFIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("scientificName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField SCIENTIFIC_NAME_AUTHORSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("scientificNameAuthorship", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField SCIENTIFIC_NAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("scientificNameID", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField SPECIFIC_EPITHET_FIELD_DESC = new org.apache.thrift.protocol.TField("specificEpithet", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField SUBGENUS_FIELD_DESC = new org.apache.thrift.protocol.TField("subgenus", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField TAXON_CONCEPT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taxonConceptID", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField TAXON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taxonID", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField TAXON_RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("taxonRank", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField TAXON_REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("taxonRemarks", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField TAXONOMIC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("taxonomicStatus", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField VERBATIM_TAXON_RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("verbatimTaxonRank", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField VERNACULAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("vernacularName", org.apache.thrift.protocol.TType.STRING, (short)33);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaxonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaxonTupleSchemeFactory());
  }

  public String acceptedNameUsage; // required
  public String acceptedNameUsageID; // required
  public String clazz; // required
  public String family; // required
  public String genus; // required
  public String higherClassification; // required
  public String infraspecificEpithet; // required
  public String kingdom; // required
  public String nameAccordingTo; // required
  public String nameAccordingToID; // required
  public String namePublishedIn; // required
  public String namePublishedInID; // required
  public String namePublishedInYear; // required
  public String nomenclaturalCode; // required
  public String nomenclaturalStatus; // required
  public String order; // required
  public String originalNameUsage; // required
  public String originalNameUsageID; // required
  public String parentNameUsage; // required
  public String parentNameUsageID; // required
  public String phylum; // required
  public String scientificName; // required
  public String scientificNameAuthorship; // required
  public String scientificNameID; // required
  public String specificEpithet; // required
  public String subgenus; // required
  public String taxonConceptID; // required
  public String taxonID; // required
  public String taxonRank; // required
  public String taxonRemarks; // required
  public String taxonomicStatus; // required
  public String verbatimTaxonRank; // required
  public String vernacularName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCEPTED_NAME_USAGE((short)1, "acceptedNameUsage"),
    ACCEPTED_NAME_USAGE_ID((short)2, "acceptedNameUsageID"),
    CLAZZ((short)3, "clazz"),
    FAMILY((short)4, "family"),
    GENUS((short)5, "genus"),
    HIGHER_CLASSIFICATION((short)6, "higherClassification"),
    INFRASPECIFIC_EPITHET((short)7, "infraspecificEpithet"),
    KINGDOM((short)8, "kingdom"),
    NAME_ACCORDING_TO((short)9, "nameAccordingTo"),
    NAME_ACCORDING_TO_ID((short)10, "nameAccordingToID"),
    NAME_PUBLISHED_IN((short)11, "namePublishedIn"),
    NAME_PUBLISHED_IN_ID((short)12, "namePublishedInID"),
    NAME_PUBLISHED_IN_YEAR((short)13, "namePublishedInYear"),
    NOMENCLATURAL_CODE((short)14, "nomenclaturalCode"),
    NOMENCLATURAL_STATUS((short)15, "nomenclaturalStatus"),
    ORDER((short)16, "order"),
    ORIGINAL_NAME_USAGE((short)17, "originalNameUsage"),
    ORIGINAL_NAME_USAGE_ID((short)18, "originalNameUsageID"),
    PARENT_NAME_USAGE((short)19, "parentNameUsage"),
    PARENT_NAME_USAGE_ID((short)20, "parentNameUsageID"),
    PHYLUM((short)21, "phylum"),
    SCIENTIFIC_NAME((short)22, "scientificName"),
    SCIENTIFIC_NAME_AUTHORSHIP((short)23, "scientificNameAuthorship"),
    SCIENTIFIC_NAME_ID((short)24, "scientificNameID"),
    SPECIFIC_EPITHET((short)25, "specificEpithet"),
    SUBGENUS((short)26, "subgenus"),
    TAXON_CONCEPT_ID((short)27, "taxonConceptID"),
    TAXON_ID((short)28, "taxonID"),
    TAXON_RANK((short)29, "taxonRank"),
    TAXON_REMARKS((short)30, "taxonRemarks"),
    TAXONOMIC_STATUS((short)31, "taxonomicStatus"),
    VERBATIM_TAXON_RANK((short)32, "verbatimTaxonRank"),
    VERNACULAR_NAME((short)33, "vernacularName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCEPTED_NAME_USAGE
          return ACCEPTED_NAME_USAGE;
        case 2: // ACCEPTED_NAME_USAGE_ID
          return ACCEPTED_NAME_USAGE_ID;
        case 3: // CLAZZ
          return CLAZZ;
        case 4: // FAMILY
          return FAMILY;
        case 5: // GENUS
          return GENUS;
        case 6: // HIGHER_CLASSIFICATION
          return HIGHER_CLASSIFICATION;
        case 7: // INFRASPECIFIC_EPITHET
          return INFRASPECIFIC_EPITHET;
        case 8: // KINGDOM
          return KINGDOM;
        case 9: // NAME_ACCORDING_TO
          return NAME_ACCORDING_TO;
        case 10: // NAME_ACCORDING_TO_ID
          return NAME_ACCORDING_TO_ID;
        case 11: // NAME_PUBLISHED_IN
          return NAME_PUBLISHED_IN;
        case 12: // NAME_PUBLISHED_IN_ID
          return NAME_PUBLISHED_IN_ID;
        case 13: // NAME_PUBLISHED_IN_YEAR
          return NAME_PUBLISHED_IN_YEAR;
        case 14: // NOMENCLATURAL_CODE
          return NOMENCLATURAL_CODE;
        case 15: // NOMENCLATURAL_STATUS
          return NOMENCLATURAL_STATUS;
        case 16: // ORDER
          return ORDER;
        case 17: // ORIGINAL_NAME_USAGE
          return ORIGINAL_NAME_USAGE;
        case 18: // ORIGINAL_NAME_USAGE_ID
          return ORIGINAL_NAME_USAGE_ID;
        case 19: // PARENT_NAME_USAGE
          return PARENT_NAME_USAGE;
        case 20: // PARENT_NAME_USAGE_ID
          return PARENT_NAME_USAGE_ID;
        case 21: // PHYLUM
          return PHYLUM;
        case 22: // SCIENTIFIC_NAME
          return SCIENTIFIC_NAME;
        case 23: // SCIENTIFIC_NAME_AUTHORSHIP
          return SCIENTIFIC_NAME_AUTHORSHIP;
        case 24: // SCIENTIFIC_NAME_ID
          return SCIENTIFIC_NAME_ID;
        case 25: // SPECIFIC_EPITHET
          return SPECIFIC_EPITHET;
        case 26: // SUBGENUS
          return SUBGENUS;
        case 27: // TAXON_CONCEPT_ID
          return TAXON_CONCEPT_ID;
        case 28: // TAXON_ID
          return TAXON_ID;
        case 29: // TAXON_RANK
          return TAXON_RANK;
        case 30: // TAXON_REMARKS
          return TAXON_REMARKS;
        case 31: // TAXONOMIC_STATUS
          return TAXONOMIC_STATUS;
        case 32: // VERBATIM_TAXON_RANK
          return VERBATIM_TAXON_RANK;
        case 33: // VERNACULAR_NAME
          return VERNACULAR_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCEPTED_NAME_USAGE, new org.apache.thrift.meta_data.FieldMetaData("acceptedNameUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCEPTED_NAME_USAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("acceptedNameUsageID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLAZZ, new org.apache.thrift.meta_data.FieldMetaData("clazz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAMILY, new org.apache.thrift.meta_data.FieldMetaData("family", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENUS, new org.apache.thrift.meta_data.FieldMetaData("genus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHER_CLASSIFICATION, new org.apache.thrift.meta_data.FieldMetaData("higherClassification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INFRASPECIFIC_EPITHET, new org.apache.thrift.meta_data.FieldMetaData("infraspecificEpithet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KINGDOM, new org.apache.thrift.meta_data.FieldMetaData("kingdom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_ACCORDING_TO, new org.apache.thrift.meta_data.FieldMetaData("nameAccordingTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_ACCORDING_TO_ID, new org.apache.thrift.meta_data.FieldMetaData("nameAccordingToID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_PUBLISHED_IN, new org.apache.thrift.meta_data.FieldMetaData("namePublishedIn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_PUBLISHED_IN_ID, new org.apache.thrift.meta_data.FieldMetaData("namePublishedInID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_PUBLISHED_IN_YEAR, new org.apache.thrift.meta_data.FieldMetaData("namePublishedInYear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOMENCLATURAL_CODE, new org.apache.thrift.meta_data.FieldMetaData("nomenclaturalCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOMENCLATURAL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("nomenclaturalStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_NAME_USAGE, new org.apache.thrift.meta_data.FieldMetaData("originalNameUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_NAME_USAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("originalNameUsageID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_NAME_USAGE, new org.apache.thrift.meta_data.FieldMetaData("parentNameUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_NAME_USAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("parentNameUsageID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHYLUM, new org.apache.thrift.meta_data.FieldMetaData("phylum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCIENTIFIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("scientificName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCIENTIFIC_NAME_AUTHORSHIP, new org.apache.thrift.meta_data.FieldMetaData("scientificNameAuthorship", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCIENTIFIC_NAME_ID, new org.apache.thrift.meta_data.FieldMetaData("scientificNameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPECIFIC_EPITHET, new org.apache.thrift.meta_data.FieldMetaData("specificEpithet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBGENUS, new org.apache.thrift.meta_data.FieldMetaData("subgenus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAXON_CONCEPT_ID, new org.apache.thrift.meta_data.FieldMetaData("taxonConceptID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAXON_ID, new org.apache.thrift.meta_data.FieldMetaData("taxonID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAXON_RANK, new org.apache.thrift.meta_data.FieldMetaData("taxonRank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAXON_REMARKS, new org.apache.thrift.meta_data.FieldMetaData("taxonRemarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAXONOMIC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("taxonomicStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERBATIM_TAXON_RANK, new org.apache.thrift.meta_data.FieldMetaData("verbatimTaxonRank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERNACULAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("vernacularName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Taxon.class, metaDataMap);
  }

  public Taxon() {
  }

  public Taxon(
    String acceptedNameUsage,
    String acceptedNameUsageID,
    String clazz,
    String family,
    String genus,
    String higherClassification,
    String infraspecificEpithet,
    String kingdom,
    String nameAccordingTo,
    String nameAccordingToID,
    String namePublishedIn,
    String namePublishedInID,
    String namePublishedInYear,
    String nomenclaturalCode,
    String nomenclaturalStatus,
    String order,
    String originalNameUsage,
    String originalNameUsageID,
    String parentNameUsage,
    String parentNameUsageID,
    String phylum,
    String scientificName,
    String scientificNameAuthorship,
    String scientificNameID,
    String specificEpithet,
    String subgenus,
    String taxonConceptID,
    String taxonID,
    String taxonRank,
    String taxonRemarks,
    String taxonomicStatus,
    String verbatimTaxonRank,
    String vernacularName)
  {
    this();
    this.acceptedNameUsage = acceptedNameUsage;
    this.acceptedNameUsageID = acceptedNameUsageID;
    this.clazz = clazz;
    this.family = family;
    this.genus = genus;
    this.higherClassification = higherClassification;
    this.infraspecificEpithet = infraspecificEpithet;
    this.kingdom = kingdom;
    this.nameAccordingTo = nameAccordingTo;
    this.nameAccordingToID = nameAccordingToID;
    this.namePublishedIn = namePublishedIn;
    this.namePublishedInID = namePublishedInID;
    this.namePublishedInYear = namePublishedInYear;
    this.nomenclaturalCode = nomenclaturalCode;
    this.nomenclaturalStatus = nomenclaturalStatus;
    this.order = order;
    this.originalNameUsage = originalNameUsage;
    this.originalNameUsageID = originalNameUsageID;
    this.parentNameUsage = parentNameUsage;
    this.parentNameUsageID = parentNameUsageID;
    this.phylum = phylum;
    this.scientificName = scientificName;
    this.scientificNameAuthorship = scientificNameAuthorship;
    this.scientificNameID = scientificNameID;
    this.specificEpithet = specificEpithet;
    this.subgenus = subgenus;
    this.taxonConceptID = taxonConceptID;
    this.taxonID = taxonID;
    this.taxonRank = taxonRank;
    this.taxonRemarks = taxonRemarks;
    this.taxonomicStatus = taxonomicStatus;
    this.verbatimTaxonRank = verbatimTaxonRank;
    this.vernacularName = vernacularName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Taxon(Taxon other) {
    if (other.isSetAcceptedNameUsage()) {
      this.acceptedNameUsage = other.acceptedNameUsage;
    }
    if (other.isSetAcceptedNameUsageID()) {
      this.acceptedNameUsageID = other.acceptedNameUsageID;
    }
    if (other.isSetClazz()) {
      this.clazz = other.clazz;
    }
    if (other.isSetFamily()) {
      this.family = other.family;
    }
    if (other.isSetGenus()) {
      this.genus = other.genus;
    }
    if (other.isSetHigherClassification()) {
      this.higherClassification = other.higherClassification;
    }
    if (other.isSetInfraspecificEpithet()) {
      this.infraspecificEpithet = other.infraspecificEpithet;
    }
    if (other.isSetKingdom()) {
      this.kingdom = other.kingdom;
    }
    if (other.isSetNameAccordingTo()) {
      this.nameAccordingTo = other.nameAccordingTo;
    }
    if (other.isSetNameAccordingToID()) {
      this.nameAccordingToID = other.nameAccordingToID;
    }
    if (other.isSetNamePublishedIn()) {
      this.namePublishedIn = other.namePublishedIn;
    }
    if (other.isSetNamePublishedInID()) {
      this.namePublishedInID = other.namePublishedInID;
    }
    if (other.isSetNamePublishedInYear()) {
      this.namePublishedInYear = other.namePublishedInYear;
    }
    if (other.isSetNomenclaturalCode()) {
      this.nomenclaturalCode = other.nomenclaturalCode;
    }
    if (other.isSetNomenclaturalStatus()) {
      this.nomenclaturalStatus = other.nomenclaturalStatus;
    }
    if (other.isSetOrder()) {
      this.order = other.order;
    }
    if (other.isSetOriginalNameUsage()) {
      this.originalNameUsage = other.originalNameUsage;
    }
    if (other.isSetOriginalNameUsageID()) {
      this.originalNameUsageID = other.originalNameUsageID;
    }
    if (other.isSetParentNameUsage()) {
      this.parentNameUsage = other.parentNameUsage;
    }
    if (other.isSetParentNameUsageID()) {
      this.parentNameUsageID = other.parentNameUsageID;
    }
    if (other.isSetPhylum()) {
      this.phylum = other.phylum;
    }
    if (other.isSetScientificName()) {
      this.scientificName = other.scientificName;
    }
    if (other.isSetScientificNameAuthorship()) {
      this.scientificNameAuthorship = other.scientificNameAuthorship;
    }
    if (other.isSetScientificNameID()) {
      this.scientificNameID = other.scientificNameID;
    }
    if (other.isSetSpecificEpithet()) {
      this.specificEpithet = other.specificEpithet;
    }
    if (other.isSetSubgenus()) {
      this.subgenus = other.subgenus;
    }
    if (other.isSetTaxonConceptID()) {
      this.taxonConceptID = other.taxonConceptID;
    }
    if (other.isSetTaxonID()) {
      this.taxonID = other.taxonID;
    }
    if (other.isSetTaxonRank()) {
      this.taxonRank = other.taxonRank;
    }
    if (other.isSetTaxonRemarks()) {
      this.taxonRemarks = other.taxonRemarks;
    }
    if (other.isSetTaxonomicStatus()) {
      this.taxonomicStatus = other.taxonomicStatus;
    }
    if (other.isSetVerbatimTaxonRank()) {
      this.verbatimTaxonRank = other.verbatimTaxonRank;
    }
    if (other.isSetVernacularName()) {
      this.vernacularName = other.vernacularName;
    }
  }

  public Taxon deepCopy() {
    return new Taxon(this);
  }

  @Override
  public void clear() {
    this.acceptedNameUsage = null;
    this.acceptedNameUsageID = null;
    this.clazz = null;
    this.family = null;
    this.genus = null;
    this.higherClassification = null;
    this.infraspecificEpithet = null;
    this.kingdom = null;
    this.nameAccordingTo = null;
    this.nameAccordingToID = null;
    this.namePublishedIn = null;
    this.namePublishedInID = null;
    this.namePublishedInYear = null;
    this.nomenclaturalCode = null;
    this.nomenclaturalStatus = null;
    this.order = null;
    this.originalNameUsage = null;
    this.originalNameUsageID = null;
    this.parentNameUsage = null;
    this.parentNameUsageID = null;
    this.phylum = null;
    this.scientificName = null;
    this.scientificNameAuthorship = null;
    this.scientificNameID = null;
    this.specificEpithet = null;
    this.subgenus = null;
    this.taxonConceptID = null;
    this.taxonID = null;
    this.taxonRank = null;
    this.taxonRemarks = null;
    this.taxonomicStatus = null;
    this.verbatimTaxonRank = null;
    this.vernacularName = null;
  }

  public String getAcceptedNameUsage() {
    return this.acceptedNameUsage;
  }

  public Taxon setAcceptedNameUsage(String acceptedNameUsage) {
    this.acceptedNameUsage = acceptedNameUsage;
    return this;
  }

  public void unsetAcceptedNameUsage() {
    this.acceptedNameUsage = null;
  }

  /** Returns true if field acceptedNameUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetAcceptedNameUsage() {
    return this.acceptedNameUsage != null;
  }

  public void setAcceptedNameUsageIsSet(boolean value) {
    if (!value) {
      this.acceptedNameUsage = null;
    }
  }

  public String getAcceptedNameUsageID() {
    return this.acceptedNameUsageID;
  }

  public Taxon setAcceptedNameUsageID(String acceptedNameUsageID) {
    this.acceptedNameUsageID = acceptedNameUsageID;
    return this;
  }

  public void unsetAcceptedNameUsageID() {
    this.acceptedNameUsageID = null;
  }

  /** Returns true if field acceptedNameUsageID is set (has been assigned a value) and false otherwise */
  public boolean isSetAcceptedNameUsageID() {
    return this.acceptedNameUsageID != null;
  }

  public void setAcceptedNameUsageIDIsSet(boolean value) {
    if (!value) {
      this.acceptedNameUsageID = null;
    }
  }

  public String getClazz() {
    return this.clazz;
  }

  public Taxon setClazz(String clazz) {
    this.clazz = clazz;
    return this;
  }

  public void unsetClazz() {
    this.clazz = null;
  }

  /** Returns true if field clazz is set (has been assigned a value) and false otherwise */
  public boolean isSetClazz() {
    return this.clazz != null;
  }

  public void setClazzIsSet(boolean value) {
    if (!value) {
      this.clazz = null;
    }
  }

  public String getFamily() {
    return this.family;
  }

  public Taxon setFamily(String family) {
    this.family = family;
    return this;
  }

  public void unsetFamily() {
    this.family = null;
  }

  /** Returns true if field family is set (has been assigned a value) and false otherwise */
  public boolean isSetFamily() {
    return this.family != null;
  }

  public void setFamilyIsSet(boolean value) {
    if (!value) {
      this.family = null;
    }
  }

  public String getGenus() {
    return this.genus;
  }

  public Taxon setGenus(String genus) {
    this.genus = genus;
    return this;
  }

  public void unsetGenus() {
    this.genus = null;
  }

  /** Returns true if field genus is set (has been assigned a value) and false otherwise */
  public boolean isSetGenus() {
    return this.genus != null;
  }

  public void setGenusIsSet(boolean value) {
    if (!value) {
      this.genus = null;
    }
  }

  public String getHigherClassification() {
    return this.higherClassification;
  }

  public Taxon setHigherClassification(String higherClassification) {
    this.higherClassification = higherClassification;
    return this;
  }

  public void unsetHigherClassification() {
    this.higherClassification = null;
  }

  /** Returns true if field higherClassification is set (has been assigned a value) and false otherwise */
  public boolean isSetHigherClassification() {
    return this.higherClassification != null;
  }

  public void setHigherClassificationIsSet(boolean value) {
    if (!value) {
      this.higherClassification = null;
    }
  }

  public String getInfraspecificEpithet() {
    return this.infraspecificEpithet;
  }

  public Taxon setInfraspecificEpithet(String infraspecificEpithet) {
    this.infraspecificEpithet = infraspecificEpithet;
    return this;
  }

  public void unsetInfraspecificEpithet() {
    this.infraspecificEpithet = null;
  }

  /** Returns true if field infraspecificEpithet is set (has been assigned a value) and false otherwise */
  public boolean isSetInfraspecificEpithet() {
    return this.infraspecificEpithet != null;
  }

  public void setInfraspecificEpithetIsSet(boolean value) {
    if (!value) {
      this.infraspecificEpithet = null;
    }
  }

  public String getKingdom() {
    return this.kingdom;
  }

  public Taxon setKingdom(String kingdom) {
    this.kingdom = kingdom;
    return this;
  }

  public void unsetKingdom() {
    this.kingdom = null;
  }

  /** Returns true if field kingdom is set (has been assigned a value) and false otherwise */
  public boolean isSetKingdom() {
    return this.kingdom != null;
  }

  public void setKingdomIsSet(boolean value) {
    if (!value) {
      this.kingdom = null;
    }
  }

  public String getNameAccordingTo() {
    return this.nameAccordingTo;
  }

  public Taxon setNameAccordingTo(String nameAccordingTo) {
    this.nameAccordingTo = nameAccordingTo;
    return this;
  }

  public void unsetNameAccordingTo() {
    this.nameAccordingTo = null;
  }

  /** Returns true if field nameAccordingTo is set (has been assigned a value) and false otherwise */
  public boolean isSetNameAccordingTo() {
    return this.nameAccordingTo != null;
  }

  public void setNameAccordingToIsSet(boolean value) {
    if (!value) {
      this.nameAccordingTo = null;
    }
  }

  public String getNameAccordingToID() {
    return this.nameAccordingToID;
  }

  public Taxon setNameAccordingToID(String nameAccordingToID) {
    this.nameAccordingToID = nameAccordingToID;
    return this;
  }

  public void unsetNameAccordingToID() {
    this.nameAccordingToID = null;
  }

  /** Returns true if field nameAccordingToID is set (has been assigned a value) and false otherwise */
  public boolean isSetNameAccordingToID() {
    return this.nameAccordingToID != null;
  }

  public void setNameAccordingToIDIsSet(boolean value) {
    if (!value) {
      this.nameAccordingToID = null;
    }
  }

  public String getNamePublishedIn() {
    return this.namePublishedIn;
  }

  public Taxon setNamePublishedIn(String namePublishedIn) {
    this.namePublishedIn = namePublishedIn;
    return this;
  }

  public void unsetNamePublishedIn() {
    this.namePublishedIn = null;
  }

  /** Returns true if field namePublishedIn is set (has been assigned a value) and false otherwise */
  public boolean isSetNamePublishedIn() {
    return this.namePublishedIn != null;
  }

  public void setNamePublishedInIsSet(boolean value) {
    if (!value) {
      this.namePublishedIn = null;
    }
  }

  public String getNamePublishedInID() {
    return this.namePublishedInID;
  }

  public Taxon setNamePublishedInID(String namePublishedInID) {
    this.namePublishedInID = namePublishedInID;
    return this;
  }

  public void unsetNamePublishedInID() {
    this.namePublishedInID = null;
  }

  /** Returns true if field namePublishedInID is set (has been assigned a value) and false otherwise */
  public boolean isSetNamePublishedInID() {
    return this.namePublishedInID != null;
  }

  public void setNamePublishedInIDIsSet(boolean value) {
    if (!value) {
      this.namePublishedInID = null;
    }
  }

  public String getNamePublishedInYear() {
    return this.namePublishedInYear;
  }

  public Taxon setNamePublishedInYear(String namePublishedInYear) {
    this.namePublishedInYear = namePublishedInYear;
    return this;
  }

  public void unsetNamePublishedInYear() {
    this.namePublishedInYear = null;
  }

  /** Returns true if field namePublishedInYear is set (has been assigned a value) and false otherwise */
  public boolean isSetNamePublishedInYear() {
    return this.namePublishedInYear != null;
  }

  public void setNamePublishedInYearIsSet(boolean value) {
    if (!value) {
      this.namePublishedInYear = null;
    }
  }

  public String getNomenclaturalCode() {
    return this.nomenclaturalCode;
  }

  public Taxon setNomenclaturalCode(String nomenclaturalCode) {
    this.nomenclaturalCode = nomenclaturalCode;
    return this;
  }

  public void unsetNomenclaturalCode() {
    this.nomenclaturalCode = null;
  }

  /** Returns true if field nomenclaturalCode is set (has been assigned a value) and false otherwise */
  public boolean isSetNomenclaturalCode() {
    return this.nomenclaturalCode != null;
  }

  public void setNomenclaturalCodeIsSet(boolean value) {
    if (!value) {
      this.nomenclaturalCode = null;
    }
  }

  public String getNomenclaturalStatus() {
    return this.nomenclaturalStatus;
  }

  public Taxon setNomenclaturalStatus(String nomenclaturalStatus) {
    this.nomenclaturalStatus = nomenclaturalStatus;
    return this;
  }

  public void unsetNomenclaturalStatus() {
    this.nomenclaturalStatus = null;
  }

  /** Returns true if field nomenclaturalStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetNomenclaturalStatus() {
    return this.nomenclaturalStatus != null;
  }

  public void setNomenclaturalStatusIsSet(boolean value) {
    if (!value) {
      this.nomenclaturalStatus = null;
    }
  }

  public String getOrder() {
    return this.order;
  }

  public Taxon setOrder(String order) {
    this.order = order;
    return this;
  }

  public void unsetOrder() {
    this.order = null;
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return this.order != null;
  }

  public void setOrderIsSet(boolean value) {
    if (!value) {
      this.order = null;
    }
  }

  public String getOriginalNameUsage() {
    return this.originalNameUsage;
  }

  public Taxon setOriginalNameUsage(String originalNameUsage) {
    this.originalNameUsage = originalNameUsage;
    return this;
  }

  public void unsetOriginalNameUsage() {
    this.originalNameUsage = null;
  }

  /** Returns true if field originalNameUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalNameUsage() {
    return this.originalNameUsage != null;
  }

  public void setOriginalNameUsageIsSet(boolean value) {
    if (!value) {
      this.originalNameUsage = null;
    }
  }

  public String getOriginalNameUsageID() {
    return this.originalNameUsageID;
  }

  public Taxon setOriginalNameUsageID(String originalNameUsageID) {
    this.originalNameUsageID = originalNameUsageID;
    return this;
  }

  public void unsetOriginalNameUsageID() {
    this.originalNameUsageID = null;
  }

  /** Returns true if field originalNameUsageID is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalNameUsageID() {
    return this.originalNameUsageID != null;
  }

  public void setOriginalNameUsageIDIsSet(boolean value) {
    if (!value) {
      this.originalNameUsageID = null;
    }
  }

  public String getParentNameUsage() {
    return this.parentNameUsage;
  }

  public Taxon setParentNameUsage(String parentNameUsage) {
    this.parentNameUsage = parentNameUsage;
    return this;
  }

  public void unsetParentNameUsage() {
    this.parentNameUsage = null;
  }

  /** Returns true if field parentNameUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetParentNameUsage() {
    return this.parentNameUsage != null;
  }

  public void setParentNameUsageIsSet(boolean value) {
    if (!value) {
      this.parentNameUsage = null;
    }
  }

  public String getParentNameUsageID() {
    return this.parentNameUsageID;
  }

  public Taxon setParentNameUsageID(String parentNameUsageID) {
    this.parentNameUsageID = parentNameUsageID;
    return this;
  }

  public void unsetParentNameUsageID() {
    this.parentNameUsageID = null;
  }

  /** Returns true if field parentNameUsageID is set (has been assigned a value) and false otherwise */
  public boolean isSetParentNameUsageID() {
    return this.parentNameUsageID != null;
  }

  public void setParentNameUsageIDIsSet(boolean value) {
    if (!value) {
      this.parentNameUsageID = null;
    }
  }

  public String getPhylum() {
    return this.phylum;
  }

  public Taxon setPhylum(String phylum) {
    this.phylum = phylum;
    return this;
  }

  public void unsetPhylum() {
    this.phylum = null;
  }

  /** Returns true if field phylum is set (has been assigned a value) and false otherwise */
  public boolean isSetPhylum() {
    return this.phylum != null;
  }

  public void setPhylumIsSet(boolean value) {
    if (!value) {
      this.phylum = null;
    }
  }

  public String getScientificName() {
    return this.scientificName;
  }

  public Taxon setScientificName(String scientificName) {
    this.scientificName = scientificName;
    return this;
  }

  public void unsetScientificName() {
    this.scientificName = null;
  }

  /** Returns true if field scientificName is set (has been assigned a value) and false otherwise */
  public boolean isSetScientificName() {
    return this.scientificName != null;
  }

  public void setScientificNameIsSet(boolean value) {
    if (!value) {
      this.scientificName = null;
    }
  }

  public String getScientificNameAuthorship() {
    return this.scientificNameAuthorship;
  }

  public Taxon setScientificNameAuthorship(String scientificNameAuthorship) {
    this.scientificNameAuthorship = scientificNameAuthorship;
    return this;
  }

  public void unsetScientificNameAuthorship() {
    this.scientificNameAuthorship = null;
  }

  /** Returns true if field scientificNameAuthorship is set (has been assigned a value) and false otherwise */
  public boolean isSetScientificNameAuthorship() {
    return this.scientificNameAuthorship != null;
  }

  public void setScientificNameAuthorshipIsSet(boolean value) {
    if (!value) {
      this.scientificNameAuthorship = null;
    }
  }

  public String getScientificNameID() {
    return this.scientificNameID;
  }

  public Taxon setScientificNameID(String scientificNameID) {
    this.scientificNameID = scientificNameID;
    return this;
  }

  public void unsetScientificNameID() {
    this.scientificNameID = null;
  }

  /** Returns true if field scientificNameID is set (has been assigned a value) and false otherwise */
  public boolean isSetScientificNameID() {
    return this.scientificNameID != null;
  }

  public void setScientificNameIDIsSet(boolean value) {
    if (!value) {
      this.scientificNameID = null;
    }
  }

  public String getSpecificEpithet() {
    return this.specificEpithet;
  }

  public Taxon setSpecificEpithet(String specificEpithet) {
    this.specificEpithet = specificEpithet;
    return this;
  }

  public void unsetSpecificEpithet() {
    this.specificEpithet = null;
  }

  /** Returns true if field specificEpithet is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecificEpithet() {
    return this.specificEpithet != null;
  }

  public void setSpecificEpithetIsSet(boolean value) {
    if (!value) {
      this.specificEpithet = null;
    }
  }

  public String getSubgenus() {
    return this.subgenus;
  }

  public Taxon setSubgenus(String subgenus) {
    this.subgenus = subgenus;
    return this;
  }

  public void unsetSubgenus() {
    this.subgenus = null;
  }

  /** Returns true if field subgenus is set (has been assigned a value) and false otherwise */
  public boolean isSetSubgenus() {
    return this.subgenus != null;
  }

  public void setSubgenusIsSet(boolean value) {
    if (!value) {
      this.subgenus = null;
    }
  }

  public String getTaxonConceptID() {
    return this.taxonConceptID;
  }

  public Taxon setTaxonConceptID(String taxonConceptID) {
    this.taxonConceptID = taxonConceptID;
    return this;
  }

  public void unsetTaxonConceptID() {
    this.taxonConceptID = null;
  }

  /** Returns true if field taxonConceptID is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxonConceptID() {
    return this.taxonConceptID != null;
  }

  public void setTaxonConceptIDIsSet(boolean value) {
    if (!value) {
      this.taxonConceptID = null;
    }
  }

  public String getTaxonID() {
    return this.taxonID;
  }

  public Taxon setTaxonID(String taxonID) {
    this.taxonID = taxonID;
    return this;
  }

  public void unsetTaxonID() {
    this.taxonID = null;
  }

  /** Returns true if field taxonID is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxonID() {
    return this.taxonID != null;
  }

  public void setTaxonIDIsSet(boolean value) {
    if (!value) {
      this.taxonID = null;
    }
  }

  public String getTaxonRank() {
    return this.taxonRank;
  }

  public Taxon setTaxonRank(String taxonRank) {
    this.taxonRank = taxonRank;
    return this;
  }

  public void unsetTaxonRank() {
    this.taxonRank = null;
  }

  /** Returns true if field taxonRank is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxonRank() {
    return this.taxonRank != null;
  }

  public void setTaxonRankIsSet(boolean value) {
    if (!value) {
      this.taxonRank = null;
    }
  }

  public String getTaxonRemarks() {
    return this.taxonRemarks;
  }

  public Taxon setTaxonRemarks(String taxonRemarks) {
    this.taxonRemarks = taxonRemarks;
    return this;
  }

  public void unsetTaxonRemarks() {
    this.taxonRemarks = null;
  }

  /** Returns true if field taxonRemarks is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxonRemarks() {
    return this.taxonRemarks != null;
  }

  public void setTaxonRemarksIsSet(boolean value) {
    if (!value) {
      this.taxonRemarks = null;
    }
  }

  public String getTaxonomicStatus() {
    return this.taxonomicStatus;
  }

  public Taxon setTaxonomicStatus(String taxonomicStatus) {
    this.taxonomicStatus = taxonomicStatus;
    return this;
  }

  public void unsetTaxonomicStatus() {
    this.taxonomicStatus = null;
  }

  /** Returns true if field taxonomicStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxonomicStatus() {
    return this.taxonomicStatus != null;
  }

  public void setTaxonomicStatusIsSet(boolean value) {
    if (!value) {
      this.taxonomicStatus = null;
    }
  }

  public String getVerbatimTaxonRank() {
    return this.verbatimTaxonRank;
  }

  public Taxon setVerbatimTaxonRank(String verbatimTaxonRank) {
    this.verbatimTaxonRank = verbatimTaxonRank;
    return this;
  }

  public void unsetVerbatimTaxonRank() {
    this.verbatimTaxonRank = null;
  }

  /** Returns true if field verbatimTaxonRank is set (has been assigned a value) and false otherwise */
  public boolean isSetVerbatimTaxonRank() {
    return this.verbatimTaxonRank != null;
  }

  public void setVerbatimTaxonRankIsSet(boolean value) {
    if (!value) {
      this.verbatimTaxonRank = null;
    }
  }

  public String getVernacularName() {
    return this.vernacularName;
  }

  public Taxon setVernacularName(String vernacularName) {
    this.vernacularName = vernacularName;
    return this;
  }

  public void unsetVernacularName() {
    this.vernacularName = null;
  }

  /** Returns true if field vernacularName is set (has been assigned a value) and false otherwise */
  public boolean isSetVernacularName() {
    return this.vernacularName != null;
  }

  public void setVernacularNameIsSet(boolean value) {
    if (!value) {
      this.vernacularName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCEPTED_NAME_USAGE:
      if (value == null) {
        unsetAcceptedNameUsage();
      } else {
        setAcceptedNameUsage((String)value);
      }
      break;

    case ACCEPTED_NAME_USAGE_ID:
      if (value == null) {
        unsetAcceptedNameUsageID();
      } else {
        setAcceptedNameUsageID((String)value);
      }
      break;

    case CLAZZ:
      if (value == null) {
        unsetClazz();
      } else {
        setClazz((String)value);
      }
      break;

    case FAMILY:
      if (value == null) {
        unsetFamily();
      } else {
        setFamily((String)value);
      }
      break;

    case GENUS:
      if (value == null) {
        unsetGenus();
      } else {
        setGenus((String)value);
      }
      break;

    case HIGHER_CLASSIFICATION:
      if (value == null) {
        unsetHigherClassification();
      } else {
        setHigherClassification((String)value);
      }
      break;

    case INFRASPECIFIC_EPITHET:
      if (value == null) {
        unsetInfraspecificEpithet();
      } else {
        setInfraspecificEpithet((String)value);
      }
      break;

    case KINGDOM:
      if (value == null) {
        unsetKingdom();
      } else {
        setKingdom((String)value);
      }
      break;

    case NAME_ACCORDING_TO:
      if (value == null) {
        unsetNameAccordingTo();
      } else {
        setNameAccordingTo((String)value);
      }
      break;

    case NAME_ACCORDING_TO_ID:
      if (value == null) {
        unsetNameAccordingToID();
      } else {
        setNameAccordingToID((String)value);
      }
      break;

    case NAME_PUBLISHED_IN:
      if (value == null) {
        unsetNamePublishedIn();
      } else {
        setNamePublishedIn((String)value);
      }
      break;

    case NAME_PUBLISHED_IN_ID:
      if (value == null) {
        unsetNamePublishedInID();
      } else {
        setNamePublishedInID((String)value);
      }
      break;

    case NAME_PUBLISHED_IN_YEAR:
      if (value == null) {
        unsetNamePublishedInYear();
      } else {
        setNamePublishedInYear((String)value);
      }
      break;

    case NOMENCLATURAL_CODE:
      if (value == null) {
        unsetNomenclaturalCode();
      } else {
        setNomenclaturalCode((String)value);
      }
      break;

    case NOMENCLATURAL_STATUS:
      if (value == null) {
        unsetNomenclaturalStatus();
      } else {
        setNomenclaturalStatus((String)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((String)value);
      }
      break;

    case ORIGINAL_NAME_USAGE:
      if (value == null) {
        unsetOriginalNameUsage();
      } else {
        setOriginalNameUsage((String)value);
      }
      break;

    case ORIGINAL_NAME_USAGE_ID:
      if (value == null) {
        unsetOriginalNameUsageID();
      } else {
        setOriginalNameUsageID((String)value);
      }
      break;

    case PARENT_NAME_USAGE:
      if (value == null) {
        unsetParentNameUsage();
      } else {
        setParentNameUsage((String)value);
      }
      break;

    case PARENT_NAME_USAGE_ID:
      if (value == null) {
        unsetParentNameUsageID();
      } else {
        setParentNameUsageID((String)value);
      }
      break;

    case PHYLUM:
      if (value == null) {
        unsetPhylum();
      } else {
        setPhylum((String)value);
      }
      break;

    case SCIENTIFIC_NAME:
      if (value == null) {
        unsetScientificName();
      } else {
        setScientificName((String)value);
      }
      break;

    case SCIENTIFIC_NAME_AUTHORSHIP:
      if (value == null) {
        unsetScientificNameAuthorship();
      } else {
        setScientificNameAuthorship((String)value);
      }
      break;

    case SCIENTIFIC_NAME_ID:
      if (value == null) {
        unsetScientificNameID();
      } else {
        setScientificNameID((String)value);
      }
      break;

    case SPECIFIC_EPITHET:
      if (value == null) {
        unsetSpecificEpithet();
      } else {
        setSpecificEpithet((String)value);
      }
      break;

    case SUBGENUS:
      if (value == null) {
        unsetSubgenus();
      } else {
        setSubgenus((String)value);
      }
      break;

    case TAXON_CONCEPT_ID:
      if (value == null) {
        unsetTaxonConceptID();
      } else {
        setTaxonConceptID((String)value);
      }
      break;

    case TAXON_ID:
      if (value == null) {
        unsetTaxonID();
      } else {
        setTaxonID((String)value);
      }
      break;

    case TAXON_RANK:
      if (value == null) {
        unsetTaxonRank();
      } else {
        setTaxonRank((String)value);
      }
      break;

    case TAXON_REMARKS:
      if (value == null) {
        unsetTaxonRemarks();
      } else {
        setTaxonRemarks((String)value);
      }
      break;

    case TAXONOMIC_STATUS:
      if (value == null) {
        unsetTaxonomicStatus();
      } else {
        setTaxonomicStatus((String)value);
      }
      break;

    case VERBATIM_TAXON_RANK:
      if (value == null) {
        unsetVerbatimTaxonRank();
      } else {
        setVerbatimTaxonRank((String)value);
      }
      break;

    case VERNACULAR_NAME:
      if (value == null) {
        unsetVernacularName();
      } else {
        setVernacularName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCEPTED_NAME_USAGE:
      return getAcceptedNameUsage();

    case ACCEPTED_NAME_USAGE_ID:
      return getAcceptedNameUsageID();

    case CLAZZ:
      return getClazz();

    case FAMILY:
      return getFamily();

    case GENUS:
      return getGenus();

    case HIGHER_CLASSIFICATION:
      return getHigherClassification();

    case INFRASPECIFIC_EPITHET:
      return getInfraspecificEpithet();

    case KINGDOM:
      return getKingdom();

    case NAME_ACCORDING_TO:
      return getNameAccordingTo();

    case NAME_ACCORDING_TO_ID:
      return getNameAccordingToID();

    case NAME_PUBLISHED_IN:
      return getNamePublishedIn();

    case NAME_PUBLISHED_IN_ID:
      return getNamePublishedInID();

    case NAME_PUBLISHED_IN_YEAR:
      return getNamePublishedInYear();

    case NOMENCLATURAL_CODE:
      return getNomenclaturalCode();

    case NOMENCLATURAL_STATUS:
      return getNomenclaturalStatus();

    case ORDER:
      return getOrder();

    case ORIGINAL_NAME_USAGE:
      return getOriginalNameUsage();

    case ORIGINAL_NAME_USAGE_ID:
      return getOriginalNameUsageID();

    case PARENT_NAME_USAGE:
      return getParentNameUsage();

    case PARENT_NAME_USAGE_ID:
      return getParentNameUsageID();

    case PHYLUM:
      return getPhylum();

    case SCIENTIFIC_NAME:
      return getScientificName();

    case SCIENTIFIC_NAME_AUTHORSHIP:
      return getScientificNameAuthorship();

    case SCIENTIFIC_NAME_ID:
      return getScientificNameID();

    case SPECIFIC_EPITHET:
      return getSpecificEpithet();

    case SUBGENUS:
      return getSubgenus();

    case TAXON_CONCEPT_ID:
      return getTaxonConceptID();

    case TAXON_ID:
      return getTaxonID();

    case TAXON_RANK:
      return getTaxonRank();

    case TAXON_REMARKS:
      return getTaxonRemarks();

    case TAXONOMIC_STATUS:
      return getTaxonomicStatus();

    case VERBATIM_TAXON_RANK:
      return getVerbatimTaxonRank();

    case VERNACULAR_NAME:
      return getVernacularName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCEPTED_NAME_USAGE:
      return isSetAcceptedNameUsage();
    case ACCEPTED_NAME_USAGE_ID:
      return isSetAcceptedNameUsageID();
    case CLAZZ:
      return isSetClazz();
    case FAMILY:
      return isSetFamily();
    case GENUS:
      return isSetGenus();
    case HIGHER_CLASSIFICATION:
      return isSetHigherClassification();
    case INFRASPECIFIC_EPITHET:
      return isSetInfraspecificEpithet();
    case KINGDOM:
      return isSetKingdom();
    case NAME_ACCORDING_TO:
      return isSetNameAccordingTo();
    case NAME_ACCORDING_TO_ID:
      return isSetNameAccordingToID();
    case NAME_PUBLISHED_IN:
      return isSetNamePublishedIn();
    case NAME_PUBLISHED_IN_ID:
      return isSetNamePublishedInID();
    case NAME_PUBLISHED_IN_YEAR:
      return isSetNamePublishedInYear();
    case NOMENCLATURAL_CODE:
      return isSetNomenclaturalCode();
    case NOMENCLATURAL_STATUS:
      return isSetNomenclaturalStatus();
    case ORDER:
      return isSetOrder();
    case ORIGINAL_NAME_USAGE:
      return isSetOriginalNameUsage();
    case ORIGINAL_NAME_USAGE_ID:
      return isSetOriginalNameUsageID();
    case PARENT_NAME_USAGE:
      return isSetParentNameUsage();
    case PARENT_NAME_USAGE_ID:
      return isSetParentNameUsageID();
    case PHYLUM:
      return isSetPhylum();
    case SCIENTIFIC_NAME:
      return isSetScientificName();
    case SCIENTIFIC_NAME_AUTHORSHIP:
      return isSetScientificNameAuthorship();
    case SCIENTIFIC_NAME_ID:
      return isSetScientificNameID();
    case SPECIFIC_EPITHET:
      return isSetSpecificEpithet();
    case SUBGENUS:
      return isSetSubgenus();
    case TAXON_CONCEPT_ID:
      return isSetTaxonConceptID();
    case TAXON_ID:
      return isSetTaxonID();
    case TAXON_RANK:
      return isSetTaxonRank();
    case TAXON_REMARKS:
      return isSetTaxonRemarks();
    case TAXONOMIC_STATUS:
      return isSetTaxonomicStatus();
    case VERBATIM_TAXON_RANK:
      return isSetVerbatimTaxonRank();
    case VERNACULAR_NAME:
      return isSetVernacularName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Taxon)
      return this.equals((Taxon)that);
    return false;
  }

  public boolean equals(Taxon that) {
    if (that == null)
      return false;

    boolean this_present_acceptedNameUsage = true && this.isSetAcceptedNameUsage();
    boolean that_present_acceptedNameUsage = true && that.isSetAcceptedNameUsage();
    if (this_present_acceptedNameUsage || that_present_acceptedNameUsage) {
      if (!(this_present_acceptedNameUsage && that_present_acceptedNameUsage))
        return false;
      if (!this.acceptedNameUsage.equals(that.acceptedNameUsage))
        return false;
    }

    boolean this_present_acceptedNameUsageID = true && this.isSetAcceptedNameUsageID();
    boolean that_present_acceptedNameUsageID = true && that.isSetAcceptedNameUsageID();
    if (this_present_acceptedNameUsageID || that_present_acceptedNameUsageID) {
      if (!(this_present_acceptedNameUsageID && that_present_acceptedNameUsageID))
        return false;
      if (!this.acceptedNameUsageID.equals(that.acceptedNameUsageID))
        return false;
    }

    boolean this_present_clazz = true && this.isSetClazz();
    boolean that_present_clazz = true && that.isSetClazz();
    if (this_present_clazz || that_present_clazz) {
      if (!(this_present_clazz && that_present_clazz))
        return false;
      if (!this.clazz.equals(that.clazz))
        return false;
    }

    boolean this_present_family = true && this.isSetFamily();
    boolean that_present_family = true && that.isSetFamily();
    if (this_present_family || that_present_family) {
      if (!(this_present_family && that_present_family))
        return false;
      if (!this.family.equals(that.family))
        return false;
    }

    boolean this_present_genus = true && this.isSetGenus();
    boolean that_present_genus = true && that.isSetGenus();
    if (this_present_genus || that_present_genus) {
      if (!(this_present_genus && that_present_genus))
        return false;
      if (!this.genus.equals(that.genus))
        return false;
    }

    boolean this_present_higherClassification = true && this.isSetHigherClassification();
    boolean that_present_higherClassification = true && that.isSetHigherClassification();
    if (this_present_higherClassification || that_present_higherClassification) {
      if (!(this_present_higherClassification && that_present_higherClassification))
        return false;
      if (!this.higherClassification.equals(that.higherClassification))
        return false;
    }

    boolean this_present_infraspecificEpithet = true && this.isSetInfraspecificEpithet();
    boolean that_present_infraspecificEpithet = true && that.isSetInfraspecificEpithet();
    if (this_present_infraspecificEpithet || that_present_infraspecificEpithet) {
      if (!(this_present_infraspecificEpithet && that_present_infraspecificEpithet))
        return false;
      if (!this.infraspecificEpithet.equals(that.infraspecificEpithet))
        return false;
    }

    boolean this_present_kingdom = true && this.isSetKingdom();
    boolean that_present_kingdom = true && that.isSetKingdom();
    if (this_present_kingdom || that_present_kingdom) {
      if (!(this_present_kingdom && that_present_kingdom))
        return false;
      if (!this.kingdom.equals(that.kingdom))
        return false;
    }

    boolean this_present_nameAccordingTo = true && this.isSetNameAccordingTo();
    boolean that_present_nameAccordingTo = true && that.isSetNameAccordingTo();
    if (this_present_nameAccordingTo || that_present_nameAccordingTo) {
      if (!(this_present_nameAccordingTo && that_present_nameAccordingTo))
        return false;
      if (!this.nameAccordingTo.equals(that.nameAccordingTo))
        return false;
    }

    boolean this_present_nameAccordingToID = true && this.isSetNameAccordingToID();
    boolean that_present_nameAccordingToID = true && that.isSetNameAccordingToID();
    if (this_present_nameAccordingToID || that_present_nameAccordingToID) {
      if (!(this_present_nameAccordingToID && that_present_nameAccordingToID))
        return false;
      if (!this.nameAccordingToID.equals(that.nameAccordingToID))
        return false;
    }

    boolean this_present_namePublishedIn = true && this.isSetNamePublishedIn();
    boolean that_present_namePublishedIn = true && that.isSetNamePublishedIn();
    if (this_present_namePublishedIn || that_present_namePublishedIn) {
      if (!(this_present_namePublishedIn && that_present_namePublishedIn))
        return false;
      if (!this.namePublishedIn.equals(that.namePublishedIn))
        return false;
    }

    boolean this_present_namePublishedInID = true && this.isSetNamePublishedInID();
    boolean that_present_namePublishedInID = true && that.isSetNamePublishedInID();
    if (this_present_namePublishedInID || that_present_namePublishedInID) {
      if (!(this_present_namePublishedInID && that_present_namePublishedInID))
        return false;
      if (!this.namePublishedInID.equals(that.namePublishedInID))
        return false;
    }

    boolean this_present_namePublishedInYear = true && this.isSetNamePublishedInYear();
    boolean that_present_namePublishedInYear = true && that.isSetNamePublishedInYear();
    if (this_present_namePublishedInYear || that_present_namePublishedInYear) {
      if (!(this_present_namePublishedInYear && that_present_namePublishedInYear))
        return false;
      if (!this.namePublishedInYear.equals(that.namePublishedInYear))
        return false;
    }

    boolean this_present_nomenclaturalCode = true && this.isSetNomenclaturalCode();
    boolean that_present_nomenclaturalCode = true && that.isSetNomenclaturalCode();
    if (this_present_nomenclaturalCode || that_present_nomenclaturalCode) {
      if (!(this_present_nomenclaturalCode && that_present_nomenclaturalCode))
        return false;
      if (!this.nomenclaturalCode.equals(that.nomenclaturalCode))
        return false;
    }

    boolean this_present_nomenclaturalStatus = true && this.isSetNomenclaturalStatus();
    boolean that_present_nomenclaturalStatus = true && that.isSetNomenclaturalStatus();
    if (this_present_nomenclaturalStatus || that_present_nomenclaturalStatus) {
      if (!(this_present_nomenclaturalStatus && that_present_nomenclaturalStatus))
        return false;
      if (!this.nomenclaturalStatus.equals(that.nomenclaturalStatus))
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (!this.order.equals(that.order))
        return false;
    }

    boolean this_present_originalNameUsage = true && this.isSetOriginalNameUsage();
    boolean that_present_originalNameUsage = true && that.isSetOriginalNameUsage();
    if (this_present_originalNameUsage || that_present_originalNameUsage) {
      if (!(this_present_originalNameUsage && that_present_originalNameUsage))
        return false;
      if (!this.originalNameUsage.equals(that.originalNameUsage))
        return false;
    }

    boolean this_present_originalNameUsageID = true && this.isSetOriginalNameUsageID();
    boolean that_present_originalNameUsageID = true && that.isSetOriginalNameUsageID();
    if (this_present_originalNameUsageID || that_present_originalNameUsageID) {
      if (!(this_present_originalNameUsageID && that_present_originalNameUsageID))
        return false;
      if (!this.originalNameUsageID.equals(that.originalNameUsageID))
        return false;
    }

    boolean this_present_parentNameUsage = true && this.isSetParentNameUsage();
    boolean that_present_parentNameUsage = true && that.isSetParentNameUsage();
    if (this_present_parentNameUsage || that_present_parentNameUsage) {
      if (!(this_present_parentNameUsage && that_present_parentNameUsage))
        return false;
      if (!this.parentNameUsage.equals(that.parentNameUsage))
        return false;
    }

    boolean this_present_parentNameUsageID = true && this.isSetParentNameUsageID();
    boolean that_present_parentNameUsageID = true && that.isSetParentNameUsageID();
    if (this_present_parentNameUsageID || that_present_parentNameUsageID) {
      if (!(this_present_parentNameUsageID && that_present_parentNameUsageID))
        return false;
      if (!this.parentNameUsageID.equals(that.parentNameUsageID))
        return false;
    }

    boolean this_present_phylum = true && this.isSetPhylum();
    boolean that_present_phylum = true && that.isSetPhylum();
    if (this_present_phylum || that_present_phylum) {
      if (!(this_present_phylum && that_present_phylum))
        return false;
      if (!this.phylum.equals(that.phylum))
        return false;
    }

    boolean this_present_scientificName = true && this.isSetScientificName();
    boolean that_present_scientificName = true && that.isSetScientificName();
    if (this_present_scientificName || that_present_scientificName) {
      if (!(this_present_scientificName && that_present_scientificName))
        return false;
      if (!this.scientificName.equals(that.scientificName))
        return false;
    }

    boolean this_present_scientificNameAuthorship = true && this.isSetScientificNameAuthorship();
    boolean that_present_scientificNameAuthorship = true && that.isSetScientificNameAuthorship();
    if (this_present_scientificNameAuthorship || that_present_scientificNameAuthorship) {
      if (!(this_present_scientificNameAuthorship && that_present_scientificNameAuthorship))
        return false;
      if (!this.scientificNameAuthorship.equals(that.scientificNameAuthorship))
        return false;
    }

    boolean this_present_scientificNameID = true && this.isSetScientificNameID();
    boolean that_present_scientificNameID = true && that.isSetScientificNameID();
    if (this_present_scientificNameID || that_present_scientificNameID) {
      if (!(this_present_scientificNameID && that_present_scientificNameID))
        return false;
      if (!this.scientificNameID.equals(that.scientificNameID))
        return false;
    }

    boolean this_present_specificEpithet = true && this.isSetSpecificEpithet();
    boolean that_present_specificEpithet = true && that.isSetSpecificEpithet();
    if (this_present_specificEpithet || that_present_specificEpithet) {
      if (!(this_present_specificEpithet && that_present_specificEpithet))
        return false;
      if (!this.specificEpithet.equals(that.specificEpithet))
        return false;
    }

    boolean this_present_subgenus = true && this.isSetSubgenus();
    boolean that_present_subgenus = true && that.isSetSubgenus();
    if (this_present_subgenus || that_present_subgenus) {
      if (!(this_present_subgenus && that_present_subgenus))
        return false;
      if (!this.subgenus.equals(that.subgenus))
        return false;
    }

    boolean this_present_taxonConceptID = true && this.isSetTaxonConceptID();
    boolean that_present_taxonConceptID = true && that.isSetTaxonConceptID();
    if (this_present_taxonConceptID || that_present_taxonConceptID) {
      if (!(this_present_taxonConceptID && that_present_taxonConceptID))
        return false;
      if (!this.taxonConceptID.equals(that.taxonConceptID))
        return false;
    }

    boolean this_present_taxonID = true && this.isSetTaxonID();
    boolean that_present_taxonID = true && that.isSetTaxonID();
    if (this_present_taxonID || that_present_taxonID) {
      if (!(this_present_taxonID && that_present_taxonID))
        return false;
      if (!this.taxonID.equals(that.taxonID))
        return false;
    }

    boolean this_present_taxonRank = true && this.isSetTaxonRank();
    boolean that_present_taxonRank = true && that.isSetTaxonRank();
    if (this_present_taxonRank || that_present_taxonRank) {
      if (!(this_present_taxonRank && that_present_taxonRank))
        return false;
      if (!this.taxonRank.equals(that.taxonRank))
        return false;
    }

    boolean this_present_taxonRemarks = true && this.isSetTaxonRemarks();
    boolean that_present_taxonRemarks = true && that.isSetTaxonRemarks();
    if (this_present_taxonRemarks || that_present_taxonRemarks) {
      if (!(this_present_taxonRemarks && that_present_taxonRemarks))
        return false;
      if (!this.taxonRemarks.equals(that.taxonRemarks))
        return false;
    }

    boolean this_present_taxonomicStatus = true && this.isSetTaxonomicStatus();
    boolean that_present_taxonomicStatus = true && that.isSetTaxonomicStatus();
    if (this_present_taxonomicStatus || that_present_taxonomicStatus) {
      if (!(this_present_taxonomicStatus && that_present_taxonomicStatus))
        return false;
      if (!this.taxonomicStatus.equals(that.taxonomicStatus))
        return false;
    }

    boolean this_present_verbatimTaxonRank = true && this.isSetVerbatimTaxonRank();
    boolean that_present_verbatimTaxonRank = true && that.isSetVerbatimTaxonRank();
    if (this_present_verbatimTaxonRank || that_present_verbatimTaxonRank) {
      if (!(this_present_verbatimTaxonRank && that_present_verbatimTaxonRank))
        return false;
      if (!this.verbatimTaxonRank.equals(that.verbatimTaxonRank))
        return false;
    }

    boolean this_present_vernacularName = true && this.isSetVernacularName();
    boolean that_present_vernacularName = true && that.isSetVernacularName();
    if (this_present_vernacularName || that_present_vernacularName) {
      if (!(this_present_vernacularName && that_present_vernacularName))
        return false;
      if (!this.vernacularName.equals(that.vernacularName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_acceptedNameUsage = true && (isSetAcceptedNameUsage());
    builder.append(present_acceptedNameUsage);
    if (present_acceptedNameUsage)
      builder.append(acceptedNameUsage);

    boolean present_acceptedNameUsageID = true && (isSetAcceptedNameUsageID());
    builder.append(present_acceptedNameUsageID);
    if (present_acceptedNameUsageID)
      builder.append(acceptedNameUsageID);

    boolean present_clazz = true && (isSetClazz());
    builder.append(present_clazz);
    if (present_clazz)
      builder.append(clazz);

    boolean present_family = true && (isSetFamily());
    builder.append(present_family);
    if (present_family)
      builder.append(family);

    boolean present_genus = true && (isSetGenus());
    builder.append(present_genus);
    if (present_genus)
      builder.append(genus);

    boolean present_higherClassification = true && (isSetHigherClassification());
    builder.append(present_higherClassification);
    if (present_higherClassification)
      builder.append(higherClassification);

    boolean present_infraspecificEpithet = true && (isSetInfraspecificEpithet());
    builder.append(present_infraspecificEpithet);
    if (present_infraspecificEpithet)
      builder.append(infraspecificEpithet);

    boolean present_kingdom = true && (isSetKingdom());
    builder.append(present_kingdom);
    if (present_kingdom)
      builder.append(kingdom);

    boolean present_nameAccordingTo = true && (isSetNameAccordingTo());
    builder.append(present_nameAccordingTo);
    if (present_nameAccordingTo)
      builder.append(nameAccordingTo);

    boolean present_nameAccordingToID = true && (isSetNameAccordingToID());
    builder.append(present_nameAccordingToID);
    if (present_nameAccordingToID)
      builder.append(nameAccordingToID);

    boolean present_namePublishedIn = true && (isSetNamePublishedIn());
    builder.append(present_namePublishedIn);
    if (present_namePublishedIn)
      builder.append(namePublishedIn);

    boolean present_namePublishedInID = true && (isSetNamePublishedInID());
    builder.append(present_namePublishedInID);
    if (present_namePublishedInID)
      builder.append(namePublishedInID);

    boolean present_namePublishedInYear = true && (isSetNamePublishedInYear());
    builder.append(present_namePublishedInYear);
    if (present_namePublishedInYear)
      builder.append(namePublishedInYear);

    boolean present_nomenclaturalCode = true && (isSetNomenclaturalCode());
    builder.append(present_nomenclaturalCode);
    if (present_nomenclaturalCode)
      builder.append(nomenclaturalCode);

    boolean present_nomenclaturalStatus = true && (isSetNomenclaturalStatus());
    builder.append(present_nomenclaturalStatus);
    if (present_nomenclaturalStatus)
      builder.append(nomenclaturalStatus);

    boolean present_order = true && (isSetOrder());
    builder.append(present_order);
    if (present_order)
      builder.append(order);

    boolean present_originalNameUsage = true && (isSetOriginalNameUsage());
    builder.append(present_originalNameUsage);
    if (present_originalNameUsage)
      builder.append(originalNameUsage);

    boolean present_originalNameUsageID = true && (isSetOriginalNameUsageID());
    builder.append(present_originalNameUsageID);
    if (present_originalNameUsageID)
      builder.append(originalNameUsageID);

    boolean present_parentNameUsage = true && (isSetParentNameUsage());
    builder.append(present_parentNameUsage);
    if (present_parentNameUsage)
      builder.append(parentNameUsage);

    boolean present_parentNameUsageID = true && (isSetParentNameUsageID());
    builder.append(present_parentNameUsageID);
    if (present_parentNameUsageID)
      builder.append(parentNameUsageID);

    boolean present_phylum = true && (isSetPhylum());
    builder.append(present_phylum);
    if (present_phylum)
      builder.append(phylum);

    boolean present_scientificName = true && (isSetScientificName());
    builder.append(present_scientificName);
    if (present_scientificName)
      builder.append(scientificName);

    boolean present_scientificNameAuthorship = true && (isSetScientificNameAuthorship());
    builder.append(present_scientificNameAuthorship);
    if (present_scientificNameAuthorship)
      builder.append(scientificNameAuthorship);

    boolean present_scientificNameID = true && (isSetScientificNameID());
    builder.append(present_scientificNameID);
    if (present_scientificNameID)
      builder.append(scientificNameID);

    boolean present_specificEpithet = true && (isSetSpecificEpithet());
    builder.append(present_specificEpithet);
    if (present_specificEpithet)
      builder.append(specificEpithet);

    boolean present_subgenus = true && (isSetSubgenus());
    builder.append(present_subgenus);
    if (present_subgenus)
      builder.append(subgenus);

    boolean present_taxonConceptID = true && (isSetTaxonConceptID());
    builder.append(present_taxonConceptID);
    if (present_taxonConceptID)
      builder.append(taxonConceptID);

    boolean present_taxonID = true && (isSetTaxonID());
    builder.append(present_taxonID);
    if (present_taxonID)
      builder.append(taxonID);

    boolean present_taxonRank = true && (isSetTaxonRank());
    builder.append(present_taxonRank);
    if (present_taxonRank)
      builder.append(taxonRank);

    boolean present_taxonRemarks = true && (isSetTaxonRemarks());
    builder.append(present_taxonRemarks);
    if (present_taxonRemarks)
      builder.append(taxonRemarks);

    boolean present_taxonomicStatus = true && (isSetTaxonomicStatus());
    builder.append(present_taxonomicStatus);
    if (present_taxonomicStatus)
      builder.append(taxonomicStatus);

    boolean present_verbatimTaxonRank = true && (isSetVerbatimTaxonRank());
    builder.append(present_verbatimTaxonRank);
    if (present_verbatimTaxonRank)
      builder.append(verbatimTaxonRank);

    boolean present_vernacularName = true && (isSetVernacularName());
    builder.append(present_vernacularName);
    if (present_vernacularName)
      builder.append(vernacularName);

    return builder.toHashCode();
  }

  public int compareTo(Taxon other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Taxon typedOther = (Taxon)other;

    lastComparison = Boolean.valueOf(isSetAcceptedNameUsage()).compareTo(typedOther.isSetAcceptedNameUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcceptedNameUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceptedNameUsage, typedOther.acceptedNameUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcceptedNameUsageID()).compareTo(typedOther.isSetAcceptedNameUsageID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcceptedNameUsageID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceptedNameUsageID, typedOther.acceptedNameUsageID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClazz()).compareTo(typedOther.isSetClazz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClazz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clazz, typedOther.clazz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamily()).compareTo(typedOther.isSetFamily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamily()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, typedOther.family);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenus()).compareTo(typedOther.isSetGenus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genus, typedOther.genus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHigherClassification()).compareTo(typedOther.isSetHigherClassification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHigherClassification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.higherClassification, typedOther.higherClassification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInfraspecificEpithet()).compareTo(typedOther.isSetInfraspecificEpithet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfraspecificEpithet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infraspecificEpithet, typedOther.infraspecificEpithet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKingdom()).compareTo(typedOther.isSetKingdom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKingdom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kingdom, typedOther.kingdom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameAccordingTo()).compareTo(typedOther.isSetNameAccordingTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameAccordingTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameAccordingTo, typedOther.nameAccordingTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameAccordingToID()).compareTo(typedOther.isSetNameAccordingToID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameAccordingToID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameAccordingToID, typedOther.nameAccordingToID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamePublishedIn()).compareTo(typedOther.isSetNamePublishedIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamePublishedIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namePublishedIn, typedOther.namePublishedIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamePublishedInID()).compareTo(typedOther.isSetNamePublishedInID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamePublishedInID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namePublishedInID, typedOther.namePublishedInID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamePublishedInYear()).compareTo(typedOther.isSetNamePublishedInYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamePublishedInYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namePublishedInYear, typedOther.namePublishedInYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNomenclaturalCode()).compareTo(typedOther.isSetNomenclaturalCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNomenclaturalCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomenclaturalCode, typedOther.nomenclaturalCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNomenclaturalStatus()).compareTo(typedOther.isSetNomenclaturalStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNomenclaturalStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomenclaturalStatus, typedOther.nomenclaturalStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(typedOther.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, typedOther.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalNameUsage()).compareTo(typedOther.isSetOriginalNameUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalNameUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalNameUsage, typedOther.originalNameUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalNameUsageID()).compareTo(typedOther.isSetOriginalNameUsageID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalNameUsageID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalNameUsageID, typedOther.originalNameUsageID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentNameUsage()).compareTo(typedOther.isSetParentNameUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentNameUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentNameUsage, typedOther.parentNameUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentNameUsageID()).compareTo(typedOther.isSetParentNameUsageID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentNameUsageID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentNameUsageID, typedOther.parentNameUsageID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhylum()).compareTo(typedOther.isSetPhylum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhylum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phylum, typedOther.phylum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScientificName()).compareTo(typedOther.isSetScientificName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScientificName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scientificName, typedOther.scientificName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScientificNameAuthorship()).compareTo(typedOther.isSetScientificNameAuthorship());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScientificNameAuthorship()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scientificNameAuthorship, typedOther.scientificNameAuthorship);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScientificNameID()).compareTo(typedOther.isSetScientificNameID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScientificNameID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scientificNameID, typedOther.scientificNameID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecificEpithet()).compareTo(typedOther.isSetSpecificEpithet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecificEpithet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specificEpithet, typedOther.specificEpithet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubgenus()).compareTo(typedOther.isSetSubgenus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubgenus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subgenus, typedOther.subgenus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxonConceptID()).compareTo(typedOther.isSetTaxonConceptID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxonConceptID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxonConceptID, typedOther.taxonConceptID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxonID()).compareTo(typedOther.isSetTaxonID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxonID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxonID, typedOther.taxonID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxonRank()).compareTo(typedOther.isSetTaxonRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxonRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxonRank, typedOther.taxonRank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxonRemarks()).compareTo(typedOther.isSetTaxonRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxonRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxonRemarks, typedOther.taxonRemarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxonomicStatus()).compareTo(typedOther.isSetTaxonomicStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxonomicStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxonomicStatus, typedOther.taxonomicStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerbatimTaxonRank()).compareTo(typedOther.isSetVerbatimTaxonRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerbatimTaxonRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbatimTaxonRank, typedOther.verbatimTaxonRank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVernacularName()).compareTo(typedOther.isSetVernacularName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVernacularName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vernacularName, typedOther.vernacularName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Taxon(");
    boolean first = true;

    sb.append("acceptedNameUsage:");
    if (this.acceptedNameUsage == null) {
      sb.append("null");
    } else {
      sb.append(this.acceptedNameUsage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acceptedNameUsageID:");
    if (this.acceptedNameUsageID == null) {
      sb.append("null");
    } else {
      sb.append(this.acceptedNameUsageID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clazz:");
    if (this.clazz == null) {
      sb.append("null");
    } else {
      sb.append(this.clazz);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("family:");
    if (this.family == null) {
      sb.append("null");
    } else {
      sb.append(this.family);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("genus:");
    if (this.genus == null) {
      sb.append("null");
    } else {
      sb.append(this.genus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("higherClassification:");
    if (this.higherClassification == null) {
      sb.append("null");
    } else {
      sb.append(this.higherClassification);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("infraspecificEpithet:");
    if (this.infraspecificEpithet == null) {
      sb.append("null");
    } else {
      sb.append(this.infraspecificEpithet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kingdom:");
    if (this.kingdom == null) {
      sb.append("null");
    } else {
      sb.append(this.kingdom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameAccordingTo:");
    if (this.nameAccordingTo == null) {
      sb.append("null");
    } else {
      sb.append(this.nameAccordingTo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameAccordingToID:");
    if (this.nameAccordingToID == null) {
      sb.append("null");
    } else {
      sb.append(this.nameAccordingToID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("namePublishedIn:");
    if (this.namePublishedIn == null) {
      sb.append("null");
    } else {
      sb.append(this.namePublishedIn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("namePublishedInID:");
    if (this.namePublishedInID == null) {
      sb.append("null");
    } else {
      sb.append(this.namePublishedInID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("namePublishedInYear:");
    if (this.namePublishedInYear == null) {
      sb.append("null");
    } else {
      sb.append(this.namePublishedInYear);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nomenclaturalCode:");
    if (this.nomenclaturalCode == null) {
      sb.append("null");
    } else {
      sb.append(this.nomenclaturalCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nomenclaturalStatus:");
    if (this.nomenclaturalStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.nomenclaturalStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("order:");
    if (this.order == null) {
      sb.append("null");
    } else {
      sb.append(this.order);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalNameUsage:");
    if (this.originalNameUsage == null) {
      sb.append("null");
    } else {
      sb.append(this.originalNameUsage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalNameUsageID:");
    if (this.originalNameUsageID == null) {
      sb.append("null");
    } else {
      sb.append(this.originalNameUsageID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentNameUsage:");
    if (this.parentNameUsage == null) {
      sb.append("null");
    } else {
      sb.append(this.parentNameUsage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentNameUsageID:");
    if (this.parentNameUsageID == null) {
      sb.append("null");
    } else {
      sb.append(this.parentNameUsageID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phylum:");
    if (this.phylum == null) {
      sb.append("null");
    } else {
      sb.append(this.phylum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scientificName:");
    if (this.scientificName == null) {
      sb.append("null");
    } else {
      sb.append(this.scientificName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scientificNameAuthorship:");
    if (this.scientificNameAuthorship == null) {
      sb.append("null");
    } else {
      sb.append(this.scientificNameAuthorship);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scientificNameID:");
    if (this.scientificNameID == null) {
      sb.append("null");
    } else {
      sb.append(this.scientificNameID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("specificEpithet:");
    if (this.specificEpithet == null) {
      sb.append("null");
    } else {
      sb.append(this.specificEpithet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subgenus:");
    if (this.subgenus == null) {
      sb.append("null");
    } else {
      sb.append(this.subgenus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taxonConceptID:");
    if (this.taxonConceptID == null) {
      sb.append("null");
    } else {
      sb.append(this.taxonConceptID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taxonID:");
    if (this.taxonID == null) {
      sb.append("null");
    } else {
      sb.append(this.taxonID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taxonRank:");
    if (this.taxonRank == null) {
      sb.append("null");
    } else {
      sb.append(this.taxonRank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taxonRemarks:");
    if (this.taxonRemarks == null) {
      sb.append("null");
    } else {
      sb.append(this.taxonRemarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taxonomicStatus:");
    if (this.taxonomicStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.taxonomicStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verbatimTaxonRank:");
    if (this.verbatimTaxonRank == null) {
      sb.append("null");
    } else {
      sb.append(this.verbatimTaxonRank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vernacularName:");
    if (this.vernacularName == null) {
      sb.append("null");
    } else {
      sb.append(this.vernacularName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaxonStandardSchemeFactory implements SchemeFactory {
    public TaxonStandardScheme getScheme() {
      return new TaxonStandardScheme();
    }
  }

  private static class TaxonStandardScheme extends StandardScheme<Taxon> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Taxon struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCEPTED_NAME_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acceptedNameUsage = iprot.readString();
              struct.setAcceptedNameUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCEPTED_NAME_USAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acceptedNameUsageID = iprot.readString();
              struct.setAcceptedNameUsageIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLAZZ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clazz = iprot.readString();
              struct.setClazzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FAMILY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.family = iprot.readString();
              struct.setFamilyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GENUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.genus = iprot.readString();
              struct.setGenusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HIGHER_CLASSIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.higherClassification = iprot.readString();
              struct.setHigherClassificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INFRASPECIFIC_EPITHET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.infraspecificEpithet = iprot.readString();
              struct.setInfraspecificEpithetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // KINGDOM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kingdom = iprot.readString();
              struct.setKingdomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NAME_ACCORDING_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameAccordingTo = iprot.readString();
              struct.setNameAccordingToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NAME_ACCORDING_TO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameAccordingToID = iprot.readString();
              struct.setNameAccordingToIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NAME_PUBLISHED_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.namePublishedIn = iprot.readString();
              struct.setNamePublishedInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NAME_PUBLISHED_IN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.namePublishedInID = iprot.readString();
              struct.setNamePublishedInIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NAME_PUBLISHED_IN_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.namePublishedInYear = iprot.readString();
              struct.setNamePublishedInYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NOMENCLATURAL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nomenclaturalCode = iprot.readString();
              struct.setNomenclaturalCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NOMENCLATURAL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nomenclaturalStatus = iprot.readString();
              struct.setNomenclaturalStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.order = iprot.readString();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ORIGINAL_NAME_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalNameUsage = iprot.readString();
              struct.setOriginalNameUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ORIGINAL_NAME_USAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalNameUsageID = iprot.readString();
              struct.setOriginalNameUsageIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PARENT_NAME_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentNameUsage = iprot.readString();
              struct.setParentNameUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PARENT_NAME_USAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentNameUsageID = iprot.readString();
              struct.setParentNameUsageIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PHYLUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phylum = iprot.readString();
              struct.setPhylumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SCIENTIFIC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scientificName = iprot.readString();
              struct.setScientificNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SCIENTIFIC_NAME_AUTHORSHIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scientificNameAuthorship = iprot.readString();
              struct.setScientificNameAuthorshipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SCIENTIFIC_NAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scientificNameID = iprot.readString();
              struct.setScientificNameIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SPECIFIC_EPITHET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.specificEpithet = iprot.readString();
              struct.setSpecificEpithetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SUBGENUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subgenus = iprot.readString();
              struct.setSubgenusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // TAXON_CONCEPT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taxonConceptID = iprot.readString();
              struct.setTaxonConceptIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // TAXON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taxonID = iprot.readString();
              struct.setTaxonIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // TAXON_RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taxonRank = iprot.readString();
              struct.setTaxonRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TAXON_REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taxonRemarks = iprot.readString();
              struct.setTaxonRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // TAXONOMIC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taxonomicStatus = iprot.readString();
              struct.setTaxonomicStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // VERBATIM_TAXON_RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verbatimTaxonRank = iprot.readString();
              struct.setVerbatimTaxonRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // VERNACULAR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vernacularName = iprot.readString();
              struct.setVernacularNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Taxon struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.acceptedNameUsage != null) {
        oprot.writeFieldBegin(ACCEPTED_NAME_USAGE_FIELD_DESC);
        oprot.writeString(struct.acceptedNameUsage);
        oprot.writeFieldEnd();
      }
      if (struct.acceptedNameUsageID != null) {
        oprot.writeFieldBegin(ACCEPTED_NAME_USAGE_ID_FIELD_DESC);
        oprot.writeString(struct.acceptedNameUsageID);
        oprot.writeFieldEnd();
      }
      if (struct.clazz != null) {
        oprot.writeFieldBegin(CLAZZ_FIELD_DESC);
        oprot.writeString(struct.clazz);
        oprot.writeFieldEnd();
      }
      if (struct.family != null) {
        oprot.writeFieldBegin(FAMILY_FIELD_DESC);
        oprot.writeString(struct.family);
        oprot.writeFieldEnd();
      }
      if (struct.genus != null) {
        oprot.writeFieldBegin(GENUS_FIELD_DESC);
        oprot.writeString(struct.genus);
        oprot.writeFieldEnd();
      }
      if (struct.higherClassification != null) {
        oprot.writeFieldBegin(HIGHER_CLASSIFICATION_FIELD_DESC);
        oprot.writeString(struct.higherClassification);
        oprot.writeFieldEnd();
      }
      if (struct.infraspecificEpithet != null) {
        oprot.writeFieldBegin(INFRASPECIFIC_EPITHET_FIELD_DESC);
        oprot.writeString(struct.infraspecificEpithet);
        oprot.writeFieldEnd();
      }
      if (struct.kingdom != null) {
        oprot.writeFieldBegin(KINGDOM_FIELD_DESC);
        oprot.writeString(struct.kingdom);
        oprot.writeFieldEnd();
      }
      if (struct.nameAccordingTo != null) {
        oprot.writeFieldBegin(NAME_ACCORDING_TO_FIELD_DESC);
        oprot.writeString(struct.nameAccordingTo);
        oprot.writeFieldEnd();
      }
      if (struct.nameAccordingToID != null) {
        oprot.writeFieldBegin(NAME_ACCORDING_TO_ID_FIELD_DESC);
        oprot.writeString(struct.nameAccordingToID);
        oprot.writeFieldEnd();
      }
      if (struct.namePublishedIn != null) {
        oprot.writeFieldBegin(NAME_PUBLISHED_IN_FIELD_DESC);
        oprot.writeString(struct.namePublishedIn);
        oprot.writeFieldEnd();
      }
      if (struct.namePublishedInID != null) {
        oprot.writeFieldBegin(NAME_PUBLISHED_IN_ID_FIELD_DESC);
        oprot.writeString(struct.namePublishedInID);
        oprot.writeFieldEnd();
      }
      if (struct.namePublishedInYear != null) {
        oprot.writeFieldBegin(NAME_PUBLISHED_IN_YEAR_FIELD_DESC);
        oprot.writeString(struct.namePublishedInYear);
        oprot.writeFieldEnd();
      }
      if (struct.nomenclaturalCode != null) {
        oprot.writeFieldBegin(NOMENCLATURAL_CODE_FIELD_DESC);
        oprot.writeString(struct.nomenclaturalCode);
        oprot.writeFieldEnd();
      }
      if (struct.nomenclaturalStatus != null) {
        oprot.writeFieldBegin(NOMENCLATURAL_STATUS_FIELD_DESC);
        oprot.writeString(struct.nomenclaturalStatus);
        oprot.writeFieldEnd();
      }
      if (struct.order != null) {
        oprot.writeFieldBegin(ORDER_FIELD_DESC);
        oprot.writeString(struct.order);
        oprot.writeFieldEnd();
      }
      if (struct.originalNameUsage != null) {
        oprot.writeFieldBegin(ORIGINAL_NAME_USAGE_FIELD_DESC);
        oprot.writeString(struct.originalNameUsage);
        oprot.writeFieldEnd();
      }
      if (struct.originalNameUsageID != null) {
        oprot.writeFieldBegin(ORIGINAL_NAME_USAGE_ID_FIELD_DESC);
        oprot.writeString(struct.originalNameUsageID);
        oprot.writeFieldEnd();
      }
      if (struct.parentNameUsage != null) {
        oprot.writeFieldBegin(PARENT_NAME_USAGE_FIELD_DESC);
        oprot.writeString(struct.parentNameUsage);
        oprot.writeFieldEnd();
      }
      if (struct.parentNameUsageID != null) {
        oprot.writeFieldBegin(PARENT_NAME_USAGE_ID_FIELD_DESC);
        oprot.writeString(struct.parentNameUsageID);
        oprot.writeFieldEnd();
      }
      if (struct.phylum != null) {
        oprot.writeFieldBegin(PHYLUM_FIELD_DESC);
        oprot.writeString(struct.phylum);
        oprot.writeFieldEnd();
      }
      if (struct.scientificName != null) {
        oprot.writeFieldBegin(SCIENTIFIC_NAME_FIELD_DESC);
        oprot.writeString(struct.scientificName);
        oprot.writeFieldEnd();
      }
      if (struct.scientificNameAuthorship != null) {
        oprot.writeFieldBegin(SCIENTIFIC_NAME_AUTHORSHIP_FIELD_DESC);
        oprot.writeString(struct.scientificNameAuthorship);
        oprot.writeFieldEnd();
      }
      if (struct.scientificNameID != null) {
        oprot.writeFieldBegin(SCIENTIFIC_NAME_ID_FIELD_DESC);
        oprot.writeString(struct.scientificNameID);
        oprot.writeFieldEnd();
      }
      if (struct.specificEpithet != null) {
        oprot.writeFieldBegin(SPECIFIC_EPITHET_FIELD_DESC);
        oprot.writeString(struct.specificEpithet);
        oprot.writeFieldEnd();
      }
      if (struct.subgenus != null) {
        oprot.writeFieldBegin(SUBGENUS_FIELD_DESC);
        oprot.writeString(struct.subgenus);
        oprot.writeFieldEnd();
      }
      if (struct.taxonConceptID != null) {
        oprot.writeFieldBegin(TAXON_CONCEPT_ID_FIELD_DESC);
        oprot.writeString(struct.taxonConceptID);
        oprot.writeFieldEnd();
      }
      if (struct.taxonID != null) {
        oprot.writeFieldBegin(TAXON_ID_FIELD_DESC);
        oprot.writeString(struct.taxonID);
        oprot.writeFieldEnd();
      }
      if (struct.taxonRank != null) {
        oprot.writeFieldBegin(TAXON_RANK_FIELD_DESC);
        oprot.writeString(struct.taxonRank);
        oprot.writeFieldEnd();
      }
      if (struct.taxonRemarks != null) {
        oprot.writeFieldBegin(TAXON_REMARKS_FIELD_DESC);
        oprot.writeString(struct.taxonRemarks);
        oprot.writeFieldEnd();
      }
      if (struct.taxonomicStatus != null) {
        oprot.writeFieldBegin(TAXONOMIC_STATUS_FIELD_DESC);
        oprot.writeString(struct.taxonomicStatus);
        oprot.writeFieldEnd();
      }
      if (struct.verbatimTaxonRank != null) {
        oprot.writeFieldBegin(VERBATIM_TAXON_RANK_FIELD_DESC);
        oprot.writeString(struct.verbatimTaxonRank);
        oprot.writeFieldEnd();
      }
      if (struct.vernacularName != null) {
        oprot.writeFieldBegin(VERNACULAR_NAME_FIELD_DESC);
        oprot.writeString(struct.vernacularName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaxonTupleSchemeFactory implements SchemeFactory {
    public TaxonTupleScheme getScheme() {
      return new TaxonTupleScheme();
    }
  }

  private static class TaxonTupleScheme extends TupleScheme<Taxon> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Taxon struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAcceptedNameUsage()) {
        optionals.set(0);
      }
      if (struct.isSetAcceptedNameUsageID()) {
        optionals.set(1);
      }
      if (struct.isSetClazz()) {
        optionals.set(2);
      }
      if (struct.isSetFamily()) {
        optionals.set(3);
      }
      if (struct.isSetGenus()) {
        optionals.set(4);
      }
      if (struct.isSetHigherClassification()) {
        optionals.set(5);
      }
      if (struct.isSetInfraspecificEpithet()) {
        optionals.set(6);
      }
      if (struct.isSetKingdom()) {
        optionals.set(7);
      }
      if (struct.isSetNameAccordingTo()) {
        optionals.set(8);
      }
      if (struct.isSetNameAccordingToID()) {
        optionals.set(9);
      }
      if (struct.isSetNamePublishedIn()) {
        optionals.set(10);
      }
      if (struct.isSetNamePublishedInID()) {
        optionals.set(11);
      }
      if (struct.isSetNamePublishedInYear()) {
        optionals.set(12);
      }
      if (struct.isSetNomenclaturalCode()) {
        optionals.set(13);
      }
      if (struct.isSetNomenclaturalStatus()) {
        optionals.set(14);
      }
      if (struct.isSetOrder()) {
        optionals.set(15);
      }
      if (struct.isSetOriginalNameUsage()) {
        optionals.set(16);
      }
      if (struct.isSetOriginalNameUsageID()) {
        optionals.set(17);
      }
      if (struct.isSetParentNameUsage()) {
        optionals.set(18);
      }
      if (struct.isSetParentNameUsageID()) {
        optionals.set(19);
      }
      if (struct.isSetPhylum()) {
        optionals.set(20);
      }
      if (struct.isSetScientificName()) {
        optionals.set(21);
      }
      if (struct.isSetScientificNameAuthorship()) {
        optionals.set(22);
      }
      if (struct.isSetScientificNameID()) {
        optionals.set(23);
      }
      if (struct.isSetSpecificEpithet()) {
        optionals.set(24);
      }
      if (struct.isSetSubgenus()) {
        optionals.set(25);
      }
      if (struct.isSetTaxonConceptID()) {
        optionals.set(26);
      }
      if (struct.isSetTaxonID()) {
        optionals.set(27);
      }
      if (struct.isSetTaxonRank()) {
        optionals.set(28);
      }
      if (struct.isSetTaxonRemarks()) {
        optionals.set(29);
      }
      if (struct.isSetTaxonomicStatus()) {
        optionals.set(30);
      }
      if (struct.isSetVerbatimTaxonRank()) {
        optionals.set(31);
      }
      if (struct.isSetVernacularName()) {
        optionals.set(32);
      }
      oprot.writeBitSet(optionals, 33);
      if (struct.isSetAcceptedNameUsage()) {
        oprot.writeString(struct.acceptedNameUsage);
      }
      if (struct.isSetAcceptedNameUsageID()) {
        oprot.writeString(struct.acceptedNameUsageID);
      }
      if (struct.isSetClazz()) {
        oprot.writeString(struct.clazz);
      }
      if (struct.isSetFamily()) {
        oprot.writeString(struct.family);
      }
      if (struct.isSetGenus()) {
        oprot.writeString(struct.genus);
      }
      if (struct.isSetHigherClassification()) {
        oprot.writeString(struct.higherClassification);
      }
      if (struct.isSetInfraspecificEpithet()) {
        oprot.writeString(struct.infraspecificEpithet);
      }
      if (struct.isSetKingdom()) {
        oprot.writeString(struct.kingdom);
      }
      if (struct.isSetNameAccordingTo()) {
        oprot.writeString(struct.nameAccordingTo);
      }
      if (struct.isSetNameAccordingToID()) {
        oprot.writeString(struct.nameAccordingToID);
      }
      if (struct.isSetNamePublishedIn()) {
        oprot.writeString(struct.namePublishedIn);
      }
      if (struct.isSetNamePublishedInID()) {
        oprot.writeString(struct.namePublishedInID);
      }
      if (struct.isSetNamePublishedInYear()) {
        oprot.writeString(struct.namePublishedInYear);
      }
      if (struct.isSetNomenclaturalCode()) {
        oprot.writeString(struct.nomenclaturalCode);
      }
      if (struct.isSetNomenclaturalStatus()) {
        oprot.writeString(struct.nomenclaturalStatus);
      }
      if (struct.isSetOrder()) {
        oprot.writeString(struct.order);
      }
      if (struct.isSetOriginalNameUsage()) {
        oprot.writeString(struct.originalNameUsage);
      }
      if (struct.isSetOriginalNameUsageID()) {
        oprot.writeString(struct.originalNameUsageID);
      }
      if (struct.isSetParentNameUsage()) {
        oprot.writeString(struct.parentNameUsage);
      }
      if (struct.isSetParentNameUsageID()) {
        oprot.writeString(struct.parentNameUsageID);
      }
      if (struct.isSetPhylum()) {
        oprot.writeString(struct.phylum);
      }
      if (struct.isSetScientificName()) {
        oprot.writeString(struct.scientificName);
      }
      if (struct.isSetScientificNameAuthorship()) {
        oprot.writeString(struct.scientificNameAuthorship);
      }
      if (struct.isSetScientificNameID()) {
        oprot.writeString(struct.scientificNameID);
      }
      if (struct.isSetSpecificEpithet()) {
        oprot.writeString(struct.specificEpithet);
      }
      if (struct.isSetSubgenus()) {
        oprot.writeString(struct.subgenus);
      }
      if (struct.isSetTaxonConceptID()) {
        oprot.writeString(struct.taxonConceptID);
      }
      if (struct.isSetTaxonID()) {
        oprot.writeString(struct.taxonID);
      }
      if (struct.isSetTaxonRank()) {
        oprot.writeString(struct.taxonRank);
      }
      if (struct.isSetTaxonRemarks()) {
        oprot.writeString(struct.taxonRemarks);
      }
      if (struct.isSetTaxonomicStatus()) {
        oprot.writeString(struct.taxonomicStatus);
      }
      if (struct.isSetVerbatimTaxonRank()) {
        oprot.writeString(struct.verbatimTaxonRank);
      }
      if (struct.isSetVernacularName()) {
        oprot.writeString(struct.vernacularName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Taxon struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(33);
      if (incoming.get(0)) {
        struct.acceptedNameUsage = iprot.readString();
        struct.setAcceptedNameUsageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.acceptedNameUsageID = iprot.readString();
        struct.setAcceptedNameUsageIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clazz = iprot.readString();
        struct.setClazzIsSet(true);
      }
      if (incoming.get(3)) {
        struct.family = iprot.readString();
        struct.setFamilyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.genus = iprot.readString();
        struct.setGenusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.higherClassification = iprot.readString();
        struct.setHigherClassificationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.infraspecificEpithet = iprot.readString();
        struct.setInfraspecificEpithetIsSet(true);
      }
      if (incoming.get(7)) {
        struct.kingdom = iprot.readString();
        struct.setKingdomIsSet(true);
      }
      if (incoming.get(8)) {
        struct.nameAccordingTo = iprot.readString();
        struct.setNameAccordingToIsSet(true);
      }
      if (incoming.get(9)) {
        struct.nameAccordingToID = iprot.readString();
        struct.setNameAccordingToIDIsSet(true);
      }
      if (incoming.get(10)) {
        struct.namePublishedIn = iprot.readString();
        struct.setNamePublishedInIsSet(true);
      }
      if (incoming.get(11)) {
        struct.namePublishedInID = iprot.readString();
        struct.setNamePublishedInIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.namePublishedInYear = iprot.readString();
        struct.setNamePublishedInYearIsSet(true);
      }
      if (incoming.get(13)) {
        struct.nomenclaturalCode = iprot.readString();
        struct.setNomenclaturalCodeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.nomenclaturalStatus = iprot.readString();
        struct.setNomenclaturalStatusIsSet(true);
      }
      if (incoming.get(15)) {
        struct.order = iprot.readString();
        struct.setOrderIsSet(true);
      }
      if (incoming.get(16)) {
        struct.originalNameUsage = iprot.readString();
        struct.setOriginalNameUsageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.originalNameUsageID = iprot.readString();
        struct.setOriginalNameUsageIDIsSet(true);
      }
      if (incoming.get(18)) {
        struct.parentNameUsage = iprot.readString();
        struct.setParentNameUsageIsSet(true);
      }
      if (incoming.get(19)) {
        struct.parentNameUsageID = iprot.readString();
        struct.setParentNameUsageIDIsSet(true);
      }
      if (incoming.get(20)) {
        struct.phylum = iprot.readString();
        struct.setPhylumIsSet(true);
      }
      if (incoming.get(21)) {
        struct.scientificName = iprot.readString();
        struct.setScientificNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.scientificNameAuthorship = iprot.readString();
        struct.setScientificNameAuthorshipIsSet(true);
      }
      if (incoming.get(23)) {
        struct.scientificNameID = iprot.readString();
        struct.setScientificNameIDIsSet(true);
      }
      if (incoming.get(24)) {
        struct.specificEpithet = iprot.readString();
        struct.setSpecificEpithetIsSet(true);
      }
      if (incoming.get(25)) {
        struct.subgenus = iprot.readString();
        struct.setSubgenusIsSet(true);
      }
      if (incoming.get(26)) {
        struct.taxonConceptID = iprot.readString();
        struct.setTaxonConceptIDIsSet(true);
      }
      if (incoming.get(27)) {
        struct.taxonID = iprot.readString();
        struct.setTaxonIDIsSet(true);
      }
      if (incoming.get(28)) {
        struct.taxonRank = iprot.readString();
        struct.setTaxonRankIsSet(true);
      }
      if (incoming.get(29)) {
        struct.taxonRemarks = iprot.readString();
        struct.setTaxonRemarksIsSet(true);
      }
      if (incoming.get(30)) {
        struct.taxonomicStatus = iprot.readString();
        struct.setTaxonomicStatusIsSet(true);
      }
      if (incoming.get(31)) {
        struct.verbatimTaxonRank = iprot.readString();
        struct.setVerbatimTaxonRankIsSet(true);
      }
      if (incoming.get(32)) {
        struct.vernacularName = iprot.readString();
        struct.setVernacularNameIsSet(true);
      }
    }
  }

}

