/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The RecordPropertyValue is the polymorphic representation of a Darwin Core
 * class structure, which is either RecordLevel, Occurrence, Event, Location,
 * GeologicalContext, Identification, Taxon, ResourceRelationship, or
 * MeasurementOrFact.
 */
public class RecordPropertyValue extends org.apache.thrift.TUnion<RecordPropertyValue, RecordPropertyValue._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecordPropertyValue");
  private static final org.apache.thrift.protocol.TField RECORD_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("recordLevel", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField OCCURRENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("occurrence", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField GEOLOGICAL_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("geologicalContext", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField IDENTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("identification", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField TAXON_FIELD_DESC = new org.apache.thrift.protocol.TField("taxon", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField RESOURCE_RELATIONSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceRelationship", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField MEASUREMENT_OR_FACT_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementOrFact", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECORD_LEVEL((short)1, "recordLevel"),
    OCCURRENCE((short)2, "occurrence"),
    EVENT((short)3, "event"),
    LOCATION((short)4, "location"),
    GEOLOGICAL_CONTEXT((short)5, "geologicalContext"),
    IDENTIFICATION((short)6, "identification"),
    TAXON((short)7, "taxon"),
    RESOURCE_RELATIONSHIP((short)8, "resourceRelationship"),
    MEASUREMENT_OR_FACT((short)9, "measurementOrFact");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECORD_LEVEL
          return RECORD_LEVEL;
        case 2: // OCCURRENCE
          return OCCURRENCE;
        case 3: // EVENT
          return EVENT;
        case 4: // LOCATION
          return LOCATION;
        case 5: // GEOLOGICAL_CONTEXT
          return GEOLOGICAL_CONTEXT;
        case 6: // IDENTIFICATION
          return IDENTIFICATION;
        case 7: // TAXON
          return TAXON;
        case 8: // RESOURCE_RELATIONSHIP
          return RESOURCE_RELATIONSHIP;
        case 9: // MEASUREMENT_OR_FACT
          return MEASUREMENT_OR_FACT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECORD_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("recordLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordLevel.class)));
    tmpMap.put(_Fields.OCCURRENCE, new org.apache.thrift.meta_data.FieldMetaData("occurrence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Occurrence.class)));
    tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Event.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.GEOLOGICAL_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("geologicalContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeologicalContext.class)));
    tmpMap.put(_Fields.IDENTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("identification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Identification.class)));
    tmpMap.put(_Fields.TAXON, new org.apache.thrift.meta_data.FieldMetaData("taxon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Taxon.class)));
    tmpMap.put(_Fields.RESOURCE_RELATIONSHIP, new org.apache.thrift.meta_data.FieldMetaData("resourceRelationship", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResourceRelationship.class)));
    tmpMap.put(_Fields.MEASUREMENT_OR_FACT, new org.apache.thrift.meta_data.FieldMetaData("measurementOrFact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeasurementOrFact.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecordPropertyValue.class, metaDataMap);
  }

  public RecordPropertyValue() {
    super();
  }

  public RecordPropertyValue(_Fields setField, Object value) {
    super(setField, value);
  }

  public RecordPropertyValue(RecordPropertyValue other) {
    super(other);
  }
  public RecordPropertyValue deepCopy() {
    return new RecordPropertyValue(this);
  }

  public static RecordPropertyValue recordLevel(RecordLevel value) {
    RecordPropertyValue x = new RecordPropertyValue();
    x.setRecordLevel(value);
    return x;
  }

  public static RecordPropertyValue occurrence(Occurrence value) {
    RecordPropertyValue x = new RecordPropertyValue();
    x.setOccurrence(value);
    return x;
  }

  public static RecordPropertyValue event(Event value) {
    RecordPropertyValue x = new RecordPropertyValue();
    x.setEvent(value);
    return x;
  }

  public static RecordPropertyValue location(Location value) {
    RecordPropertyValue x = new RecordPropertyValue();
    x.setLocation(value);
    return x;
  }

  public static RecordPropertyValue geologicalContext(GeologicalContext value) {
    RecordPropertyValue x = new RecordPropertyValue();
    x.setGeologicalContext(value);
    return x;
  }

  public static RecordPropertyValue identification(Identification value) {
    RecordPropertyValue x = new RecordPropertyValue();
    x.setIdentification(value);
    return x;
  }

  public static RecordPropertyValue taxon(Taxon value) {
    RecordPropertyValue x = new RecordPropertyValue();
    x.setTaxon(value);
    return x;
  }

  public static RecordPropertyValue resourceRelationship(ResourceRelationship value) {
    RecordPropertyValue x = new RecordPropertyValue();
    x.setResourceRelationship(value);
    return x;
  }

  public static RecordPropertyValue measurementOrFact(MeasurementOrFact value) {
    RecordPropertyValue x = new RecordPropertyValue();
    x.setMeasurementOrFact(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case RECORD_LEVEL:
        if (value instanceof RecordLevel) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RecordLevel for field 'recordLevel', but got " + value.getClass().getSimpleName());
      case OCCURRENCE:
        if (value instanceof Occurrence) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Occurrence for field 'occurrence', but got " + value.getClass().getSimpleName());
      case EVENT:
        if (value instanceof Event) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Event for field 'event', but got " + value.getClass().getSimpleName());
      case LOCATION:
        if (value instanceof Location) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Location for field 'location', but got " + value.getClass().getSimpleName());
      case GEOLOGICAL_CONTEXT:
        if (value instanceof GeologicalContext) {
          break;
        }
        throw new ClassCastException("Was expecting value of type GeologicalContext for field 'geologicalContext', but got " + value.getClass().getSimpleName());
      case IDENTIFICATION:
        if (value instanceof Identification) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Identification for field 'identification', but got " + value.getClass().getSimpleName());
      case TAXON:
        if (value instanceof Taxon) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Taxon for field 'taxon', but got " + value.getClass().getSimpleName());
      case RESOURCE_RELATIONSHIP:
        if (value instanceof ResourceRelationship) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ResourceRelationship for field 'resourceRelationship', but got " + value.getClass().getSimpleName());
      case MEASUREMENT_OR_FACT:
        if (value instanceof MeasurementOrFact) {
          break;
        }
        throw new ClassCastException("Was expecting value of type MeasurementOrFact for field 'measurementOrFact', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case RECORD_LEVEL:
          if (field.type == RECORD_LEVEL_FIELD_DESC.type) {
            RecordLevel recordLevel;
            recordLevel = new RecordLevel();
            recordLevel.read(iprot);
            return recordLevel;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case OCCURRENCE:
          if (field.type == OCCURRENCE_FIELD_DESC.type) {
            Occurrence occurrence;
            occurrence = new Occurrence();
            occurrence.read(iprot);
            return occurrence;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case EVENT:
          if (field.type == EVENT_FIELD_DESC.type) {
            Event event;
            event = new Event();
            event.read(iprot);
            return event;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LOCATION:
          if (field.type == LOCATION_FIELD_DESC.type) {
            Location location;
            location = new Location();
            location.read(iprot);
            return location;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case GEOLOGICAL_CONTEXT:
          if (field.type == GEOLOGICAL_CONTEXT_FIELD_DESC.type) {
            GeologicalContext geologicalContext;
            geologicalContext = new GeologicalContext();
            geologicalContext.read(iprot);
            return geologicalContext;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case IDENTIFICATION:
          if (field.type == IDENTIFICATION_FIELD_DESC.type) {
            Identification identification;
            identification = new Identification();
            identification.read(iprot);
            return identification;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TAXON:
          if (field.type == TAXON_FIELD_DESC.type) {
            Taxon taxon;
            taxon = new Taxon();
            taxon.read(iprot);
            return taxon;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RESOURCE_RELATIONSHIP:
          if (field.type == RESOURCE_RELATIONSHIP_FIELD_DESC.type) {
            ResourceRelationship resourceRelationship;
            resourceRelationship = new ResourceRelationship();
            resourceRelationship.read(iprot);
            return resourceRelationship;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MEASUREMENT_OR_FACT:
          if (field.type == MEASUREMENT_OR_FACT_FIELD_DESC.type) {
            MeasurementOrFact measurementOrFact;
            measurementOrFact = new MeasurementOrFact();
            measurementOrFact.read(iprot);
            return measurementOrFact;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case RECORD_LEVEL:
        RecordLevel recordLevel = (RecordLevel)value_;
        recordLevel.write(oprot);
        return;
      case OCCURRENCE:
        Occurrence occurrence = (Occurrence)value_;
        occurrence.write(oprot);
        return;
      case EVENT:
        Event event = (Event)value_;
        event.write(oprot);
        return;
      case LOCATION:
        Location location = (Location)value_;
        location.write(oprot);
        return;
      case GEOLOGICAL_CONTEXT:
        GeologicalContext geologicalContext = (GeologicalContext)value_;
        geologicalContext.write(oprot);
        return;
      case IDENTIFICATION:
        Identification identification = (Identification)value_;
        identification.write(oprot);
        return;
      case TAXON:
        Taxon taxon = (Taxon)value_;
        taxon.write(oprot);
        return;
      case RESOURCE_RELATIONSHIP:
        ResourceRelationship resourceRelationship = (ResourceRelationship)value_;
        resourceRelationship.write(oprot);
        return;
      case MEASUREMENT_OR_FACT:
        MeasurementOrFact measurementOrFact = (MeasurementOrFact)value_;
        measurementOrFact.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case RECORD_LEVEL:
          RecordLevel recordLevel;
          recordLevel = new RecordLevel();
          recordLevel.read(iprot);
          return recordLevel;
        case OCCURRENCE:
          Occurrence occurrence;
          occurrence = new Occurrence();
          occurrence.read(iprot);
          return occurrence;
        case EVENT:
          Event event;
          event = new Event();
          event.read(iprot);
          return event;
        case LOCATION:
          Location location;
          location = new Location();
          location.read(iprot);
          return location;
        case GEOLOGICAL_CONTEXT:
          GeologicalContext geologicalContext;
          geologicalContext = new GeologicalContext();
          geologicalContext.read(iprot);
          return geologicalContext;
        case IDENTIFICATION:
          Identification identification;
          identification = new Identification();
          identification.read(iprot);
          return identification;
        case TAXON:
          Taxon taxon;
          taxon = new Taxon();
          taxon.read(iprot);
          return taxon;
        case RESOURCE_RELATIONSHIP:
          ResourceRelationship resourceRelationship;
          resourceRelationship = new ResourceRelationship();
          resourceRelationship.read(iprot);
          return resourceRelationship;
        case MEASUREMENT_OR_FACT:
          MeasurementOrFact measurementOrFact;
          measurementOrFact = new MeasurementOrFact();
          measurementOrFact.read(iprot);
          return measurementOrFact;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case RECORD_LEVEL:
        RecordLevel recordLevel = (RecordLevel)value_;
        recordLevel.write(oprot);
        return;
      case OCCURRENCE:
        Occurrence occurrence = (Occurrence)value_;
        occurrence.write(oprot);
        return;
      case EVENT:
        Event event = (Event)value_;
        event.write(oprot);
        return;
      case LOCATION:
        Location location = (Location)value_;
        location.write(oprot);
        return;
      case GEOLOGICAL_CONTEXT:
        GeologicalContext geologicalContext = (GeologicalContext)value_;
        geologicalContext.write(oprot);
        return;
      case IDENTIFICATION:
        Identification identification = (Identification)value_;
        identification.write(oprot);
        return;
      case TAXON:
        Taxon taxon = (Taxon)value_;
        taxon.write(oprot);
        return;
      case RESOURCE_RELATIONSHIP:
        ResourceRelationship resourceRelationship = (ResourceRelationship)value_;
        resourceRelationship.write(oprot);
        return;
      case MEASUREMENT_OR_FACT:
        MeasurementOrFact measurementOrFact = (MeasurementOrFact)value_;
        measurementOrFact.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case RECORD_LEVEL:
        return RECORD_LEVEL_FIELD_DESC;
      case OCCURRENCE:
        return OCCURRENCE_FIELD_DESC;
      case EVENT:
        return EVENT_FIELD_DESC;
      case LOCATION:
        return LOCATION_FIELD_DESC;
      case GEOLOGICAL_CONTEXT:
        return GEOLOGICAL_CONTEXT_FIELD_DESC;
      case IDENTIFICATION:
        return IDENTIFICATION_FIELD_DESC;
      case TAXON:
        return TAXON_FIELD_DESC;
      case RESOURCE_RELATIONSHIP:
        return RESOURCE_RELATIONSHIP_FIELD_DESC;
      case MEASUREMENT_OR_FACT:
        return MEASUREMENT_OR_FACT_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public RecordLevel getRecordLevel() {
    if (getSetField() == _Fields.RECORD_LEVEL) {
      return (RecordLevel)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'recordLevel' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRecordLevel(RecordLevel value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RECORD_LEVEL;
    value_ = value;
  }

  public Occurrence getOccurrence() {
    if (getSetField() == _Fields.OCCURRENCE) {
      return (Occurrence)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'occurrence' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOccurrence(Occurrence value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.OCCURRENCE;
    value_ = value;
  }

  public Event getEvent() {
    if (getSetField() == _Fields.EVENT) {
      return (Event)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'event' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEvent(Event value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.EVENT;
    value_ = value;
  }

  public Location getLocation() {
    if (getSetField() == _Fields.LOCATION) {
      return (Location)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'location' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLocation(Location value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LOCATION;
    value_ = value;
  }

  public GeologicalContext getGeologicalContext() {
    if (getSetField() == _Fields.GEOLOGICAL_CONTEXT) {
      return (GeologicalContext)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'geologicalContext' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setGeologicalContext(GeologicalContext value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.GEOLOGICAL_CONTEXT;
    value_ = value;
  }

  public Identification getIdentification() {
    if (getSetField() == _Fields.IDENTIFICATION) {
      return (Identification)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'identification' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setIdentification(Identification value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.IDENTIFICATION;
    value_ = value;
  }

  public Taxon getTaxon() {
    if (getSetField() == _Fields.TAXON) {
      return (Taxon)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'taxon' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTaxon(Taxon value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TAXON;
    value_ = value;
  }

  public ResourceRelationship getResourceRelationship() {
    if (getSetField() == _Fields.RESOURCE_RELATIONSHIP) {
      return (ResourceRelationship)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'resourceRelationship' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setResourceRelationship(ResourceRelationship value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RESOURCE_RELATIONSHIP;
    value_ = value;
  }

  public MeasurementOrFact getMeasurementOrFact() {
    if (getSetField() == _Fields.MEASUREMENT_OR_FACT) {
      return (MeasurementOrFact)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'measurementOrFact' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMeasurementOrFact(MeasurementOrFact value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.MEASUREMENT_OR_FACT;
    value_ = value;
  }

  public boolean isSetRecordLevel() {
    return setField_ == _Fields.RECORD_LEVEL;
  }


  public boolean isSetOccurrence() {
    return setField_ == _Fields.OCCURRENCE;
  }


  public boolean isSetEvent() {
    return setField_ == _Fields.EVENT;
  }


  public boolean isSetLocation() {
    return setField_ == _Fields.LOCATION;
  }


  public boolean isSetGeologicalContext() {
    return setField_ == _Fields.GEOLOGICAL_CONTEXT;
  }


  public boolean isSetIdentification() {
    return setField_ == _Fields.IDENTIFICATION;
  }


  public boolean isSetTaxon() {
    return setField_ == _Fields.TAXON;
  }


  public boolean isSetResourceRelationship() {
    return setField_ == _Fields.RESOURCE_RELATIONSHIP;
  }


  public boolean isSetMeasurementOrFact() {
    return setField_ == _Fields.MEASUREMENT_OR_FACT;
  }


  public boolean equals(Object other) {
    if (other instanceof RecordPropertyValue) {
      return equals((RecordPropertyValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(RecordPropertyValue other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(RecordPropertyValue other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
