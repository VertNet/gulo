/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Darwin Core Occurrence class structure.
 * 
 * http://rs.tdwg.org/dwc/terms/index.htm#occurrenceindex
 */
public class Occurrence implements org.apache.thrift.TBase<Occurrence, Occurrence._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Occurrence");

  private static final org.apache.thrift.protocol.TField ASSOCIATED_MEDIA_FIELD_DESC = new org.apache.thrift.protocol.TField("associatedMedia", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ASSOCIATED_OCCURRENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("associatedOccurrences", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ASSOCIATED_REFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("associatedReferences", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ASSOCIATED_SEQUENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("associatedSequences", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ASSOCIATED_TAXA_FIELD_DESC = new org.apache.thrift.protocol.TField("associatedTaxa", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BEHAVIOR_FIELD_DESC = new org.apache.thrift.protocol.TField("behavior", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CATALOG_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogNumber", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DISPOSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("disposition", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ESTABLISHMENT_MEANS_FIELD_DESC = new org.apache.thrift.protocol.TField("establishmentMeans", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField INDIVIDUAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("individualCount", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField INDIVIDUAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("individualID", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LIFE_STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("lifeStage", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField OCCURRENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("occurrenceID", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField OCCURRENCE_REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("occurrenceRemarks", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField OCCURRENCE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("occurrenceStatus", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField OTHER_CATALOG_NUMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("otherCatalogNumbers", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PREPARATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("preparations", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PREVIOUS_IDENTIFICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("previousIdentifications", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField RECORD_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("recordNumber", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField RECORDED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("recordedBy", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField REPRODUCTIVE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("reproductiveCondition", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OccurrenceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OccurrenceTupleSchemeFactory());
  }

  public String associatedMedia; // required
  public String associatedOccurrences; // required
  public String associatedReferences; // required
  public String associatedSequences; // required
  public String associatedTaxa; // required
  public String behavior; // required
  public String catalogNumber; // required
  public String disposition; // required
  public String establishmentMeans; // required
  public String individualCount; // required
  public String individualID; // required
  public String lifeStage; // required
  public String occurrenceID; // required
  public String occurrenceRemarks; // required
  public String occurrenceStatus; // required
  public String otherCatalogNumbers; // required
  public String preparations; // required
  public String previousIdentifications; // required
  public String recordNumber; // required
  public String recordedBy; // required
  public String reproductiveCondition; // required
  public String sex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ASSOCIATED_MEDIA((short)1, "associatedMedia"),
    ASSOCIATED_OCCURRENCES((short)2, "associatedOccurrences"),
    ASSOCIATED_REFERENCES((short)3, "associatedReferences"),
    ASSOCIATED_SEQUENCES((short)4, "associatedSequences"),
    ASSOCIATED_TAXA((short)5, "associatedTaxa"),
    BEHAVIOR((short)6, "behavior"),
    CATALOG_NUMBER((short)7, "catalogNumber"),
    DISPOSITION((short)8, "disposition"),
    ESTABLISHMENT_MEANS((short)9, "establishmentMeans"),
    INDIVIDUAL_COUNT((short)10, "individualCount"),
    INDIVIDUAL_ID((short)11, "individualID"),
    LIFE_STAGE((short)12, "lifeStage"),
    OCCURRENCE_ID((short)13, "occurrenceID"),
    OCCURRENCE_REMARKS((short)14, "occurrenceRemarks"),
    OCCURRENCE_STATUS((short)15, "occurrenceStatus"),
    OTHER_CATALOG_NUMBERS((short)16, "otherCatalogNumbers"),
    PREPARATIONS((short)17, "preparations"),
    PREVIOUS_IDENTIFICATIONS((short)18, "previousIdentifications"),
    RECORD_NUMBER((short)19, "recordNumber"),
    RECORDED_BY((short)20, "recordedBy"),
    REPRODUCTIVE_CONDITION((short)21, "reproductiveCondition"),
    SEX((short)22, "sex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ASSOCIATED_MEDIA
          return ASSOCIATED_MEDIA;
        case 2: // ASSOCIATED_OCCURRENCES
          return ASSOCIATED_OCCURRENCES;
        case 3: // ASSOCIATED_REFERENCES
          return ASSOCIATED_REFERENCES;
        case 4: // ASSOCIATED_SEQUENCES
          return ASSOCIATED_SEQUENCES;
        case 5: // ASSOCIATED_TAXA
          return ASSOCIATED_TAXA;
        case 6: // BEHAVIOR
          return BEHAVIOR;
        case 7: // CATALOG_NUMBER
          return CATALOG_NUMBER;
        case 8: // DISPOSITION
          return DISPOSITION;
        case 9: // ESTABLISHMENT_MEANS
          return ESTABLISHMENT_MEANS;
        case 10: // INDIVIDUAL_COUNT
          return INDIVIDUAL_COUNT;
        case 11: // INDIVIDUAL_ID
          return INDIVIDUAL_ID;
        case 12: // LIFE_STAGE
          return LIFE_STAGE;
        case 13: // OCCURRENCE_ID
          return OCCURRENCE_ID;
        case 14: // OCCURRENCE_REMARKS
          return OCCURRENCE_REMARKS;
        case 15: // OCCURRENCE_STATUS
          return OCCURRENCE_STATUS;
        case 16: // OTHER_CATALOG_NUMBERS
          return OTHER_CATALOG_NUMBERS;
        case 17: // PREPARATIONS
          return PREPARATIONS;
        case 18: // PREVIOUS_IDENTIFICATIONS
          return PREVIOUS_IDENTIFICATIONS;
        case 19: // RECORD_NUMBER
          return RECORD_NUMBER;
        case 20: // RECORDED_BY
          return RECORDED_BY;
        case 21: // REPRODUCTIVE_CONDITION
          return REPRODUCTIVE_CONDITION;
        case 22: // SEX
          return SEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ASSOCIATED_MEDIA, new org.apache.thrift.meta_data.FieldMetaData("associatedMedia", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSOCIATED_OCCURRENCES, new org.apache.thrift.meta_data.FieldMetaData("associatedOccurrences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSOCIATED_REFERENCES, new org.apache.thrift.meta_data.FieldMetaData("associatedReferences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSOCIATED_SEQUENCES, new org.apache.thrift.meta_data.FieldMetaData("associatedSequences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSOCIATED_TAXA, new org.apache.thrift.meta_data.FieldMetaData("associatedTaxa", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEHAVIOR, new org.apache.thrift.meta_data.FieldMetaData("behavior", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATALOG_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("catalogNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPOSITION, new org.apache.thrift.meta_data.FieldMetaData("disposition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ESTABLISHMENT_MEANS, new org.apache.thrift.meta_data.FieldMetaData("establishmentMeans", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDIVIDUAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("individualCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDIVIDUAL_ID, new org.apache.thrift.meta_data.FieldMetaData("individualID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIFE_STAGE, new org.apache.thrift.meta_data.FieldMetaData("lifeStage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCCURRENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("occurrenceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCCURRENCE_REMARKS, new org.apache.thrift.meta_data.FieldMetaData("occurrenceRemarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCCURRENCE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("occurrenceStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER_CATALOG_NUMBERS, new org.apache.thrift.meta_data.FieldMetaData("otherCatalogNumbers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREPARATIONS, new org.apache.thrift.meta_data.FieldMetaData("preparations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREVIOUS_IDENTIFICATIONS, new org.apache.thrift.meta_data.FieldMetaData("previousIdentifications", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("recordNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORDED_BY, new org.apache.thrift.meta_data.FieldMetaData("recordedBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPRODUCTIVE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("reproductiveCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Occurrence.class, metaDataMap);
  }

  public Occurrence() {
  }

  public Occurrence(
    String associatedMedia,
    String associatedOccurrences,
    String associatedReferences,
    String associatedSequences,
    String associatedTaxa,
    String behavior,
    String catalogNumber,
    String disposition,
    String establishmentMeans,
    String individualCount,
    String individualID,
    String lifeStage,
    String occurrenceID,
    String occurrenceRemarks,
    String occurrenceStatus,
    String otherCatalogNumbers,
    String preparations,
    String previousIdentifications,
    String recordNumber,
    String recordedBy,
    String reproductiveCondition,
    String sex)
  {
    this();
    this.associatedMedia = associatedMedia;
    this.associatedOccurrences = associatedOccurrences;
    this.associatedReferences = associatedReferences;
    this.associatedSequences = associatedSequences;
    this.associatedTaxa = associatedTaxa;
    this.behavior = behavior;
    this.catalogNumber = catalogNumber;
    this.disposition = disposition;
    this.establishmentMeans = establishmentMeans;
    this.individualCount = individualCount;
    this.individualID = individualID;
    this.lifeStage = lifeStage;
    this.occurrenceID = occurrenceID;
    this.occurrenceRemarks = occurrenceRemarks;
    this.occurrenceStatus = occurrenceStatus;
    this.otherCatalogNumbers = otherCatalogNumbers;
    this.preparations = preparations;
    this.previousIdentifications = previousIdentifications;
    this.recordNumber = recordNumber;
    this.recordedBy = recordedBy;
    this.reproductiveCondition = reproductiveCondition;
    this.sex = sex;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Occurrence(Occurrence other) {
    if (other.isSetAssociatedMedia()) {
      this.associatedMedia = other.associatedMedia;
    }
    if (other.isSetAssociatedOccurrences()) {
      this.associatedOccurrences = other.associatedOccurrences;
    }
    if (other.isSetAssociatedReferences()) {
      this.associatedReferences = other.associatedReferences;
    }
    if (other.isSetAssociatedSequences()) {
      this.associatedSequences = other.associatedSequences;
    }
    if (other.isSetAssociatedTaxa()) {
      this.associatedTaxa = other.associatedTaxa;
    }
    if (other.isSetBehavior()) {
      this.behavior = other.behavior;
    }
    if (other.isSetCatalogNumber()) {
      this.catalogNumber = other.catalogNumber;
    }
    if (other.isSetDisposition()) {
      this.disposition = other.disposition;
    }
    if (other.isSetEstablishmentMeans()) {
      this.establishmentMeans = other.establishmentMeans;
    }
    if (other.isSetIndividualCount()) {
      this.individualCount = other.individualCount;
    }
    if (other.isSetIndividualID()) {
      this.individualID = other.individualID;
    }
    if (other.isSetLifeStage()) {
      this.lifeStage = other.lifeStage;
    }
    if (other.isSetOccurrenceID()) {
      this.occurrenceID = other.occurrenceID;
    }
    if (other.isSetOccurrenceRemarks()) {
      this.occurrenceRemarks = other.occurrenceRemarks;
    }
    if (other.isSetOccurrenceStatus()) {
      this.occurrenceStatus = other.occurrenceStatus;
    }
    if (other.isSetOtherCatalogNumbers()) {
      this.otherCatalogNumbers = other.otherCatalogNumbers;
    }
    if (other.isSetPreparations()) {
      this.preparations = other.preparations;
    }
    if (other.isSetPreviousIdentifications()) {
      this.previousIdentifications = other.previousIdentifications;
    }
    if (other.isSetRecordNumber()) {
      this.recordNumber = other.recordNumber;
    }
    if (other.isSetRecordedBy()) {
      this.recordedBy = other.recordedBy;
    }
    if (other.isSetReproductiveCondition()) {
      this.reproductiveCondition = other.reproductiveCondition;
    }
    if (other.isSetSex()) {
      this.sex = other.sex;
    }
  }

  public Occurrence deepCopy() {
    return new Occurrence(this);
  }

  @Override
  public void clear() {
    this.associatedMedia = null;
    this.associatedOccurrences = null;
    this.associatedReferences = null;
    this.associatedSequences = null;
    this.associatedTaxa = null;
    this.behavior = null;
    this.catalogNumber = null;
    this.disposition = null;
    this.establishmentMeans = null;
    this.individualCount = null;
    this.individualID = null;
    this.lifeStage = null;
    this.occurrenceID = null;
    this.occurrenceRemarks = null;
    this.occurrenceStatus = null;
    this.otherCatalogNumbers = null;
    this.preparations = null;
    this.previousIdentifications = null;
    this.recordNumber = null;
    this.recordedBy = null;
    this.reproductiveCondition = null;
    this.sex = null;
  }

  public String getAssociatedMedia() {
    return this.associatedMedia;
  }

  public Occurrence setAssociatedMedia(String associatedMedia) {
    this.associatedMedia = associatedMedia;
    return this;
  }

  public void unsetAssociatedMedia() {
    this.associatedMedia = null;
  }

  /** Returns true if field associatedMedia is set (has been assigned a value) and false otherwise */
  public boolean isSetAssociatedMedia() {
    return this.associatedMedia != null;
  }

  public void setAssociatedMediaIsSet(boolean value) {
    if (!value) {
      this.associatedMedia = null;
    }
  }

  public String getAssociatedOccurrences() {
    return this.associatedOccurrences;
  }

  public Occurrence setAssociatedOccurrences(String associatedOccurrences) {
    this.associatedOccurrences = associatedOccurrences;
    return this;
  }

  public void unsetAssociatedOccurrences() {
    this.associatedOccurrences = null;
  }

  /** Returns true if field associatedOccurrences is set (has been assigned a value) and false otherwise */
  public boolean isSetAssociatedOccurrences() {
    return this.associatedOccurrences != null;
  }

  public void setAssociatedOccurrencesIsSet(boolean value) {
    if (!value) {
      this.associatedOccurrences = null;
    }
  }

  public String getAssociatedReferences() {
    return this.associatedReferences;
  }

  public Occurrence setAssociatedReferences(String associatedReferences) {
    this.associatedReferences = associatedReferences;
    return this;
  }

  public void unsetAssociatedReferences() {
    this.associatedReferences = null;
  }

  /** Returns true if field associatedReferences is set (has been assigned a value) and false otherwise */
  public boolean isSetAssociatedReferences() {
    return this.associatedReferences != null;
  }

  public void setAssociatedReferencesIsSet(boolean value) {
    if (!value) {
      this.associatedReferences = null;
    }
  }

  public String getAssociatedSequences() {
    return this.associatedSequences;
  }

  public Occurrence setAssociatedSequences(String associatedSequences) {
    this.associatedSequences = associatedSequences;
    return this;
  }

  public void unsetAssociatedSequences() {
    this.associatedSequences = null;
  }

  /** Returns true if field associatedSequences is set (has been assigned a value) and false otherwise */
  public boolean isSetAssociatedSequences() {
    return this.associatedSequences != null;
  }

  public void setAssociatedSequencesIsSet(boolean value) {
    if (!value) {
      this.associatedSequences = null;
    }
  }

  public String getAssociatedTaxa() {
    return this.associatedTaxa;
  }

  public Occurrence setAssociatedTaxa(String associatedTaxa) {
    this.associatedTaxa = associatedTaxa;
    return this;
  }

  public void unsetAssociatedTaxa() {
    this.associatedTaxa = null;
  }

  /** Returns true if field associatedTaxa is set (has been assigned a value) and false otherwise */
  public boolean isSetAssociatedTaxa() {
    return this.associatedTaxa != null;
  }

  public void setAssociatedTaxaIsSet(boolean value) {
    if (!value) {
      this.associatedTaxa = null;
    }
  }

  public String getBehavior() {
    return this.behavior;
  }

  public Occurrence setBehavior(String behavior) {
    this.behavior = behavior;
    return this;
  }

  public void unsetBehavior() {
    this.behavior = null;
  }

  /** Returns true if field behavior is set (has been assigned a value) and false otherwise */
  public boolean isSetBehavior() {
    return this.behavior != null;
  }

  public void setBehaviorIsSet(boolean value) {
    if (!value) {
      this.behavior = null;
    }
  }

  public String getCatalogNumber() {
    return this.catalogNumber;
  }

  public Occurrence setCatalogNumber(String catalogNumber) {
    this.catalogNumber = catalogNumber;
    return this;
  }

  public void unsetCatalogNumber() {
    this.catalogNumber = null;
  }

  /** Returns true if field catalogNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogNumber() {
    return this.catalogNumber != null;
  }

  public void setCatalogNumberIsSet(boolean value) {
    if (!value) {
      this.catalogNumber = null;
    }
  }

  public String getDisposition() {
    return this.disposition;
  }

  public Occurrence setDisposition(String disposition) {
    this.disposition = disposition;
    return this;
  }

  public void unsetDisposition() {
    this.disposition = null;
  }

  /** Returns true if field disposition is set (has been assigned a value) and false otherwise */
  public boolean isSetDisposition() {
    return this.disposition != null;
  }

  public void setDispositionIsSet(boolean value) {
    if (!value) {
      this.disposition = null;
    }
  }

  public String getEstablishmentMeans() {
    return this.establishmentMeans;
  }

  public Occurrence setEstablishmentMeans(String establishmentMeans) {
    this.establishmentMeans = establishmentMeans;
    return this;
  }

  public void unsetEstablishmentMeans() {
    this.establishmentMeans = null;
  }

  /** Returns true if field establishmentMeans is set (has been assigned a value) and false otherwise */
  public boolean isSetEstablishmentMeans() {
    return this.establishmentMeans != null;
  }

  public void setEstablishmentMeansIsSet(boolean value) {
    if (!value) {
      this.establishmentMeans = null;
    }
  }

  public String getIndividualCount() {
    return this.individualCount;
  }

  public Occurrence setIndividualCount(String individualCount) {
    this.individualCount = individualCount;
    return this;
  }

  public void unsetIndividualCount() {
    this.individualCount = null;
  }

  /** Returns true if field individualCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIndividualCount() {
    return this.individualCount != null;
  }

  public void setIndividualCountIsSet(boolean value) {
    if (!value) {
      this.individualCount = null;
    }
  }

  public String getIndividualID() {
    return this.individualID;
  }

  public Occurrence setIndividualID(String individualID) {
    this.individualID = individualID;
    return this;
  }

  public void unsetIndividualID() {
    this.individualID = null;
  }

  /** Returns true if field individualID is set (has been assigned a value) and false otherwise */
  public boolean isSetIndividualID() {
    return this.individualID != null;
  }

  public void setIndividualIDIsSet(boolean value) {
    if (!value) {
      this.individualID = null;
    }
  }

  public String getLifeStage() {
    return this.lifeStage;
  }

  public Occurrence setLifeStage(String lifeStage) {
    this.lifeStage = lifeStage;
    return this;
  }

  public void unsetLifeStage() {
    this.lifeStage = null;
  }

  /** Returns true if field lifeStage is set (has been assigned a value) and false otherwise */
  public boolean isSetLifeStage() {
    return this.lifeStage != null;
  }

  public void setLifeStageIsSet(boolean value) {
    if (!value) {
      this.lifeStage = null;
    }
  }

  public String getOccurrenceID() {
    return this.occurrenceID;
  }

  public Occurrence setOccurrenceID(String occurrenceID) {
    this.occurrenceID = occurrenceID;
    return this;
  }

  public void unsetOccurrenceID() {
    this.occurrenceID = null;
  }

  /** Returns true if field occurrenceID is set (has been assigned a value) and false otherwise */
  public boolean isSetOccurrenceID() {
    return this.occurrenceID != null;
  }

  public void setOccurrenceIDIsSet(boolean value) {
    if (!value) {
      this.occurrenceID = null;
    }
  }

  public String getOccurrenceRemarks() {
    return this.occurrenceRemarks;
  }

  public Occurrence setOccurrenceRemarks(String occurrenceRemarks) {
    this.occurrenceRemarks = occurrenceRemarks;
    return this;
  }

  public void unsetOccurrenceRemarks() {
    this.occurrenceRemarks = null;
  }

  /** Returns true if field occurrenceRemarks is set (has been assigned a value) and false otherwise */
  public boolean isSetOccurrenceRemarks() {
    return this.occurrenceRemarks != null;
  }

  public void setOccurrenceRemarksIsSet(boolean value) {
    if (!value) {
      this.occurrenceRemarks = null;
    }
  }

  public String getOccurrenceStatus() {
    return this.occurrenceStatus;
  }

  public Occurrence setOccurrenceStatus(String occurrenceStatus) {
    this.occurrenceStatus = occurrenceStatus;
    return this;
  }

  public void unsetOccurrenceStatus() {
    this.occurrenceStatus = null;
  }

  /** Returns true if field occurrenceStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOccurrenceStatus() {
    return this.occurrenceStatus != null;
  }

  public void setOccurrenceStatusIsSet(boolean value) {
    if (!value) {
      this.occurrenceStatus = null;
    }
  }

  public String getOtherCatalogNumbers() {
    return this.otherCatalogNumbers;
  }

  public Occurrence setOtherCatalogNumbers(String otherCatalogNumbers) {
    this.otherCatalogNumbers = otherCatalogNumbers;
    return this;
  }

  public void unsetOtherCatalogNumbers() {
    this.otherCatalogNumbers = null;
  }

  /** Returns true if field otherCatalogNumbers is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherCatalogNumbers() {
    return this.otherCatalogNumbers != null;
  }

  public void setOtherCatalogNumbersIsSet(boolean value) {
    if (!value) {
      this.otherCatalogNumbers = null;
    }
  }

  public String getPreparations() {
    return this.preparations;
  }

  public Occurrence setPreparations(String preparations) {
    this.preparations = preparations;
    return this;
  }

  public void unsetPreparations() {
    this.preparations = null;
  }

  /** Returns true if field preparations is set (has been assigned a value) and false otherwise */
  public boolean isSetPreparations() {
    return this.preparations != null;
  }

  public void setPreparationsIsSet(boolean value) {
    if (!value) {
      this.preparations = null;
    }
  }

  public String getPreviousIdentifications() {
    return this.previousIdentifications;
  }

  public Occurrence setPreviousIdentifications(String previousIdentifications) {
    this.previousIdentifications = previousIdentifications;
    return this;
  }

  public void unsetPreviousIdentifications() {
    this.previousIdentifications = null;
  }

  /** Returns true if field previousIdentifications is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviousIdentifications() {
    return this.previousIdentifications != null;
  }

  public void setPreviousIdentificationsIsSet(boolean value) {
    if (!value) {
      this.previousIdentifications = null;
    }
  }

  public String getRecordNumber() {
    return this.recordNumber;
  }

  public Occurrence setRecordNumber(String recordNumber) {
    this.recordNumber = recordNumber;
    return this;
  }

  public void unsetRecordNumber() {
    this.recordNumber = null;
  }

  /** Returns true if field recordNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordNumber() {
    return this.recordNumber != null;
  }

  public void setRecordNumberIsSet(boolean value) {
    if (!value) {
      this.recordNumber = null;
    }
  }

  public String getRecordedBy() {
    return this.recordedBy;
  }

  public Occurrence setRecordedBy(String recordedBy) {
    this.recordedBy = recordedBy;
    return this;
  }

  public void unsetRecordedBy() {
    this.recordedBy = null;
  }

  /** Returns true if field recordedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordedBy() {
    return this.recordedBy != null;
  }

  public void setRecordedByIsSet(boolean value) {
    if (!value) {
      this.recordedBy = null;
    }
  }

  public String getReproductiveCondition() {
    return this.reproductiveCondition;
  }

  public Occurrence setReproductiveCondition(String reproductiveCondition) {
    this.reproductiveCondition = reproductiveCondition;
    return this;
  }

  public void unsetReproductiveCondition() {
    this.reproductiveCondition = null;
  }

  /** Returns true if field reproductiveCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetReproductiveCondition() {
    return this.reproductiveCondition != null;
  }

  public void setReproductiveConditionIsSet(boolean value) {
    if (!value) {
      this.reproductiveCondition = null;
    }
  }

  public String getSex() {
    return this.sex;
  }

  public Occurrence setSex(String sex) {
    this.sex = sex;
    return this;
  }

  public void unsetSex() {
    this.sex = null;
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return this.sex != null;
  }

  public void setSexIsSet(boolean value) {
    if (!value) {
      this.sex = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ASSOCIATED_MEDIA:
      if (value == null) {
        unsetAssociatedMedia();
      } else {
        setAssociatedMedia((String)value);
      }
      break;

    case ASSOCIATED_OCCURRENCES:
      if (value == null) {
        unsetAssociatedOccurrences();
      } else {
        setAssociatedOccurrences((String)value);
      }
      break;

    case ASSOCIATED_REFERENCES:
      if (value == null) {
        unsetAssociatedReferences();
      } else {
        setAssociatedReferences((String)value);
      }
      break;

    case ASSOCIATED_SEQUENCES:
      if (value == null) {
        unsetAssociatedSequences();
      } else {
        setAssociatedSequences((String)value);
      }
      break;

    case ASSOCIATED_TAXA:
      if (value == null) {
        unsetAssociatedTaxa();
      } else {
        setAssociatedTaxa((String)value);
      }
      break;

    case BEHAVIOR:
      if (value == null) {
        unsetBehavior();
      } else {
        setBehavior((String)value);
      }
      break;

    case CATALOG_NUMBER:
      if (value == null) {
        unsetCatalogNumber();
      } else {
        setCatalogNumber((String)value);
      }
      break;

    case DISPOSITION:
      if (value == null) {
        unsetDisposition();
      } else {
        setDisposition((String)value);
      }
      break;

    case ESTABLISHMENT_MEANS:
      if (value == null) {
        unsetEstablishmentMeans();
      } else {
        setEstablishmentMeans((String)value);
      }
      break;

    case INDIVIDUAL_COUNT:
      if (value == null) {
        unsetIndividualCount();
      } else {
        setIndividualCount((String)value);
      }
      break;

    case INDIVIDUAL_ID:
      if (value == null) {
        unsetIndividualID();
      } else {
        setIndividualID((String)value);
      }
      break;

    case LIFE_STAGE:
      if (value == null) {
        unsetLifeStage();
      } else {
        setLifeStage((String)value);
      }
      break;

    case OCCURRENCE_ID:
      if (value == null) {
        unsetOccurrenceID();
      } else {
        setOccurrenceID((String)value);
      }
      break;

    case OCCURRENCE_REMARKS:
      if (value == null) {
        unsetOccurrenceRemarks();
      } else {
        setOccurrenceRemarks((String)value);
      }
      break;

    case OCCURRENCE_STATUS:
      if (value == null) {
        unsetOccurrenceStatus();
      } else {
        setOccurrenceStatus((String)value);
      }
      break;

    case OTHER_CATALOG_NUMBERS:
      if (value == null) {
        unsetOtherCatalogNumbers();
      } else {
        setOtherCatalogNumbers((String)value);
      }
      break;

    case PREPARATIONS:
      if (value == null) {
        unsetPreparations();
      } else {
        setPreparations((String)value);
      }
      break;

    case PREVIOUS_IDENTIFICATIONS:
      if (value == null) {
        unsetPreviousIdentifications();
      } else {
        setPreviousIdentifications((String)value);
      }
      break;

    case RECORD_NUMBER:
      if (value == null) {
        unsetRecordNumber();
      } else {
        setRecordNumber((String)value);
      }
      break;

    case RECORDED_BY:
      if (value == null) {
        unsetRecordedBy();
      } else {
        setRecordedBy((String)value);
      }
      break;

    case REPRODUCTIVE_CONDITION:
      if (value == null) {
        unsetReproductiveCondition();
      } else {
        setReproductiveCondition((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ASSOCIATED_MEDIA:
      return getAssociatedMedia();

    case ASSOCIATED_OCCURRENCES:
      return getAssociatedOccurrences();

    case ASSOCIATED_REFERENCES:
      return getAssociatedReferences();

    case ASSOCIATED_SEQUENCES:
      return getAssociatedSequences();

    case ASSOCIATED_TAXA:
      return getAssociatedTaxa();

    case BEHAVIOR:
      return getBehavior();

    case CATALOG_NUMBER:
      return getCatalogNumber();

    case DISPOSITION:
      return getDisposition();

    case ESTABLISHMENT_MEANS:
      return getEstablishmentMeans();

    case INDIVIDUAL_COUNT:
      return getIndividualCount();

    case INDIVIDUAL_ID:
      return getIndividualID();

    case LIFE_STAGE:
      return getLifeStage();

    case OCCURRENCE_ID:
      return getOccurrenceID();

    case OCCURRENCE_REMARKS:
      return getOccurrenceRemarks();

    case OCCURRENCE_STATUS:
      return getOccurrenceStatus();

    case OTHER_CATALOG_NUMBERS:
      return getOtherCatalogNumbers();

    case PREPARATIONS:
      return getPreparations();

    case PREVIOUS_IDENTIFICATIONS:
      return getPreviousIdentifications();

    case RECORD_NUMBER:
      return getRecordNumber();

    case RECORDED_BY:
      return getRecordedBy();

    case REPRODUCTIVE_CONDITION:
      return getReproductiveCondition();

    case SEX:
      return getSex();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ASSOCIATED_MEDIA:
      return isSetAssociatedMedia();
    case ASSOCIATED_OCCURRENCES:
      return isSetAssociatedOccurrences();
    case ASSOCIATED_REFERENCES:
      return isSetAssociatedReferences();
    case ASSOCIATED_SEQUENCES:
      return isSetAssociatedSequences();
    case ASSOCIATED_TAXA:
      return isSetAssociatedTaxa();
    case BEHAVIOR:
      return isSetBehavior();
    case CATALOG_NUMBER:
      return isSetCatalogNumber();
    case DISPOSITION:
      return isSetDisposition();
    case ESTABLISHMENT_MEANS:
      return isSetEstablishmentMeans();
    case INDIVIDUAL_COUNT:
      return isSetIndividualCount();
    case INDIVIDUAL_ID:
      return isSetIndividualID();
    case LIFE_STAGE:
      return isSetLifeStage();
    case OCCURRENCE_ID:
      return isSetOccurrenceID();
    case OCCURRENCE_REMARKS:
      return isSetOccurrenceRemarks();
    case OCCURRENCE_STATUS:
      return isSetOccurrenceStatus();
    case OTHER_CATALOG_NUMBERS:
      return isSetOtherCatalogNumbers();
    case PREPARATIONS:
      return isSetPreparations();
    case PREVIOUS_IDENTIFICATIONS:
      return isSetPreviousIdentifications();
    case RECORD_NUMBER:
      return isSetRecordNumber();
    case RECORDED_BY:
      return isSetRecordedBy();
    case REPRODUCTIVE_CONDITION:
      return isSetReproductiveCondition();
    case SEX:
      return isSetSex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Occurrence)
      return this.equals((Occurrence)that);
    return false;
  }

  public boolean equals(Occurrence that) {
    if (that == null)
      return false;

    boolean this_present_associatedMedia = true && this.isSetAssociatedMedia();
    boolean that_present_associatedMedia = true && that.isSetAssociatedMedia();
    if (this_present_associatedMedia || that_present_associatedMedia) {
      if (!(this_present_associatedMedia && that_present_associatedMedia))
        return false;
      if (!this.associatedMedia.equals(that.associatedMedia))
        return false;
    }

    boolean this_present_associatedOccurrences = true && this.isSetAssociatedOccurrences();
    boolean that_present_associatedOccurrences = true && that.isSetAssociatedOccurrences();
    if (this_present_associatedOccurrences || that_present_associatedOccurrences) {
      if (!(this_present_associatedOccurrences && that_present_associatedOccurrences))
        return false;
      if (!this.associatedOccurrences.equals(that.associatedOccurrences))
        return false;
    }

    boolean this_present_associatedReferences = true && this.isSetAssociatedReferences();
    boolean that_present_associatedReferences = true && that.isSetAssociatedReferences();
    if (this_present_associatedReferences || that_present_associatedReferences) {
      if (!(this_present_associatedReferences && that_present_associatedReferences))
        return false;
      if (!this.associatedReferences.equals(that.associatedReferences))
        return false;
    }

    boolean this_present_associatedSequences = true && this.isSetAssociatedSequences();
    boolean that_present_associatedSequences = true && that.isSetAssociatedSequences();
    if (this_present_associatedSequences || that_present_associatedSequences) {
      if (!(this_present_associatedSequences && that_present_associatedSequences))
        return false;
      if (!this.associatedSequences.equals(that.associatedSequences))
        return false;
    }

    boolean this_present_associatedTaxa = true && this.isSetAssociatedTaxa();
    boolean that_present_associatedTaxa = true && that.isSetAssociatedTaxa();
    if (this_present_associatedTaxa || that_present_associatedTaxa) {
      if (!(this_present_associatedTaxa && that_present_associatedTaxa))
        return false;
      if (!this.associatedTaxa.equals(that.associatedTaxa))
        return false;
    }

    boolean this_present_behavior = true && this.isSetBehavior();
    boolean that_present_behavior = true && that.isSetBehavior();
    if (this_present_behavior || that_present_behavior) {
      if (!(this_present_behavior && that_present_behavior))
        return false;
      if (!this.behavior.equals(that.behavior))
        return false;
    }

    boolean this_present_catalogNumber = true && this.isSetCatalogNumber();
    boolean that_present_catalogNumber = true && that.isSetCatalogNumber();
    if (this_present_catalogNumber || that_present_catalogNumber) {
      if (!(this_present_catalogNumber && that_present_catalogNumber))
        return false;
      if (!this.catalogNumber.equals(that.catalogNumber))
        return false;
    }

    boolean this_present_disposition = true && this.isSetDisposition();
    boolean that_present_disposition = true && that.isSetDisposition();
    if (this_present_disposition || that_present_disposition) {
      if (!(this_present_disposition && that_present_disposition))
        return false;
      if (!this.disposition.equals(that.disposition))
        return false;
    }

    boolean this_present_establishmentMeans = true && this.isSetEstablishmentMeans();
    boolean that_present_establishmentMeans = true && that.isSetEstablishmentMeans();
    if (this_present_establishmentMeans || that_present_establishmentMeans) {
      if (!(this_present_establishmentMeans && that_present_establishmentMeans))
        return false;
      if (!this.establishmentMeans.equals(that.establishmentMeans))
        return false;
    }

    boolean this_present_individualCount = true && this.isSetIndividualCount();
    boolean that_present_individualCount = true && that.isSetIndividualCount();
    if (this_present_individualCount || that_present_individualCount) {
      if (!(this_present_individualCount && that_present_individualCount))
        return false;
      if (!this.individualCount.equals(that.individualCount))
        return false;
    }

    boolean this_present_individualID = true && this.isSetIndividualID();
    boolean that_present_individualID = true && that.isSetIndividualID();
    if (this_present_individualID || that_present_individualID) {
      if (!(this_present_individualID && that_present_individualID))
        return false;
      if (!this.individualID.equals(that.individualID))
        return false;
    }

    boolean this_present_lifeStage = true && this.isSetLifeStage();
    boolean that_present_lifeStage = true && that.isSetLifeStage();
    if (this_present_lifeStage || that_present_lifeStage) {
      if (!(this_present_lifeStage && that_present_lifeStage))
        return false;
      if (!this.lifeStage.equals(that.lifeStage))
        return false;
    }

    boolean this_present_occurrenceID = true && this.isSetOccurrenceID();
    boolean that_present_occurrenceID = true && that.isSetOccurrenceID();
    if (this_present_occurrenceID || that_present_occurrenceID) {
      if (!(this_present_occurrenceID && that_present_occurrenceID))
        return false;
      if (!this.occurrenceID.equals(that.occurrenceID))
        return false;
    }

    boolean this_present_occurrenceRemarks = true && this.isSetOccurrenceRemarks();
    boolean that_present_occurrenceRemarks = true && that.isSetOccurrenceRemarks();
    if (this_present_occurrenceRemarks || that_present_occurrenceRemarks) {
      if (!(this_present_occurrenceRemarks && that_present_occurrenceRemarks))
        return false;
      if (!this.occurrenceRemarks.equals(that.occurrenceRemarks))
        return false;
    }

    boolean this_present_occurrenceStatus = true && this.isSetOccurrenceStatus();
    boolean that_present_occurrenceStatus = true && that.isSetOccurrenceStatus();
    if (this_present_occurrenceStatus || that_present_occurrenceStatus) {
      if (!(this_present_occurrenceStatus && that_present_occurrenceStatus))
        return false;
      if (!this.occurrenceStatus.equals(that.occurrenceStatus))
        return false;
    }

    boolean this_present_otherCatalogNumbers = true && this.isSetOtherCatalogNumbers();
    boolean that_present_otherCatalogNumbers = true && that.isSetOtherCatalogNumbers();
    if (this_present_otherCatalogNumbers || that_present_otherCatalogNumbers) {
      if (!(this_present_otherCatalogNumbers && that_present_otherCatalogNumbers))
        return false;
      if (!this.otherCatalogNumbers.equals(that.otherCatalogNumbers))
        return false;
    }

    boolean this_present_preparations = true && this.isSetPreparations();
    boolean that_present_preparations = true && that.isSetPreparations();
    if (this_present_preparations || that_present_preparations) {
      if (!(this_present_preparations && that_present_preparations))
        return false;
      if (!this.preparations.equals(that.preparations))
        return false;
    }

    boolean this_present_previousIdentifications = true && this.isSetPreviousIdentifications();
    boolean that_present_previousIdentifications = true && that.isSetPreviousIdentifications();
    if (this_present_previousIdentifications || that_present_previousIdentifications) {
      if (!(this_present_previousIdentifications && that_present_previousIdentifications))
        return false;
      if (!this.previousIdentifications.equals(that.previousIdentifications))
        return false;
    }

    boolean this_present_recordNumber = true && this.isSetRecordNumber();
    boolean that_present_recordNumber = true && that.isSetRecordNumber();
    if (this_present_recordNumber || that_present_recordNumber) {
      if (!(this_present_recordNumber && that_present_recordNumber))
        return false;
      if (!this.recordNumber.equals(that.recordNumber))
        return false;
    }

    boolean this_present_recordedBy = true && this.isSetRecordedBy();
    boolean that_present_recordedBy = true && that.isSetRecordedBy();
    if (this_present_recordedBy || that_present_recordedBy) {
      if (!(this_present_recordedBy && that_present_recordedBy))
        return false;
      if (!this.recordedBy.equals(that.recordedBy))
        return false;
    }

    boolean this_present_reproductiveCondition = true && this.isSetReproductiveCondition();
    boolean that_present_reproductiveCondition = true && that.isSetReproductiveCondition();
    if (this_present_reproductiveCondition || that_present_reproductiveCondition) {
      if (!(this_present_reproductiveCondition && that_present_reproductiveCondition))
        return false;
      if (!this.reproductiveCondition.equals(that.reproductiveCondition))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (!this.sex.equals(that.sex))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_associatedMedia = true && (isSetAssociatedMedia());
    builder.append(present_associatedMedia);
    if (present_associatedMedia)
      builder.append(associatedMedia);

    boolean present_associatedOccurrences = true && (isSetAssociatedOccurrences());
    builder.append(present_associatedOccurrences);
    if (present_associatedOccurrences)
      builder.append(associatedOccurrences);

    boolean present_associatedReferences = true && (isSetAssociatedReferences());
    builder.append(present_associatedReferences);
    if (present_associatedReferences)
      builder.append(associatedReferences);

    boolean present_associatedSequences = true && (isSetAssociatedSequences());
    builder.append(present_associatedSequences);
    if (present_associatedSequences)
      builder.append(associatedSequences);

    boolean present_associatedTaxa = true && (isSetAssociatedTaxa());
    builder.append(present_associatedTaxa);
    if (present_associatedTaxa)
      builder.append(associatedTaxa);

    boolean present_behavior = true && (isSetBehavior());
    builder.append(present_behavior);
    if (present_behavior)
      builder.append(behavior);

    boolean present_catalogNumber = true && (isSetCatalogNumber());
    builder.append(present_catalogNumber);
    if (present_catalogNumber)
      builder.append(catalogNumber);

    boolean present_disposition = true && (isSetDisposition());
    builder.append(present_disposition);
    if (present_disposition)
      builder.append(disposition);

    boolean present_establishmentMeans = true && (isSetEstablishmentMeans());
    builder.append(present_establishmentMeans);
    if (present_establishmentMeans)
      builder.append(establishmentMeans);

    boolean present_individualCount = true && (isSetIndividualCount());
    builder.append(present_individualCount);
    if (present_individualCount)
      builder.append(individualCount);

    boolean present_individualID = true && (isSetIndividualID());
    builder.append(present_individualID);
    if (present_individualID)
      builder.append(individualID);

    boolean present_lifeStage = true && (isSetLifeStage());
    builder.append(present_lifeStage);
    if (present_lifeStage)
      builder.append(lifeStage);

    boolean present_occurrenceID = true && (isSetOccurrenceID());
    builder.append(present_occurrenceID);
    if (present_occurrenceID)
      builder.append(occurrenceID);

    boolean present_occurrenceRemarks = true && (isSetOccurrenceRemarks());
    builder.append(present_occurrenceRemarks);
    if (present_occurrenceRemarks)
      builder.append(occurrenceRemarks);

    boolean present_occurrenceStatus = true && (isSetOccurrenceStatus());
    builder.append(present_occurrenceStatus);
    if (present_occurrenceStatus)
      builder.append(occurrenceStatus);

    boolean present_otherCatalogNumbers = true && (isSetOtherCatalogNumbers());
    builder.append(present_otherCatalogNumbers);
    if (present_otherCatalogNumbers)
      builder.append(otherCatalogNumbers);

    boolean present_preparations = true && (isSetPreparations());
    builder.append(present_preparations);
    if (present_preparations)
      builder.append(preparations);

    boolean present_previousIdentifications = true && (isSetPreviousIdentifications());
    builder.append(present_previousIdentifications);
    if (present_previousIdentifications)
      builder.append(previousIdentifications);

    boolean present_recordNumber = true && (isSetRecordNumber());
    builder.append(present_recordNumber);
    if (present_recordNumber)
      builder.append(recordNumber);

    boolean present_recordedBy = true && (isSetRecordedBy());
    builder.append(present_recordedBy);
    if (present_recordedBy)
      builder.append(recordedBy);

    boolean present_reproductiveCondition = true && (isSetReproductiveCondition());
    builder.append(present_reproductiveCondition);
    if (present_reproductiveCondition)
      builder.append(reproductiveCondition);

    boolean present_sex = true && (isSetSex());
    builder.append(present_sex);
    if (present_sex)
      builder.append(sex);

    return builder.toHashCode();
  }

  public int compareTo(Occurrence other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Occurrence typedOther = (Occurrence)other;

    lastComparison = Boolean.valueOf(isSetAssociatedMedia()).compareTo(typedOther.isSetAssociatedMedia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssociatedMedia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.associatedMedia, typedOther.associatedMedia);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssociatedOccurrences()).compareTo(typedOther.isSetAssociatedOccurrences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssociatedOccurrences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.associatedOccurrences, typedOther.associatedOccurrences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssociatedReferences()).compareTo(typedOther.isSetAssociatedReferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssociatedReferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.associatedReferences, typedOther.associatedReferences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssociatedSequences()).compareTo(typedOther.isSetAssociatedSequences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssociatedSequences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.associatedSequences, typedOther.associatedSequences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssociatedTaxa()).compareTo(typedOther.isSetAssociatedTaxa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssociatedTaxa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.associatedTaxa, typedOther.associatedTaxa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBehavior()).compareTo(typedOther.isSetBehavior());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBehavior()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavior, typedOther.behavior);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalogNumber()).compareTo(typedOther.isSetCatalogNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogNumber, typedOther.catalogNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisposition()).compareTo(typedOther.isSetDisposition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisposition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disposition, typedOther.disposition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstablishmentMeans()).compareTo(typedOther.isSetEstablishmentMeans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstablishmentMeans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.establishmentMeans, typedOther.establishmentMeans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndividualCount()).compareTo(typedOther.isSetIndividualCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndividualCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.individualCount, typedOther.individualCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndividualID()).compareTo(typedOther.isSetIndividualID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndividualID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.individualID, typedOther.individualID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLifeStage()).compareTo(typedOther.isSetLifeStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLifeStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lifeStage, typedOther.lifeStage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccurrenceID()).compareTo(typedOther.isSetOccurrenceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccurrenceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occurrenceID, typedOther.occurrenceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccurrenceRemarks()).compareTo(typedOther.isSetOccurrenceRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccurrenceRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occurrenceRemarks, typedOther.occurrenceRemarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccurrenceStatus()).compareTo(typedOther.isSetOccurrenceStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccurrenceStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occurrenceStatus, typedOther.occurrenceStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherCatalogNumbers()).compareTo(typedOther.isSetOtherCatalogNumbers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherCatalogNumbers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherCatalogNumbers, typedOther.otherCatalogNumbers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreparations()).compareTo(typedOther.isSetPreparations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreparations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preparations, typedOther.preparations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreviousIdentifications()).compareTo(typedOther.isSetPreviousIdentifications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviousIdentifications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previousIdentifications, typedOther.previousIdentifications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordNumber()).compareTo(typedOther.isSetRecordNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordNumber, typedOther.recordNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordedBy()).compareTo(typedOther.isSetRecordedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordedBy, typedOther.recordedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReproductiveCondition()).compareTo(typedOther.isSetReproductiveCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReproductiveCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reproductiveCondition, typedOther.reproductiveCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Occurrence(");
    boolean first = true;

    sb.append("associatedMedia:");
    if (this.associatedMedia == null) {
      sb.append("null");
    } else {
      sb.append(this.associatedMedia);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("associatedOccurrences:");
    if (this.associatedOccurrences == null) {
      sb.append("null");
    } else {
      sb.append(this.associatedOccurrences);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("associatedReferences:");
    if (this.associatedReferences == null) {
      sb.append("null");
    } else {
      sb.append(this.associatedReferences);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("associatedSequences:");
    if (this.associatedSequences == null) {
      sb.append("null");
    } else {
      sb.append(this.associatedSequences);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("associatedTaxa:");
    if (this.associatedTaxa == null) {
      sb.append("null");
    } else {
      sb.append(this.associatedTaxa);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("behavior:");
    if (this.behavior == null) {
      sb.append("null");
    } else {
      sb.append(this.behavior);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("catalogNumber:");
    if (this.catalogNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.catalogNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("disposition:");
    if (this.disposition == null) {
      sb.append("null");
    } else {
      sb.append(this.disposition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("establishmentMeans:");
    if (this.establishmentMeans == null) {
      sb.append("null");
    } else {
      sb.append(this.establishmentMeans);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("individualCount:");
    if (this.individualCount == null) {
      sb.append("null");
    } else {
      sb.append(this.individualCount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("individualID:");
    if (this.individualID == null) {
      sb.append("null");
    } else {
      sb.append(this.individualID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lifeStage:");
    if (this.lifeStage == null) {
      sb.append("null");
    } else {
      sb.append(this.lifeStage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("occurrenceID:");
    if (this.occurrenceID == null) {
      sb.append("null");
    } else {
      sb.append(this.occurrenceID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("occurrenceRemarks:");
    if (this.occurrenceRemarks == null) {
      sb.append("null");
    } else {
      sb.append(this.occurrenceRemarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("occurrenceStatus:");
    if (this.occurrenceStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.occurrenceStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherCatalogNumbers:");
    if (this.otherCatalogNumbers == null) {
      sb.append("null");
    } else {
      sb.append(this.otherCatalogNumbers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preparations:");
    if (this.preparations == null) {
      sb.append("null");
    } else {
      sb.append(this.preparations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("previousIdentifications:");
    if (this.previousIdentifications == null) {
      sb.append("null");
    } else {
      sb.append(this.previousIdentifications);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordNumber:");
    if (this.recordNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.recordNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordedBy:");
    if (this.recordedBy == null) {
      sb.append("null");
    } else {
      sb.append(this.recordedBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reproductiveCondition:");
    if (this.reproductiveCondition == null) {
      sb.append("null");
    } else {
      sb.append(this.reproductiveCondition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    if (this.sex == null) {
      sb.append("null");
    } else {
      sb.append(this.sex);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OccurrenceStandardSchemeFactory implements SchemeFactory {
    public OccurrenceStandardScheme getScheme() {
      return new OccurrenceStandardScheme();
    }
  }

  private static class OccurrenceStandardScheme extends StandardScheme<Occurrence> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Occurrence struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ASSOCIATED_MEDIA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.associatedMedia = iprot.readString();
              struct.setAssociatedMediaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ASSOCIATED_OCCURRENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.associatedOccurrences = iprot.readString();
              struct.setAssociatedOccurrencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ASSOCIATED_REFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.associatedReferences = iprot.readString();
              struct.setAssociatedReferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ASSOCIATED_SEQUENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.associatedSequences = iprot.readString();
              struct.setAssociatedSequencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ASSOCIATED_TAXA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.associatedTaxa = iprot.readString();
              struct.setAssociatedTaxaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BEHAVIOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.behavior = iprot.readString();
              struct.setBehaviorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CATALOG_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catalogNumber = iprot.readString();
              struct.setCatalogNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DISPOSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.disposition = iprot.readString();
              struct.setDispositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ESTABLISHMENT_MEANS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.establishmentMeans = iprot.readString();
              struct.setEstablishmentMeansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INDIVIDUAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.individualCount = iprot.readString();
              struct.setIndividualCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // INDIVIDUAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.individualID = iprot.readString();
              struct.setIndividualIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LIFE_STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lifeStage = iprot.readString();
              struct.setLifeStageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OCCURRENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occurrenceID = iprot.readString();
              struct.setOccurrenceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OCCURRENCE_REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occurrenceRemarks = iprot.readString();
              struct.setOccurrenceRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OCCURRENCE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occurrenceStatus = iprot.readString();
              struct.setOccurrenceStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OTHER_CATALOG_NUMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.otherCatalogNumbers = iprot.readString();
              struct.setOtherCatalogNumbersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PREPARATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.preparations = iprot.readString();
              struct.setPreparationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PREVIOUS_IDENTIFICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.previousIdentifications = iprot.readString();
              struct.setPreviousIdentificationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RECORD_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recordNumber = iprot.readString();
              struct.setRecordNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RECORDED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recordedBy = iprot.readString();
              struct.setRecordedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REPRODUCTIVE_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reproductiveCondition = iprot.readString();
              struct.setReproductiveConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sex = iprot.readString();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Occurrence struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.associatedMedia != null) {
        oprot.writeFieldBegin(ASSOCIATED_MEDIA_FIELD_DESC);
        oprot.writeString(struct.associatedMedia);
        oprot.writeFieldEnd();
      }
      if (struct.associatedOccurrences != null) {
        oprot.writeFieldBegin(ASSOCIATED_OCCURRENCES_FIELD_DESC);
        oprot.writeString(struct.associatedOccurrences);
        oprot.writeFieldEnd();
      }
      if (struct.associatedReferences != null) {
        oprot.writeFieldBegin(ASSOCIATED_REFERENCES_FIELD_DESC);
        oprot.writeString(struct.associatedReferences);
        oprot.writeFieldEnd();
      }
      if (struct.associatedSequences != null) {
        oprot.writeFieldBegin(ASSOCIATED_SEQUENCES_FIELD_DESC);
        oprot.writeString(struct.associatedSequences);
        oprot.writeFieldEnd();
      }
      if (struct.associatedTaxa != null) {
        oprot.writeFieldBegin(ASSOCIATED_TAXA_FIELD_DESC);
        oprot.writeString(struct.associatedTaxa);
        oprot.writeFieldEnd();
      }
      if (struct.behavior != null) {
        oprot.writeFieldBegin(BEHAVIOR_FIELD_DESC);
        oprot.writeString(struct.behavior);
        oprot.writeFieldEnd();
      }
      if (struct.catalogNumber != null) {
        oprot.writeFieldBegin(CATALOG_NUMBER_FIELD_DESC);
        oprot.writeString(struct.catalogNumber);
        oprot.writeFieldEnd();
      }
      if (struct.disposition != null) {
        oprot.writeFieldBegin(DISPOSITION_FIELD_DESC);
        oprot.writeString(struct.disposition);
        oprot.writeFieldEnd();
      }
      if (struct.establishmentMeans != null) {
        oprot.writeFieldBegin(ESTABLISHMENT_MEANS_FIELD_DESC);
        oprot.writeString(struct.establishmentMeans);
        oprot.writeFieldEnd();
      }
      if (struct.individualCount != null) {
        oprot.writeFieldBegin(INDIVIDUAL_COUNT_FIELD_DESC);
        oprot.writeString(struct.individualCount);
        oprot.writeFieldEnd();
      }
      if (struct.individualID != null) {
        oprot.writeFieldBegin(INDIVIDUAL_ID_FIELD_DESC);
        oprot.writeString(struct.individualID);
        oprot.writeFieldEnd();
      }
      if (struct.lifeStage != null) {
        oprot.writeFieldBegin(LIFE_STAGE_FIELD_DESC);
        oprot.writeString(struct.lifeStage);
        oprot.writeFieldEnd();
      }
      if (struct.occurrenceID != null) {
        oprot.writeFieldBegin(OCCURRENCE_ID_FIELD_DESC);
        oprot.writeString(struct.occurrenceID);
        oprot.writeFieldEnd();
      }
      if (struct.occurrenceRemarks != null) {
        oprot.writeFieldBegin(OCCURRENCE_REMARKS_FIELD_DESC);
        oprot.writeString(struct.occurrenceRemarks);
        oprot.writeFieldEnd();
      }
      if (struct.occurrenceStatus != null) {
        oprot.writeFieldBegin(OCCURRENCE_STATUS_FIELD_DESC);
        oprot.writeString(struct.occurrenceStatus);
        oprot.writeFieldEnd();
      }
      if (struct.otherCatalogNumbers != null) {
        oprot.writeFieldBegin(OTHER_CATALOG_NUMBERS_FIELD_DESC);
        oprot.writeString(struct.otherCatalogNumbers);
        oprot.writeFieldEnd();
      }
      if (struct.preparations != null) {
        oprot.writeFieldBegin(PREPARATIONS_FIELD_DESC);
        oprot.writeString(struct.preparations);
        oprot.writeFieldEnd();
      }
      if (struct.previousIdentifications != null) {
        oprot.writeFieldBegin(PREVIOUS_IDENTIFICATIONS_FIELD_DESC);
        oprot.writeString(struct.previousIdentifications);
        oprot.writeFieldEnd();
      }
      if (struct.recordNumber != null) {
        oprot.writeFieldBegin(RECORD_NUMBER_FIELD_DESC);
        oprot.writeString(struct.recordNumber);
        oprot.writeFieldEnd();
      }
      if (struct.recordedBy != null) {
        oprot.writeFieldBegin(RECORDED_BY_FIELD_DESC);
        oprot.writeString(struct.recordedBy);
        oprot.writeFieldEnd();
      }
      if (struct.reproductiveCondition != null) {
        oprot.writeFieldBegin(REPRODUCTIVE_CONDITION_FIELD_DESC);
        oprot.writeString(struct.reproductiveCondition);
        oprot.writeFieldEnd();
      }
      if (struct.sex != null) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeString(struct.sex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OccurrenceTupleSchemeFactory implements SchemeFactory {
    public OccurrenceTupleScheme getScheme() {
      return new OccurrenceTupleScheme();
    }
  }

  private static class OccurrenceTupleScheme extends TupleScheme<Occurrence> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Occurrence struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAssociatedMedia()) {
        optionals.set(0);
      }
      if (struct.isSetAssociatedOccurrences()) {
        optionals.set(1);
      }
      if (struct.isSetAssociatedReferences()) {
        optionals.set(2);
      }
      if (struct.isSetAssociatedSequences()) {
        optionals.set(3);
      }
      if (struct.isSetAssociatedTaxa()) {
        optionals.set(4);
      }
      if (struct.isSetBehavior()) {
        optionals.set(5);
      }
      if (struct.isSetCatalogNumber()) {
        optionals.set(6);
      }
      if (struct.isSetDisposition()) {
        optionals.set(7);
      }
      if (struct.isSetEstablishmentMeans()) {
        optionals.set(8);
      }
      if (struct.isSetIndividualCount()) {
        optionals.set(9);
      }
      if (struct.isSetIndividualID()) {
        optionals.set(10);
      }
      if (struct.isSetLifeStage()) {
        optionals.set(11);
      }
      if (struct.isSetOccurrenceID()) {
        optionals.set(12);
      }
      if (struct.isSetOccurrenceRemarks()) {
        optionals.set(13);
      }
      if (struct.isSetOccurrenceStatus()) {
        optionals.set(14);
      }
      if (struct.isSetOtherCatalogNumbers()) {
        optionals.set(15);
      }
      if (struct.isSetPreparations()) {
        optionals.set(16);
      }
      if (struct.isSetPreviousIdentifications()) {
        optionals.set(17);
      }
      if (struct.isSetRecordNumber()) {
        optionals.set(18);
      }
      if (struct.isSetRecordedBy()) {
        optionals.set(19);
      }
      if (struct.isSetReproductiveCondition()) {
        optionals.set(20);
      }
      if (struct.isSetSex()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetAssociatedMedia()) {
        oprot.writeString(struct.associatedMedia);
      }
      if (struct.isSetAssociatedOccurrences()) {
        oprot.writeString(struct.associatedOccurrences);
      }
      if (struct.isSetAssociatedReferences()) {
        oprot.writeString(struct.associatedReferences);
      }
      if (struct.isSetAssociatedSequences()) {
        oprot.writeString(struct.associatedSequences);
      }
      if (struct.isSetAssociatedTaxa()) {
        oprot.writeString(struct.associatedTaxa);
      }
      if (struct.isSetBehavior()) {
        oprot.writeString(struct.behavior);
      }
      if (struct.isSetCatalogNumber()) {
        oprot.writeString(struct.catalogNumber);
      }
      if (struct.isSetDisposition()) {
        oprot.writeString(struct.disposition);
      }
      if (struct.isSetEstablishmentMeans()) {
        oprot.writeString(struct.establishmentMeans);
      }
      if (struct.isSetIndividualCount()) {
        oprot.writeString(struct.individualCount);
      }
      if (struct.isSetIndividualID()) {
        oprot.writeString(struct.individualID);
      }
      if (struct.isSetLifeStage()) {
        oprot.writeString(struct.lifeStage);
      }
      if (struct.isSetOccurrenceID()) {
        oprot.writeString(struct.occurrenceID);
      }
      if (struct.isSetOccurrenceRemarks()) {
        oprot.writeString(struct.occurrenceRemarks);
      }
      if (struct.isSetOccurrenceStatus()) {
        oprot.writeString(struct.occurrenceStatus);
      }
      if (struct.isSetOtherCatalogNumbers()) {
        oprot.writeString(struct.otherCatalogNumbers);
      }
      if (struct.isSetPreparations()) {
        oprot.writeString(struct.preparations);
      }
      if (struct.isSetPreviousIdentifications()) {
        oprot.writeString(struct.previousIdentifications);
      }
      if (struct.isSetRecordNumber()) {
        oprot.writeString(struct.recordNumber);
      }
      if (struct.isSetRecordedBy()) {
        oprot.writeString(struct.recordedBy);
      }
      if (struct.isSetReproductiveCondition()) {
        oprot.writeString(struct.reproductiveCondition);
      }
      if (struct.isSetSex()) {
        oprot.writeString(struct.sex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Occurrence struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.associatedMedia = iprot.readString();
        struct.setAssociatedMediaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.associatedOccurrences = iprot.readString();
        struct.setAssociatedOccurrencesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.associatedReferences = iprot.readString();
        struct.setAssociatedReferencesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.associatedSequences = iprot.readString();
        struct.setAssociatedSequencesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.associatedTaxa = iprot.readString();
        struct.setAssociatedTaxaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.behavior = iprot.readString();
        struct.setBehaviorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.catalogNumber = iprot.readString();
        struct.setCatalogNumberIsSet(true);
      }
      if (incoming.get(7)) {
        struct.disposition = iprot.readString();
        struct.setDispositionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.establishmentMeans = iprot.readString();
        struct.setEstablishmentMeansIsSet(true);
      }
      if (incoming.get(9)) {
        struct.individualCount = iprot.readString();
        struct.setIndividualCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.individualID = iprot.readString();
        struct.setIndividualIDIsSet(true);
      }
      if (incoming.get(11)) {
        struct.lifeStage = iprot.readString();
        struct.setLifeStageIsSet(true);
      }
      if (incoming.get(12)) {
        struct.occurrenceID = iprot.readString();
        struct.setOccurrenceIDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.occurrenceRemarks = iprot.readString();
        struct.setOccurrenceRemarksIsSet(true);
      }
      if (incoming.get(14)) {
        struct.occurrenceStatus = iprot.readString();
        struct.setOccurrenceStatusIsSet(true);
      }
      if (incoming.get(15)) {
        struct.otherCatalogNumbers = iprot.readString();
        struct.setOtherCatalogNumbersIsSet(true);
      }
      if (incoming.get(16)) {
        struct.preparations = iprot.readString();
        struct.setPreparationsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.previousIdentifications = iprot.readString();
        struct.setPreviousIdentificationsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.recordNumber = iprot.readString();
        struct.setRecordNumberIsSet(true);
      }
      if (incoming.get(19)) {
        struct.recordedBy = iprot.readString();
        struct.setRecordedByIsSet(true);
      }
      if (incoming.get(20)) {
        struct.reproductiveCondition = iprot.readString();
        struct.setReproductiveConditionIsSet(true);
      }
      if (incoming.get(21)) {
        struct.sex = iprot.readString();
        struct.setSexIsSet(true);
      }
    }
  }

}

