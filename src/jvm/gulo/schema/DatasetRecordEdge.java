/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Edge between a Dataset and one of its Records.
 */
public class DatasetRecordEdge implements org.apache.thrift.TBase<DatasetRecordEdge, DatasetRecordEdge._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DatasetRecordEdge");

  private static final org.apache.thrift.protocol.TField DATA_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSet", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DatasetRecordEdgeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DatasetRecordEdgeTupleSchemeFactory());
  }

  public DatasetID dataSet; // required
  public RecordID record; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA_SET((short)1, "dataSet"),
    RECORD((short)2, "record");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_SET
          return DATA_SET;
        case 2: // RECORD
          return RECORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_SET, new org.apache.thrift.meta_data.FieldMetaData("dataSet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DatasetID.class)));
    tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordID.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DatasetRecordEdge.class, metaDataMap);
  }

  public DatasetRecordEdge() {
  }

  public DatasetRecordEdge(
    DatasetID dataSet,
    RecordID record)
  {
    this();
    this.dataSet = dataSet;
    this.record = record;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DatasetRecordEdge(DatasetRecordEdge other) {
    if (other.isSetDataSet()) {
      this.dataSet = new DatasetID(other.dataSet);
    }
    if (other.isSetRecord()) {
      this.record = new RecordID(other.record);
    }
  }

  public DatasetRecordEdge deepCopy() {
    return new DatasetRecordEdge(this);
  }

  @Override
  public void clear() {
    this.dataSet = null;
    this.record = null;
  }

  public DatasetID getDataSet() {
    return this.dataSet;
  }

  public DatasetRecordEdge setDataSet(DatasetID dataSet) {
    this.dataSet = dataSet;
    return this;
  }

  public void unsetDataSet() {
    this.dataSet = null;
  }

  /** Returns true if field dataSet is set (has been assigned a value) and false otherwise */
  public boolean isSetDataSet() {
    return this.dataSet != null;
  }

  public void setDataSetIsSet(boolean value) {
    if (!value) {
      this.dataSet = null;
    }
  }

  public RecordID getRecord() {
    return this.record;
  }

  public DatasetRecordEdge setRecord(RecordID record) {
    this.record = record;
    return this;
  }

  public void unsetRecord() {
    this.record = null;
  }

  /** Returns true if field record is set (has been assigned a value) and false otherwise */
  public boolean isSetRecord() {
    return this.record != null;
  }

  public void setRecordIsSet(boolean value) {
    if (!value) {
      this.record = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA_SET:
      if (value == null) {
        unsetDataSet();
      } else {
        setDataSet((DatasetID)value);
      }
      break;

    case RECORD:
      if (value == null) {
        unsetRecord();
      } else {
        setRecord((RecordID)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_SET:
      return getDataSet();

    case RECORD:
      return getRecord();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA_SET:
      return isSetDataSet();
    case RECORD:
      return isSetRecord();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DatasetRecordEdge)
      return this.equals((DatasetRecordEdge)that);
    return false;
  }

  public boolean equals(DatasetRecordEdge that) {
    if (that == null)
      return false;

    boolean this_present_dataSet = true && this.isSetDataSet();
    boolean that_present_dataSet = true && that.isSetDataSet();
    if (this_present_dataSet || that_present_dataSet) {
      if (!(this_present_dataSet && that_present_dataSet))
        return false;
      if (!this.dataSet.equals(that.dataSet))
        return false;
    }

    boolean this_present_record = true && this.isSetRecord();
    boolean that_present_record = true && that.isSetRecord();
    if (this_present_record || that_present_record) {
      if (!(this_present_record && that_present_record))
        return false;
      if (!this.record.equals(that.record))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_dataSet = true && (isSetDataSet());
    builder.append(present_dataSet);
    if (present_dataSet)
      builder.append(dataSet);

    boolean present_record = true && (isSetRecord());
    builder.append(present_record);
    if (present_record)
      builder.append(record);

    return builder.toHashCode();
  }

  public int compareTo(DatasetRecordEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DatasetRecordEdge typedOther = (DatasetRecordEdge)other;

    lastComparison = Boolean.valueOf(isSetDataSet()).compareTo(typedOther.isSetDataSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSet, typedOther.dataSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecord()).compareTo(typedOther.isSetRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, typedOther.record);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DatasetRecordEdge(");
    boolean first = true;

    sb.append("dataSet:");
    if (this.dataSet == null) {
      sb.append("null");
    } else {
      sb.append(this.dataSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("record:");
    if (this.record == null) {
      sb.append("null");
    } else {
      sb.append(this.record);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (dataSet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataSet' was not present! Struct: " + toString());
    }
    if (record == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'record' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DatasetRecordEdgeStandardSchemeFactory implements SchemeFactory {
    public DatasetRecordEdgeStandardScheme getScheme() {
      return new DatasetRecordEdgeStandardScheme();
    }
  }

  private static class DatasetRecordEdgeStandardScheme extends StandardScheme<DatasetRecordEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DatasetRecordEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dataSet = new DatasetID();
              struct.dataSet.read(iprot);
              struct.setDataSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.record = new RecordID();
              struct.record.read(iprot);
              struct.setRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DatasetRecordEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dataSet != null) {
        oprot.writeFieldBegin(DATA_SET_FIELD_DESC);
        struct.dataSet.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.record != null) {
        oprot.writeFieldBegin(RECORD_FIELD_DESC);
        struct.record.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DatasetRecordEdgeTupleSchemeFactory implements SchemeFactory {
    public DatasetRecordEdgeTupleScheme getScheme() {
      return new DatasetRecordEdgeTupleScheme();
    }
  }

  private static class DatasetRecordEdgeTupleScheme extends TupleScheme<DatasetRecordEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DatasetRecordEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.dataSet.write(oprot);
      struct.record.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DatasetRecordEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.dataSet = new DatasetID();
      struct.dataSet.read(iprot);
      struct.setDataSetIsSet(true);
      struct.record = new RecordID();
      struct.record.read(iprot);
      struct.setRecordIsSet(true);
    }
  }

}

