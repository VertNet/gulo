/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Darwin Core Identification class structure.
 * 
 * http://rs.tdwg.org/dwc/terms/index.htm#Identification
 */
public class Identification implements org.apache.thrift.TBase<Identification, Identification._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Identification");

  private static final org.apache.thrift.protocol.TField IDENTIFICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("identificationID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IDENTIFIED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("identifiedBy", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATE_IDENTIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("dateIdentified", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IDENTIFICATION_REFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("identificationReferences", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IDENTIFICATION_VERIFICATION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("identificationVerificationStatus", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IDENTIFICATION_REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("identificationRemarks", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IDENTIFICATION_QUALIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identificationQualifier", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("typeStatus", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IdentificationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IdentificationTupleSchemeFactory());
  }

  public String identificationID; // required
  public String identifiedBy; // required
  public String dateIdentified; // required
  public String identificationReferences; // required
  public String identificationVerificationStatus; // required
  public String identificationRemarks; // required
  public String identificationQualifier; // required
  public String typeStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDENTIFICATION_ID((short)1, "identificationID"),
    IDENTIFIED_BY((short)2, "identifiedBy"),
    DATE_IDENTIFIED((short)3, "dateIdentified"),
    IDENTIFICATION_REFERENCES((short)4, "identificationReferences"),
    IDENTIFICATION_VERIFICATION_STATUS((short)5, "identificationVerificationStatus"),
    IDENTIFICATION_REMARKS((short)6, "identificationRemarks"),
    IDENTIFICATION_QUALIFIER((short)7, "identificationQualifier"),
    TYPE_STATUS((short)8, "typeStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDENTIFICATION_ID
          return IDENTIFICATION_ID;
        case 2: // IDENTIFIED_BY
          return IDENTIFIED_BY;
        case 3: // DATE_IDENTIFIED
          return DATE_IDENTIFIED;
        case 4: // IDENTIFICATION_REFERENCES
          return IDENTIFICATION_REFERENCES;
        case 5: // IDENTIFICATION_VERIFICATION_STATUS
          return IDENTIFICATION_VERIFICATION_STATUS;
        case 6: // IDENTIFICATION_REMARKS
          return IDENTIFICATION_REMARKS;
        case 7: // IDENTIFICATION_QUALIFIER
          return IDENTIFICATION_QUALIFIER;
        case 8: // TYPE_STATUS
          return TYPE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDENTIFICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("identificationID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTIFIED_BY, new org.apache.thrift.meta_data.FieldMetaData("identifiedBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_IDENTIFIED, new org.apache.thrift.meta_data.FieldMetaData("dateIdentified", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTIFICATION_REFERENCES, new org.apache.thrift.meta_data.FieldMetaData("identificationReferences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTIFICATION_VERIFICATION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("identificationVerificationStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTIFICATION_REMARKS, new org.apache.thrift.meta_data.FieldMetaData("identificationRemarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTIFICATION_QUALIFIER, new org.apache.thrift.meta_data.FieldMetaData("identificationQualifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("typeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Identification.class, metaDataMap);
  }

  public Identification() {
  }

  public Identification(
    String identificationID,
    String identifiedBy,
    String dateIdentified,
    String identificationReferences,
    String identificationVerificationStatus,
    String identificationRemarks,
    String identificationQualifier,
    String typeStatus)
  {
    this();
    this.identificationID = identificationID;
    this.identifiedBy = identifiedBy;
    this.dateIdentified = dateIdentified;
    this.identificationReferences = identificationReferences;
    this.identificationVerificationStatus = identificationVerificationStatus;
    this.identificationRemarks = identificationRemarks;
    this.identificationQualifier = identificationQualifier;
    this.typeStatus = typeStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Identification(Identification other) {
    if (other.isSetIdentificationID()) {
      this.identificationID = other.identificationID;
    }
    if (other.isSetIdentifiedBy()) {
      this.identifiedBy = other.identifiedBy;
    }
    if (other.isSetDateIdentified()) {
      this.dateIdentified = other.dateIdentified;
    }
    if (other.isSetIdentificationReferences()) {
      this.identificationReferences = other.identificationReferences;
    }
    if (other.isSetIdentificationVerificationStatus()) {
      this.identificationVerificationStatus = other.identificationVerificationStatus;
    }
    if (other.isSetIdentificationRemarks()) {
      this.identificationRemarks = other.identificationRemarks;
    }
    if (other.isSetIdentificationQualifier()) {
      this.identificationQualifier = other.identificationQualifier;
    }
    if (other.isSetTypeStatus()) {
      this.typeStatus = other.typeStatus;
    }
  }

  public Identification deepCopy() {
    return new Identification(this);
  }

  @Override
  public void clear() {
    this.identificationID = null;
    this.identifiedBy = null;
    this.dateIdentified = null;
    this.identificationReferences = null;
    this.identificationVerificationStatus = null;
    this.identificationRemarks = null;
    this.identificationQualifier = null;
    this.typeStatus = null;
  }

  public String getIdentificationID() {
    return this.identificationID;
  }

  public Identification setIdentificationID(String identificationID) {
    this.identificationID = identificationID;
    return this;
  }

  public void unsetIdentificationID() {
    this.identificationID = null;
  }

  /** Returns true if field identificationID is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentificationID() {
    return this.identificationID != null;
  }

  public void setIdentificationIDIsSet(boolean value) {
    if (!value) {
      this.identificationID = null;
    }
  }

  public String getIdentifiedBy() {
    return this.identifiedBy;
  }

  public Identification setIdentifiedBy(String identifiedBy) {
    this.identifiedBy = identifiedBy;
    return this;
  }

  public void unsetIdentifiedBy() {
    this.identifiedBy = null;
  }

  /** Returns true if field identifiedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifiedBy() {
    return this.identifiedBy != null;
  }

  public void setIdentifiedByIsSet(boolean value) {
    if (!value) {
      this.identifiedBy = null;
    }
  }

  public String getDateIdentified() {
    return this.dateIdentified;
  }

  public Identification setDateIdentified(String dateIdentified) {
    this.dateIdentified = dateIdentified;
    return this;
  }

  public void unsetDateIdentified() {
    this.dateIdentified = null;
  }

  /** Returns true if field dateIdentified is set (has been assigned a value) and false otherwise */
  public boolean isSetDateIdentified() {
    return this.dateIdentified != null;
  }

  public void setDateIdentifiedIsSet(boolean value) {
    if (!value) {
      this.dateIdentified = null;
    }
  }

  public String getIdentificationReferences() {
    return this.identificationReferences;
  }

  public Identification setIdentificationReferences(String identificationReferences) {
    this.identificationReferences = identificationReferences;
    return this;
  }

  public void unsetIdentificationReferences() {
    this.identificationReferences = null;
  }

  /** Returns true if field identificationReferences is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentificationReferences() {
    return this.identificationReferences != null;
  }

  public void setIdentificationReferencesIsSet(boolean value) {
    if (!value) {
      this.identificationReferences = null;
    }
  }

  public String getIdentificationVerificationStatus() {
    return this.identificationVerificationStatus;
  }

  public Identification setIdentificationVerificationStatus(String identificationVerificationStatus) {
    this.identificationVerificationStatus = identificationVerificationStatus;
    return this;
  }

  public void unsetIdentificationVerificationStatus() {
    this.identificationVerificationStatus = null;
  }

  /** Returns true if field identificationVerificationStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentificationVerificationStatus() {
    return this.identificationVerificationStatus != null;
  }

  public void setIdentificationVerificationStatusIsSet(boolean value) {
    if (!value) {
      this.identificationVerificationStatus = null;
    }
  }

  public String getIdentificationRemarks() {
    return this.identificationRemarks;
  }

  public Identification setIdentificationRemarks(String identificationRemarks) {
    this.identificationRemarks = identificationRemarks;
    return this;
  }

  public void unsetIdentificationRemarks() {
    this.identificationRemarks = null;
  }

  /** Returns true if field identificationRemarks is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentificationRemarks() {
    return this.identificationRemarks != null;
  }

  public void setIdentificationRemarksIsSet(boolean value) {
    if (!value) {
      this.identificationRemarks = null;
    }
  }

  public String getIdentificationQualifier() {
    return this.identificationQualifier;
  }

  public Identification setIdentificationQualifier(String identificationQualifier) {
    this.identificationQualifier = identificationQualifier;
    return this;
  }

  public void unsetIdentificationQualifier() {
    this.identificationQualifier = null;
  }

  /** Returns true if field identificationQualifier is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentificationQualifier() {
    return this.identificationQualifier != null;
  }

  public void setIdentificationQualifierIsSet(boolean value) {
    if (!value) {
      this.identificationQualifier = null;
    }
  }

  public String getTypeStatus() {
    return this.typeStatus;
  }

  public Identification setTypeStatus(String typeStatus) {
    this.typeStatus = typeStatus;
    return this;
  }

  public void unsetTypeStatus() {
    this.typeStatus = null;
  }

  /** Returns true if field typeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeStatus() {
    return this.typeStatus != null;
  }

  public void setTypeStatusIsSet(boolean value) {
    if (!value) {
      this.typeStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDENTIFICATION_ID:
      if (value == null) {
        unsetIdentificationID();
      } else {
        setIdentificationID((String)value);
      }
      break;

    case IDENTIFIED_BY:
      if (value == null) {
        unsetIdentifiedBy();
      } else {
        setIdentifiedBy((String)value);
      }
      break;

    case DATE_IDENTIFIED:
      if (value == null) {
        unsetDateIdentified();
      } else {
        setDateIdentified((String)value);
      }
      break;

    case IDENTIFICATION_REFERENCES:
      if (value == null) {
        unsetIdentificationReferences();
      } else {
        setIdentificationReferences((String)value);
      }
      break;

    case IDENTIFICATION_VERIFICATION_STATUS:
      if (value == null) {
        unsetIdentificationVerificationStatus();
      } else {
        setIdentificationVerificationStatus((String)value);
      }
      break;

    case IDENTIFICATION_REMARKS:
      if (value == null) {
        unsetIdentificationRemarks();
      } else {
        setIdentificationRemarks((String)value);
      }
      break;

    case IDENTIFICATION_QUALIFIER:
      if (value == null) {
        unsetIdentificationQualifier();
      } else {
        setIdentificationQualifier((String)value);
      }
      break;

    case TYPE_STATUS:
      if (value == null) {
        unsetTypeStatus();
      } else {
        setTypeStatus((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDENTIFICATION_ID:
      return getIdentificationID();

    case IDENTIFIED_BY:
      return getIdentifiedBy();

    case DATE_IDENTIFIED:
      return getDateIdentified();

    case IDENTIFICATION_REFERENCES:
      return getIdentificationReferences();

    case IDENTIFICATION_VERIFICATION_STATUS:
      return getIdentificationVerificationStatus();

    case IDENTIFICATION_REMARKS:
      return getIdentificationRemarks();

    case IDENTIFICATION_QUALIFIER:
      return getIdentificationQualifier();

    case TYPE_STATUS:
      return getTypeStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDENTIFICATION_ID:
      return isSetIdentificationID();
    case IDENTIFIED_BY:
      return isSetIdentifiedBy();
    case DATE_IDENTIFIED:
      return isSetDateIdentified();
    case IDENTIFICATION_REFERENCES:
      return isSetIdentificationReferences();
    case IDENTIFICATION_VERIFICATION_STATUS:
      return isSetIdentificationVerificationStatus();
    case IDENTIFICATION_REMARKS:
      return isSetIdentificationRemarks();
    case IDENTIFICATION_QUALIFIER:
      return isSetIdentificationQualifier();
    case TYPE_STATUS:
      return isSetTypeStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Identification)
      return this.equals((Identification)that);
    return false;
  }

  public boolean equals(Identification that) {
    if (that == null)
      return false;

    boolean this_present_identificationID = true && this.isSetIdentificationID();
    boolean that_present_identificationID = true && that.isSetIdentificationID();
    if (this_present_identificationID || that_present_identificationID) {
      if (!(this_present_identificationID && that_present_identificationID))
        return false;
      if (!this.identificationID.equals(that.identificationID))
        return false;
    }

    boolean this_present_identifiedBy = true && this.isSetIdentifiedBy();
    boolean that_present_identifiedBy = true && that.isSetIdentifiedBy();
    if (this_present_identifiedBy || that_present_identifiedBy) {
      if (!(this_present_identifiedBy && that_present_identifiedBy))
        return false;
      if (!this.identifiedBy.equals(that.identifiedBy))
        return false;
    }

    boolean this_present_dateIdentified = true && this.isSetDateIdentified();
    boolean that_present_dateIdentified = true && that.isSetDateIdentified();
    if (this_present_dateIdentified || that_present_dateIdentified) {
      if (!(this_present_dateIdentified && that_present_dateIdentified))
        return false;
      if (!this.dateIdentified.equals(that.dateIdentified))
        return false;
    }

    boolean this_present_identificationReferences = true && this.isSetIdentificationReferences();
    boolean that_present_identificationReferences = true && that.isSetIdentificationReferences();
    if (this_present_identificationReferences || that_present_identificationReferences) {
      if (!(this_present_identificationReferences && that_present_identificationReferences))
        return false;
      if (!this.identificationReferences.equals(that.identificationReferences))
        return false;
    }

    boolean this_present_identificationVerificationStatus = true && this.isSetIdentificationVerificationStatus();
    boolean that_present_identificationVerificationStatus = true && that.isSetIdentificationVerificationStatus();
    if (this_present_identificationVerificationStatus || that_present_identificationVerificationStatus) {
      if (!(this_present_identificationVerificationStatus && that_present_identificationVerificationStatus))
        return false;
      if (!this.identificationVerificationStatus.equals(that.identificationVerificationStatus))
        return false;
    }

    boolean this_present_identificationRemarks = true && this.isSetIdentificationRemarks();
    boolean that_present_identificationRemarks = true && that.isSetIdentificationRemarks();
    if (this_present_identificationRemarks || that_present_identificationRemarks) {
      if (!(this_present_identificationRemarks && that_present_identificationRemarks))
        return false;
      if (!this.identificationRemarks.equals(that.identificationRemarks))
        return false;
    }

    boolean this_present_identificationQualifier = true && this.isSetIdentificationQualifier();
    boolean that_present_identificationQualifier = true && that.isSetIdentificationQualifier();
    if (this_present_identificationQualifier || that_present_identificationQualifier) {
      if (!(this_present_identificationQualifier && that_present_identificationQualifier))
        return false;
      if (!this.identificationQualifier.equals(that.identificationQualifier))
        return false;
    }

    boolean this_present_typeStatus = true && this.isSetTypeStatus();
    boolean that_present_typeStatus = true && that.isSetTypeStatus();
    if (this_present_typeStatus || that_present_typeStatus) {
      if (!(this_present_typeStatus && that_present_typeStatus))
        return false;
      if (!this.typeStatus.equals(that.typeStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_identificationID = true && (isSetIdentificationID());
    builder.append(present_identificationID);
    if (present_identificationID)
      builder.append(identificationID);

    boolean present_identifiedBy = true && (isSetIdentifiedBy());
    builder.append(present_identifiedBy);
    if (present_identifiedBy)
      builder.append(identifiedBy);

    boolean present_dateIdentified = true && (isSetDateIdentified());
    builder.append(present_dateIdentified);
    if (present_dateIdentified)
      builder.append(dateIdentified);

    boolean present_identificationReferences = true && (isSetIdentificationReferences());
    builder.append(present_identificationReferences);
    if (present_identificationReferences)
      builder.append(identificationReferences);

    boolean present_identificationVerificationStatus = true && (isSetIdentificationVerificationStatus());
    builder.append(present_identificationVerificationStatus);
    if (present_identificationVerificationStatus)
      builder.append(identificationVerificationStatus);

    boolean present_identificationRemarks = true && (isSetIdentificationRemarks());
    builder.append(present_identificationRemarks);
    if (present_identificationRemarks)
      builder.append(identificationRemarks);

    boolean present_identificationQualifier = true && (isSetIdentificationQualifier());
    builder.append(present_identificationQualifier);
    if (present_identificationQualifier)
      builder.append(identificationQualifier);

    boolean present_typeStatus = true && (isSetTypeStatus());
    builder.append(present_typeStatus);
    if (present_typeStatus)
      builder.append(typeStatus);

    return builder.toHashCode();
  }

  public int compareTo(Identification other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Identification typedOther = (Identification)other;

    lastComparison = Boolean.valueOf(isSetIdentificationID()).compareTo(typedOther.isSetIdentificationID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentificationID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identificationID, typedOther.identificationID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifiedBy()).compareTo(typedOther.isSetIdentifiedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifiedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifiedBy, typedOther.identifiedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateIdentified()).compareTo(typedOther.isSetDateIdentified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateIdentified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateIdentified, typedOther.dateIdentified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentificationReferences()).compareTo(typedOther.isSetIdentificationReferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentificationReferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identificationReferences, typedOther.identificationReferences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentificationVerificationStatus()).compareTo(typedOther.isSetIdentificationVerificationStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentificationVerificationStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identificationVerificationStatus, typedOther.identificationVerificationStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentificationRemarks()).compareTo(typedOther.isSetIdentificationRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentificationRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identificationRemarks, typedOther.identificationRemarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentificationQualifier()).compareTo(typedOther.isSetIdentificationQualifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentificationQualifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identificationQualifier, typedOther.identificationQualifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeStatus()).compareTo(typedOther.isSetTypeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeStatus, typedOther.typeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Identification(");
    boolean first = true;

    sb.append("identificationID:");
    if (this.identificationID == null) {
      sb.append("null");
    } else {
      sb.append(this.identificationID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifiedBy:");
    if (this.identifiedBy == null) {
      sb.append("null");
    } else {
      sb.append(this.identifiedBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateIdentified:");
    if (this.dateIdentified == null) {
      sb.append("null");
    } else {
      sb.append(this.dateIdentified);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identificationReferences:");
    if (this.identificationReferences == null) {
      sb.append("null");
    } else {
      sb.append(this.identificationReferences);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identificationVerificationStatus:");
    if (this.identificationVerificationStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.identificationVerificationStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identificationRemarks:");
    if (this.identificationRemarks == null) {
      sb.append("null");
    } else {
      sb.append(this.identificationRemarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identificationQualifier:");
    if (this.identificationQualifier == null) {
      sb.append("null");
    } else {
      sb.append(this.identificationQualifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeStatus:");
    if (this.typeStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.typeStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IdentificationStandardSchemeFactory implements SchemeFactory {
    public IdentificationStandardScheme getScheme() {
      return new IdentificationStandardScheme();
    }
  }

  private static class IdentificationStandardScheme extends StandardScheme<Identification> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Identification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDENTIFICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identificationID = iprot.readString();
              struct.setIdentificationIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IDENTIFIED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifiedBy = iprot.readString();
              struct.setIdentifiedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATE_IDENTIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateIdentified = iprot.readString();
              struct.setDateIdentifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IDENTIFICATION_REFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identificationReferences = iprot.readString();
              struct.setIdentificationReferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IDENTIFICATION_VERIFICATION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identificationVerificationStatus = iprot.readString();
              struct.setIdentificationVerificationStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IDENTIFICATION_REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identificationRemarks = iprot.readString();
              struct.setIdentificationRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IDENTIFICATION_QUALIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identificationQualifier = iprot.readString();
              struct.setIdentificationQualifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TYPE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.typeStatus = iprot.readString();
              struct.setTypeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Identification struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.identificationID != null) {
        oprot.writeFieldBegin(IDENTIFICATION_ID_FIELD_DESC);
        oprot.writeString(struct.identificationID);
        oprot.writeFieldEnd();
      }
      if (struct.identifiedBy != null) {
        oprot.writeFieldBegin(IDENTIFIED_BY_FIELD_DESC);
        oprot.writeString(struct.identifiedBy);
        oprot.writeFieldEnd();
      }
      if (struct.dateIdentified != null) {
        oprot.writeFieldBegin(DATE_IDENTIFIED_FIELD_DESC);
        oprot.writeString(struct.dateIdentified);
        oprot.writeFieldEnd();
      }
      if (struct.identificationReferences != null) {
        oprot.writeFieldBegin(IDENTIFICATION_REFERENCES_FIELD_DESC);
        oprot.writeString(struct.identificationReferences);
        oprot.writeFieldEnd();
      }
      if (struct.identificationVerificationStatus != null) {
        oprot.writeFieldBegin(IDENTIFICATION_VERIFICATION_STATUS_FIELD_DESC);
        oprot.writeString(struct.identificationVerificationStatus);
        oprot.writeFieldEnd();
      }
      if (struct.identificationRemarks != null) {
        oprot.writeFieldBegin(IDENTIFICATION_REMARKS_FIELD_DESC);
        oprot.writeString(struct.identificationRemarks);
        oprot.writeFieldEnd();
      }
      if (struct.identificationQualifier != null) {
        oprot.writeFieldBegin(IDENTIFICATION_QUALIFIER_FIELD_DESC);
        oprot.writeString(struct.identificationQualifier);
        oprot.writeFieldEnd();
      }
      if (struct.typeStatus != null) {
        oprot.writeFieldBegin(TYPE_STATUS_FIELD_DESC);
        oprot.writeString(struct.typeStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IdentificationTupleSchemeFactory implements SchemeFactory {
    public IdentificationTupleScheme getScheme() {
      return new IdentificationTupleScheme();
    }
  }

  private static class IdentificationTupleScheme extends TupleScheme<Identification> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Identification struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIdentificationID()) {
        optionals.set(0);
      }
      if (struct.isSetIdentifiedBy()) {
        optionals.set(1);
      }
      if (struct.isSetDateIdentified()) {
        optionals.set(2);
      }
      if (struct.isSetIdentificationReferences()) {
        optionals.set(3);
      }
      if (struct.isSetIdentificationVerificationStatus()) {
        optionals.set(4);
      }
      if (struct.isSetIdentificationRemarks()) {
        optionals.set(5);
      }
      if (struct.isSetIdentificationQualifier()) {
        optionals.set(6);
      }
      if (struct.isSetTypeStatus()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetIdentificationID()) {
        oprot.writeString(struct.identificationID);
      }
      if (struct.isSetIdentifiedBy()) {
        oprot.writeString(struct.identifiedBy);
      }
      if (struct.isSetDateIdentified()) {
        oprot.writeString(struct.dateIdentified);
      }
      if (struct.isSetIdentificationReferences()) {
        oprot.writeString(struct.identificationReferences);
      }
      if (struct.isSetIdentificationVerificationStatus()) {
        oprot.writeString(struct.identificationVerificationStatus);
      }
      if (struct.isSetIdentificationRemarks()) {
        oprot.writeString(struct.identificationRemarks);
      }
      if (struct.isSetIdentificationQualifier()) {
        oprot.writeString(struct.identificationQualifier);
      }
      if (struct.isSetTypeStatus()) {
        oprot.writeString(struct.typeStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Identification struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.identificationID = iprot.readString();
        struct.setIdentificationIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.identifiedBy = iprot.readString();
        struct.setIdentifiedByIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dateIdentified = iprot.readString();
        struct.setDateIdentifiedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.identificationReferences = iprot.readString();
        struct.setIdentificationReferencesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.identificationVerificationStatus = iprot.readString();
        struct.setIdentificationVerificationStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.identificationRemarks = iprot.readString();
        struct.setIdentificationRemarksIsSet(true);
      }
      if (incoming.get(6)) {
        struct.identificationQualifier = iprot.readString();
        struct.setIdentificationQualifierIsSet(true);
      }
      if (incoming.get(7)) {
        struct.typeStatus = iprot.readString();
        struct.setTypeStatusIsSet(true);
      }
    }
  }

}

