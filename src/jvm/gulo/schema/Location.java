/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Darwin Core Location class structure.
 * 
 * http://rs.tdwg.org/dwc/terms/index.htm#locationindex
 */
public class Location implements org.apache.thrift.TBase<Location, Location._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Location");

  private static final org.apache.thrift.protocol.TField CONTINENT_FIELD_DESC = new org.apache.thrift.protocol.TField("continent", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COORDINATE_PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinatePrecision", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COORDINATE_UNCERTAINTY_IN_METERS_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinateUncertaintyInMeters", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COUNTY_FIELD_DESC = new org.apache.thrift.protocol.TField("county", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DECIMAL_LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("decimalLatitude", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DECIMAL_LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("decimalLongitude", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FOOTPRINT_SRS_FIELD_DESC = new org.apache.thrift.protocol.TField("footprintSRS", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FOOTPRINT_SPATIAL_FIT_FIELD_DESC = new org.apache.thrift.protocol.TField("footprintSpatialFit", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FOOTPRINT_WKT_FIELD_DESC = new org.apache.thrift.protocol.TField("footprintWKT", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField GEODETIC_DATUM_FIELD_DESC = new org.apache.thrift.protocol.TField("geodeticDatum", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField GEOREFERENCE_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("georeferenceProtocol", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField GEOREFERENCE_REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("georeferenceRemarks", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField GEOREFERENCE_SOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("georeferenceSources", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField GEOREFERENCE_VERIFICATION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("georeferenceVerificationStatus", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField GEOREFERENCED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("georeferencedBy", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField GEOREFERENCED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("georeferencedDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField HIGHER_GEOGRAPHY_FIELD_DESC = new org.apache.thrift.protocol.TField("higherGeography", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField HIGHER_GEOGRAPHY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("higherGeographyID", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField ISLAND_FIELD_DESC = new org.apache.thrift.protocol.TField("island", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ISLAND_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("islandGroup", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField LOCALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("locality", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField LOCATION_ACCORDING_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("locationAccordingTo", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("locationID", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField LOCATION_REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("locationRemarks", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField MAXIMUM_DEPTH_IN_METERS_FIELD_DESC = new org.apache.thrift.protocol.TField("maximumDepthInMeters", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField MAXIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS_FIELD_DESC = new org.apache.thrift.protocol.TField("maximumDistanceAboveSurfaceInMeters", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField MAXIMUM_ELEVATION_IN_METERS_FIELD_DESC = new org.apache.thrift.protocol.TField("maximumElevationInMeters", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField MINIMUM_DEPTH_IN_METERS_FIELD_DESC = new org.apache.thrift.protocol.TField("minimumDepthInMeters", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField MINIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS_FIELD_DESC = new org.apache.thrift.protocol.TField("minimumDistanceAboveSurfaceInMeters", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField MINIMUM_ELEVATION_IN_METERS_FIELD_DESC = new org.apache.thrift.protocol.TField("minimumElevationInMeters", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField MUNICIPALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("municipality", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField POINT_RADIUS_SPATIAL_FIT_FIELD_DESC = new org.apache.thrift.protocol.TField("pointRadiusSpatialFit", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField STATE_PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("stateProvince", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField VERBATIM_COORDINATE_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("verbatimCoordinateSystem", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField VERBATIM_COORDINATES_FIELD_DESC = new org.apache.thrift.protocol.TField("verbatimCoordinates", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField VERBATIM_DEPTH_FIELD_DESC = new org.apache.thrift.protocol.TField("verbatimDepth", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField VERBATIM_ELEVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("verbatimElevation", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField VERBATIM_LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("verbatimLatitude", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField VERBATIM_LOCALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("verbatimLocality", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField VERBATIM_LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("verbatimLongitude", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField VERBATIM_SRS_FIELD_DESC = new org.apache.thrift.protocol.TField("verbatimSRS", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField WATER_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("waterBody", org.apache.thrift.protocol.TType.STRING, (short)44);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LocationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LocationTupleSchemeFactory());
  }

  public String continent; // required
  public String coordinatePrecision; // required
  public String coordinateUncertaintyInMeters; // required
  public String country; // required
  public String countryCode; // required
  public String county; // required
  public String decimalLatitude; // required
  public String decimalLongitude; // required
  public String footprintSRS; // required
  public String footprintSpatialFit; // required
  public String footprintWKT; // required
  public String geodeticDatum; // required
  public String georeferenceProtocol; // required
  public String georeferenceRemarks; // required
  public String georeferenceSources; // required
  public String georeferenceVerificationStatus; // required
  public String georeferencedBy; // required
  public String georeferencedDate; // required
  public String higherGeography; // required
  public String higherGeographyID; // required
  public String island; // required
  public String islandGroup; // required
  public String locality; // required
  public String locationAccordingTo; // required
  public String locationID; // required
  public String locationRemarks; // required
  public String maximumDepthInMeters; // required
  public String maximumDistanceAboveSurfaceInMeters; // required
  public String maximumElevationInMeters; // required
  public String minimumDepthInMeters; // required
  public String minimumDistanceAboveSurfaceInMeters; // required
  public String minimumElevationInMeters; // required
  public String municipality; // required
  public String pointRadiusSpatialFit; // required
  public String stateProvince; // required
  public String verbatimCoordinateSystem; // required
  public String verbatimCoordinates; // required
  public String verbatimDepth; // required
  public String verbatimElevation; // required
  public String verbatimLatitude; // required
  public String verbatimLocality; // required
  public String verbatimLongitude; // required
  public String verbatimSRS; // required
  public String waterBody; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTINENT((short)1, "continent"),
    COORDINATE_PRECISION((short)2, "coordinatePrecision"),
    COORDINATE_UNCERTAINTY_IN_METERS((short)3, "coordinateUncertaintyInMeters"),
    COUNTRY((short)4, "country"),
    COUNTRY_CODE((short)5, "countryCode"),
    COUNTY((short)6, "county"),
    DECIMAL_LATITUDE((short)7, "decimalLatitude"),
    DECIMAL_LONGITUDE((short)8, "decimalLongitude"),
    FOOTPRINT_SRS((short)9, "footprintSRS"),
    FOOTPRINT_SPATIAL_FIT((short)10, "footprintSpatialFit"),
    FOOTPRINT_WKT((short)11, "footprintWKT"),
    GEODETIC_DATUM((short)12, "geodeticDatum"),
    GEOREFERENCE_PROTOCOL((short)13, "georeferenceProtocol"),
    GEOREFERENCE_REMARKS((short)14, "georeferenceRemarks"),
    GEOREFERENCE_SOURCES((short)15, "georeferenceSources"),
    GEOREFERENCE_VERIFICATION_STATUS((short)16, "georeferenceVerificationStatus"),
    GEOREFERENCED_BY((short)17, "georeferencedBy"),
    GEOREFERENCED_DATE((short)18, "georeferencedDate"),
    HIGHER_GEOGRAPHY((short)19, "higherGeography"),
    HIGHER_GEOGRAPHY_ID((short)20, "higherGeographyID"),
    ISLAND((short)21, "island"),
    ISLAND_GROUP((short)22, "islandGroup"),
    LOCALITY((short)23, "locality"),
    LOCATION_ACCORDING_TO((short)24, "locationAccordingTo"),
    LOCATION_ID((short)25, "locationID"),
    LOCATION_REMARKS((short)26, "locationRemarks"),
    MAXIMUM_DEPTH_IN_METERS((short)27, "maximumDepthInMeters"),
    MAXIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS((short)28, "maximumDistanceAboveSurfaceInMeters"),
    MAXIMUM_ELEVATION_IN_METERS((short)29, "maximumElevationInMeters"),
    MINIMUM_DEPTH_IN_METERS((short)30, "minimumDepthInMeters"),
    MINIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS((short)31, "minimumDistanceAboveSurfaceInMeters"),
    MINIMUM_ELEVATION_IN_METERS((short)32, "minimumElevationInMeters"),
    MUNICIPALITY((short)33, "municipality"),
    POINT_RADIUS_SPATIAL_FIT((short)34, "pointRadiusSpatialFit"),
    STATE_PROVINCE((short)35, "stateProvince"),
    VERBATIM_COORDINATE_SYSTEM((short)36, "verbatimCoordinateSystem"),
    VERBATIM_COORDINATES((short)37, "verbatimCoordinates"),
    VERBATIM_DEPTH((short)38, "verbatimDepth"),
    VERBATIM_ELEVATION((short)39, "verbatimElevation"),
    VERBATIM_LATITUDE((short)40, "verbatimLatitude"),
    VERBATIM_LOCALITY((short)41, "verbatimLocality"),
    VERBATIM_LONGITUDE((short)42, "verbatimLongitude"),
    VERBATIM_SRS((short)43, "verbatimSRS"),
    WATER_BODY((short)44, "waterBody");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTINENT
          return CONTINENT;
        case 2: // COORDINATE_PRECISION
          return COORDINATE_PRECISION;
        case 3: // COORDINATE_UNCERTAINTY_IN_METERS
          return COORDINATE_UNCERTAINTY_IN_METERS;
        case 4: // COUNTRY
          return COUNTRY;
        case 5: // COUNTRY_CODE
          return COUNTRY_CODE;
        case 6: // COUNTY
          return COUNTY;
        case 7: // DECIMAL_LATITUDE
          return DECIMAL_LATITUDE;
        case 8: // DECIMAL_LONGITUDE
          return DECIMAL_LONGITUDE;
        case 9: // FOOTPRINT_SRS
          return FOOTPRINT_SRS;
        case 10: // FOOTPRINT_SPATIAL_FIT
          return FOOTPRINT_SPATIAL_FIT;
        case 11: // FOOTPRINT_WKT
          return FOOTPRINT_WKT;
        case 12: // GEODETIC_DATUM
          return GEODETIC_DATUM;
        case 13: // GEOREFERENCE_PROTOCOL
          return GEOREFERENCE_PROTOCOL;
        case 14: // GEOREFERENCE_REMARKS
          return GEOREFERENCE_REMARKS;
        case 15: // GEOREFERENCE_SOURCES
          return GEOREFERENCE_SOURCES;
        case 16: // GEOREFERENCE_VERIFICATION_STATUS
          return GEOREFERENCE_VERIFICATION_STATUS;
        case 17: // GEOREFERENCED_BY
          return GEOREFERENCED_BY;
        case 18: // GEOREFERENCED_DATE
          return GEOREFERENCED_DATE;
        case 19: // HIGHER_GEOGRAPHY
          return HIGHER_GEOGRAPHY;
        case 20: // HIGHER_GEOGRAPHY_ID
          return HIGHER_GEOGRAPHY_ID;
        case 21: // ISLAND
          return ISLAND;
        case 22: // ISLAND_GROUP
          return ISLAND_GROUP;
        case 23: // LOCALITY
          return LOCALITY;
        case 24: // LOCATION_ACCORDING_TO
          return LOCATION_ACCORDING_TO;
        case 25: // LOCATION_ID
          return LOCATION_ID;
        case 26: // LOCATION_REMARKS
          return LOCATION_REMARKS;
        case 27: // MAXIMUM_DEPTH_IN_METERS
          return MAXIMUM_DEPTH_IN_METERS;
        case 28: // MAXIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS
          return MAXIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS;
        case 29: // MAXIMUM_ELEVATION_IN_METERS
          return MAXIMUM_ELEVATION_IN_METERS;
        case 30: // MINIMUM_DEPTH_IN_METERS
          return MINIMUM_DEPTH_IN_METERS;
        case 31: // MINIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS
          return MINIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS;
        case 32: // MINIMUM_ELEVATION_IN_METERS
          return MINIMUM_ELEVATION_IN_METERS;
        case 33: // MUNICIPALITY
          return MUNICIPALITY;
        case 34: // POINT_RADIUS_SPATIAL_FIT
          return POINT_RADIUS_SPATIAL_FIT;
        case 35: // STATE_PROVINCE
          return STATE_PROVINCE;
        case 36: // VERBATIM_COORDINATE_SYSTEM
          return VERBATIM_COORDINATE_SYSTEM;
        case 37: // VERBATIM_COORDINATES
          return VERBATIM_COORDINATES;
        case 38: // VERBATIM_DEPTH
          return VERBATIM_DEPTH;
        case 39: // VERBATIM_ELEVATION
          return VERBATIM_ELEVATION;
        case 40: // VERBATIM_LATITUDE
          return VERBATIM_LATITUDE;
        case 41: // VERBATIM_LOCALITY
          return VERBATIM_LOCALITY;
        case 42: // VERBATIM_LONGITUDE
          return VERBATIM_LONGITUDE;
        case 43: // VERBATIM_SRS
          return VERBATIM_SRS;
        case 44: // WATER_BODY
          return WATER_BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTINENT, new org.apache.thrift.meta_data.FieldMetaData("continent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COORDINATE_PRECISION, new org.apache.thrift.meta_data.FieldMetaData("coordinatePrecision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COORDINATE_UNCERTAINTY_IN_METERS, new org.apache.thrift.meta_data.FieldMetaData("coordinateUncertaintyInMeters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTY, new org.apache.thrift.meta_data.FieldMetaData("county", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DECIMAL_LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("decimalLatitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DECIMAL_LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("decimalLongitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOOTPRINT_SRS, new org.apache.thrift.meta_data.FieldMetaData("footprintSRS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOOTPRINT_SPATIAL_FIT, new org.apache.thrift.meta_data.FieldMetaData("footprintSpatialFit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOOTPRINT_WKT, new org.apache.thrift.meta_data.FieldMetaData("footprintWKT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEODETIC_DATUM, new org.apache.thrift.meta_data.FieldMetaData("geodeticDatum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEOREFERENCE_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("georeferenceProtocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEOREFERENCE_REMARKS, new org.apache.thrift.meta_data.FieldMetaData("georeferenceRemarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEOREFERENCE_SOURCES, new org.apache.thrift.meta_data.FieldMetaData("georeferenceSources", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEOREFERENCE_VERIFICATION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("georeferenceVerificationStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEOREFERENCED_BY, new org.apache.thrift.meta_data.FieldMetaData("georeferencedBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEOREFERENCED_DATE, new org.apache.thrift.meta_data.FieldMetaData("georeferencedDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHER_GEOGRAPHY, new org.apache.thrift.meta_data.FieldMetaData("higherGeography", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHER_GEOGRAPHY_ID, new org.apache.thrift.meta_data.FieldMetaData("higherGeographyID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISLAND, new org.apache.thrift.meta_data.FieldMetaData("island", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISLAND_GROUP, new org.apache.thrift.meta_data.FieldMetaData("islandGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALITY, new org.apache.thrift.meta_data.FieldMetaData("locality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION_ACCORDING_TO, new org.apache.thrift.meta_data.FieldMetaData("locationAccordingTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("locationID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION_REMARKS, new org.apache.thrift.meta_data.FieldMetaData("locationRemarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAXIMUM_DEPTH_IN_METERS, new org.apache.thrift.meta_data.FieldMetaData("maximumDepthInMeters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAXIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS, new org.apache.thrift.meta_data.FieldMetaData("maximumDistanceAboveSurfaceInMeters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAXIMUM_ELEVATION_IN_METERS, new org.apache.thrift.meta_data.FieldMetaData("maximumElevationInMeters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MINIMUM_DEPTH_IN_METERS, new org.apache.thrift.meta_data.FieldMetaData("minimumDepthInMeters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MINIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS, new org.apache.thrift.meta_data.FieldMetaData("minimumDistanceAboveSurfaceInMeters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MINIMUM_ELEVATION_IN_METERS, new org.apache.thrift.meta_data.FieldMetaData("minimumElevationInMeters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MUNICIPALITY, new org.apache.thrift.meta_data.FieldMetaData("municipality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINT_RADIUS_SPATIAL_FIT, new org.apache.thrift.meta_data.FieldMetaData("pointRadiusSpatialFit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE_PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("stateProvince", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERBATIM_COORDINATE_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("verbatimCoordinateSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERBATIM_COORDINATES, new org.apache.thrift.meta_data.FieldMetaData("verbatimCoordinates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERBATIM_DEPTH, new org.apache.thrift.meta_data.FieldMetaData("verbatimDepth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERBATIM_ELEVATION, new org.apache.thrift.meta_data.FieldMetaData("verbatimElevation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERBATIM_LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("verbatimLatitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERBATIM_LOCALITY, new org.apache.thrift.meta_data.FieldMetaData("verbatimLocality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERBATIM_LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("verbatimLongitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERBATIM_SRS, new org.apache.thrift.meta_data.FieldMetaData("verbatimSRS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WATER_BODY, new org.apache.thrift.meta_data.FieldMetaData("waterBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Location.class, metaDataMap);
  }

  public Location() {
  }

  public Location(
    String continent,
    String coordinatePrecision,
    String coordinateUncertaintyInMeters,
    String country,
    String countryCode,
    String county,
    String decimalLatitude,
    String decimalLongitude,
    String footprintSRS,
    String footprintSpatialFit,
    String footprintWKT,
    String geodeticDatum,
    String georeferenceProtocol,
    String georeferenceRemarks,
    String georeferenceSources,
    String georeferenceVerificationStatus,
    String georeferencedBy,
    String georeferencedDate,
    String higherGeography,
    String higherGeographyID,
    String island,
    String islandGroup,
    String locality,
    String locationAccordingTo,
    String locationID,
    String locationRemarks,
    String maximumDepthInMeters,
    String maximumDistanceAboveSurfaceInMeters,
    String maximumElevationInMeters,
    String minimumDepthInMeters,
    String minimumDistanceAboveSurfaceInMeters,
    String minimumElevationInMeters,
    String municipality,
    String pointRadiusSpatialFit,
    String stateProvince,
    String verbatimCoordinateSystem,
    String verbatimCoordinates,
    String verbatimDepth,
    String verbatimElevation,
    String verbatimLatitude,
    String verbatimLocality,
    String verbatimLongitude,
    String verbatimSRS,
    String waterBody)
  {
    this();
    this.continent = continent;
    this.coordinatePrecision = coordinatePrecision;
    this.coordinateUncertaintyInMeters = coordinateUncertaintyInMeters;
    this.country = country;
    this.countryCode = countryCode;
    this.county = county;
    this.decimalLatitude = decimalLatitude;
    this.decimalLongitude = decimalLongitude;
    this.footprintSRS = footprintSRS;
    this.footprintSpatialFit = footprintSpatialFit;
    this.footprintWKT = footprintWKT;
    this.geodeticDatum = geodeticDatum;
    this.georeferenceProtocol = georeferenceProtocol;
    this.georeferenceRemarks = georeferenceRemarks;
    this.georeferenceSources = georeferenceSources;
    this.georeferenceVerificationStatus = georeferenceVerificationStatus;
    this.georeferencedBy = georeferencedBy;
    this.georeferencedDate = georeferencedDate;
    this.higherGeography = higherGeography;
    this.higherGeographyID = higherGeographyID;
    this.island = island;
    this.islandGroup = islandGroup;
    this.locality = locality;
    this.locationAccordingTo = locationAccordingTo;
    this.locationID = locationID;
    this.locationRemarks = locationRemarks;
    this.maximumDepthInMeters = maximumDepthInMeters;
    this.maximumDistanceAboveSurfaceInMeters = maximumDistanceAboveSurfaceInMeters;
    this.maximumElevationInMeters = maximumElevationInMeters;
    this.minimumDepthInMeters = minimumDepthInMeters;
    this.minimumDistanceAboveSurfaceInMeters = minimumDistanceAboveSurfaceInMeters;
    this.minimumElevationInMeters = minimumElevationInMeters;
    this.municipality = municipality;
    this.pointRadiusSpatialFit = pointRadiusSpatialFit;
    this.stateProvince = stateProvince;
    this.verbatimCoordinateSystem = verbatimCoordinateSystem;
    this.verbatimCoordinates = verbatimCoordinates;
    this.verbatimDepth = verbatimDepth;
    this.verbatimElevation = verbatimElevation;
    this.verbatimLatitude = verbatimLatitude;
    this.verbatimLocality = verbatimLocality;
    this.verbatimLongitude = verbatimLongitude;
    this.verbatimSRS = verbatimSRS;
    this.waterBody = waterBody;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Location(Location other) {
    if (other.isSetContinent()) {
      this.continent = other.continent;
    }
    if (other.isSetCoordinatePrecision()) {
      this.coordinatePrecision = other.coordinatePrecision;
    }
    if (other.isSetCoordinateUncertaintyInMeters()) {
      this.coordinateUncertaintyInMeters = other.coordinateUncertaintyInMeters;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetCountryCode()) {
      this.countryCode = other.countryCode;
    }
    if (other.isSetCounty()) {
      this.county = other.county;
    }
    if (other.isSetDecimalLatitude()) {
      this.decimalLatitude = other.decimalLatitude;
    }
    if (other.isSetDecimalLongitude()) {
      this.decimalLongitude = other.decimalLongitude;
    }
    if (other.isSetFootprintSRS()) {
      this.footprintSRS = other.footprintSRS;
    }
    if (other.isSetFootprintSpatialFit()) {
      this.footprintSpatialFit = other.footprintSpatialFit;
    }
    if (other.isSetFootprintWKT()) {
      this.footprintWKT = other.footprintWKT;
    }
    if (other.isSetGeodeticDatum()) {
      this.geodeticDatum = other.geodeticDatum;
    }
    if (other.isSetGeoreferenceProtocol()) {
      this.georeferenceProtocol = other.georeferenceProtocol;
    }
    if (other.isSetGeoreferenceRemarks()) {
      this.georeferenceRemarks = other.georeferenceRemarks;
    }
    if (other.isSetGeoreferenceSources()) {
      this.georeferenceSources = other.georeferenceSources;
    }
    if (other.isSetGeoreferenceVerificationStatus()) {
      this.georeferenceVerificationStatus = other.georeferenceVerificationStatus;
    }
    if (other.isSetGeoreferencedBy()) {
      this.georeferencedBy = other.georeferencedBy;
    }
    if (other.isSetGeoreferencedDate()) {
      this.georeferencedDate = other.georeferencedDate;
    }
    if (other.isSetHigherGeography()) {
      this.higherGeography = other.higherGeography;
    }
    if (other.isSetHigherGeographyID()) {
      this.higherGeographyID = other.higherGeographyID;
    }
    if (other.isSetIsland()) {
      this.island = other.island;
    }
    if (other.isSetIslandGroup()) {
      this.islandGroup = other.islandGroup;
    }
    if (other.isSetLocality()) {
      this.locality = other.locality;
    }
    if (other.isSetLocationAccordingTo()) {
      this.locationAccordingTo = other.locationAccordingTo;
    }
    if (other.isSetLocationID()) {
      this.locationID = other.locationID;
    }
    if (other.isSetLocationRemarks()) {
      this.locationRemarks = other.locationRemarks;
    }
    if (other.isSetMaximumDepthInMeters()) {
      this.maximumDepthInMeters = other.maximumDepthInMeters;
    }
    if (other.isSetMaximumDistanceAboveSurfaceInMeters()) {
      this.maximumDistanceAboveSurfaceInMeters = other.maximumDistanceAboveSurfaceInMeters;
    }
    if (other.isSetMaximumElevationInMeters()) {
      this.maximumElevationInMeters = other.maximumElevationInMeters;
    }
    if (other.isSetMinimumDepthInMeters()) {
      this.minimumDepthInMeters = other.minimumDepthInMeters;
    }
    if (other.isSetMinimumDistanceAboveSurfaceInMeters()) {
      this.minimumDistanceAboveSurfaceInMeters = other.minimumDistanceAboveSurfaceInMeters;
    }
    if (other.isSetMinimumElevationInMeters()) {
      this.minimumElevationInMeters = other.minimumElevationInMeters;
    }
    if (other.isSetMunicipality()) {
      this.municipality = other.municipality;
    }
    if (other.isSetPointRadiusSpatialFit()) {
      this.pointRadiusSpatialFit = other.pointRadiusSpatialFit;
    }
    if (other.isSetStateProvince()) {
      this.stateProvince = other.stateProvince;
    }
    if (other.isSetVerbatimCoordinateSystem()) {
      this.verbatimCoordinateSystem = other.verbatimCoordinateSystem;
    }
    if (other.isSetVerbatimCoordinates()) {
      this.verbatimCoordinates = other.verbatimCoordinates;
    }
    if (other.isSetVerbatimDepth()) {
      this.verbatimDepth = other.verbatimDepth;
    }
    if (other.isSetVerbatimElevation()) {
      this.verbatimElevation = other.verbatimElevation;
    }
    if (other.isSetVerbatimLatitude()) {
      this.verbatimLatitude = other.verbatimLatitude;
    }
    if (other.isSetVerbatimLocality()) {
      this.verbatimLocality = other.verbatimLocality;
    }
    if (other.isSetVerbatimLongitude()) {
      this.verbatimLongitude = other.verbatimLongitude;
    }
    if (other.isSetVerbatimSRS()) {
      this.verbatimSRS = other.verbatimSRS;
    }
    if (other.isSetWaterBody()) {
      this.waterBody = other.waterBody;
    }
  }

  public Location deepCopy() {
    return new Location(this);
  }

  @Override
  public void clear() {
    this.continent = null;
    this.coordinatePrecision = null;
    this.coordinateUncertaintyInMeters = null;
    this.country = null;
    this.countryCode = null;
    this.county = null;
    this.decimalLatitude = null;
    this.decimalLongitude = null;
    this.footprintSRS = null;
    this.footprintSpatialFit = null;
    this.footprintWKT = null;
    this.geodeticDatum = null;
    this.georeferenceProtocol = null;
    this.georeferenceRemarks = null;
    this.georeferenceSources = null;
    this.georeferenceVerificationStatus = null;
    this.georeferencedBy = null;
    this.georeferencedDate = null;
    this.higherGeography = null;
    this.higherGeographyID = null;
    this.island = null;
    this.islandGroup = null;
    this.locality = null;
    this.locationAccordingTo = null;
    this.locationID = null;
    this.locationRemarks = null;
    this.maximumDepthInMeters = null;
    this.maximumDistanceAboveSurfaceInMeters = null;
    this.maximumElevationInMeters = null;
    this.minimumDepthInMeters = null;
    this.minimumDistanceAboveSurfaceInMeters = null;
    this.minimumElevationInMeters = null;
    this.municipality = null;
    this.pointRadiusSpatialFit = null;
    this.stateProvince = null;
    this.verbatimCoordinateSystem = null;
    this.verbatimCoordinates = null;
    this.verbatimDepth = null;
    this.verbatimElevation = null;
    this.verbatimLatitude = null;
    this.verbatimLocality = null;
    this.verbatimLongitude = null;
    this.verbatimSRS = null;
    this.waterBody = null;
  }

  public String getContinent() {
    return this.continent;
  }

  public Location setContinent(String continent) {
    this.continent = continent;
    return this;
  }

  public void unsetContinent() {
    this.continent = null;
  }

  /** Returns true if field continent is set (has been assigned a value) and false otherwise */
  public boolean isSetContinent() {
    return this.continent != null;
  }

  public void setContinentIsSet(boolean value) {
    if (!value) {
      this.continent = null;
    }
  }

  public String getCoordinatePrecision() {
    return this.coordinatePrecision;
  }

  public Location setCoordinatePrecision(String coordinatePrecision) {
    this.coordinatePrecision = coordinatePrecision;
    return this;
  }

  public void unsetCoordinatePrecision() {
    this.coordinatePrecision = null;
  }

  /** Returns true if field coordinatePrecision is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinatePrecision() {
    return this.coordinatePrecision != null;
  }

  public void setCoordinatePrecisionIsSet(boolean value) {
    if (!value) {
      this.coordinatePrecision = null;
    }
  }

  public String getCoordinateUncertaintyInMeters() {
    return this.coordinateUncertaintyInMeters;
  }

  public Location setCoordinateUncertaintyInMeters(String coordinateUncertaintyInMeters) {
    this.coordinateUncertaintyInMeters = coordinateUncertaintyInMeters;
    return this;
  }

  public void unsetCoordinateUncertaintyInMeters() {
    this.coordinateUncertaintyInMeters = null;
  }

  /** Returns true if field coordinateUncertaintyInMeters is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinateUncertaintyInMeters() {
    return this.coordinateUncertaintyInMeters != null;
  }

  public void setCoordinateUncertaintyInMetersIsSet(boolean value) {
    if (!value) {
      this.coordinateUncertaintyInMeters = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public Location setCountry(String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getCountryCode() {
    return this.countryCode;
  }

  public Location setCountryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  public void unsetCountryCode() {
    this.countryCode = null;
  }

  /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryCode() {
    return this.countryCode != null;
  }

  public void setCountryCodeIsSet(boolean value) {
    if (!value) {
      this.countryCode = null;
    }
  }

  public String getCounty() {
    return this.county;
  }

  public Location setCounty(String county) {
    this.county = county;
    return this;
  }

  public void unsetCounty() {
    this.county = null;
  }

  /** Returns true if field county is set (has been assigned a value) and false otherwise */
  public boolean isSetCounty() {
    return this.county != null;
  }

  public void setCountyIsSet(boolean value) {
    if (!value) {
      this.county = null;
    }
  }

  public String getDecimalLatitude() {
    return this.decimalLatitude;
  }

  public Location setDecimalLatitude(String decimalLatitude) {
    this.decimalLatitude = decimalLatitude;
    return this;
  }

  public void unsetDecimalLatitude() {
    this.decimalLatitude = null;
  }

  /** Returns true if field decimalLatitude is set (has been assigned a value) and false otherwise */
  public boolean isSetDecimalLatitude() {
    return this.decimalLatitude != null;
  }

  public void setDecimalLatitudeIsSet(boolean value) {
    if (!value) {
      this.decimalLatitude = null;
    }
  }

  public String getDecimalLongitude() {
    return this.decimalLongitude;
  }

  public Location setDecimalLongitude(String decimalLongitude) {
    this.decimalLongitude = decimalLongitude;
    return this;
  }

  public void unsetDecimalLongitude() {
    this.decimalLongitude = null;
  }

  /** Returns true if field decimalLongitude is set (has been assigned a value) and false otherwise */
  public boolean isSetDecimalLongitude() {
    return this.decimalLongitude != null;
  }

  public void setDecimalLongitudeIsSet(boolean value) {
    if (!value) {
      this.decimalLongitude = null;
    }
  }

  public String getFootprintSRS() {
    return this.footprintSRS;
  }

  public Location setFootprintSRS(String footprintSRS) {
    this.footprintSRS = footprintSRS;
    return this;
  }

  public void unsetFootprintSRS() {
    this.footprintSRS = null;
  }

  /** Returns true if field footprintSRS is set (has been assigned a value) and false otherwise */
  public boolean isSetFootprintSRS() {
    return this.footprintSRS != null;
  }

  public void setFootprintSRSIsSet(boolean value) {
    if (!value) {
      this.footprintSRS = null;
    }
  }

  public String getFootprintSpatialFit() {
    return this.footprintSpatialFit;
  }

  public Location setFootprintSpatialFit(String footprintSpatialFit) {
    this.footprintSpatialFit = footprintSpatialFit;
    return this;
  }

  public void unsetFootprintSpatialFit() {
    this.footprintSpatialFit = null;
  }

  /** Returns true if field footprintSpatialFit is set (has been assigned a value) and false otherwise */
  public boolean isSetFootprintSpatialFit() {
    return this.footprintSpatialFit != null;
  }

  public void setFootprintSpatialFitIsSet(boolean value) {
    if (!value) {
      this.footprintSpatialFit = null;
    }
  }

  public String getFootprintWKT() {
    return this.footprintWKT;
  }

  public Location setFootprintWKT(String footprintWKT) {
    this.footprintWKT = footprintWKT;
    return this;
  }

  public void unsetFootprintWKT() {
    this.footprintWKT = null;
  }

  /** Returns true if field footprintWKT is set (has been assigned a value) and false otherwise */
  public boolean isSetFootprintWKT() {
    return this.footprintWKT != null;
  }

  public void setFootprintWKTIsSet(boolean value) {
    if (!value) {
      this.footprintWKT = null;
    }
  }

  public String getGeodeticDatum() {
    return this.geodeticDatum;
  }

  public Location setGeodeticDatum(String geodeticDatum) {
    this.geodeticDatum = geodeticDatum;
    return this;
  }

  public void unsetGeodeticDatum() {
    this.geodeticDatum = null;
  }

  /** Returns true if field geodeticDatum is set (has been assigned a value) and false otherwise */
  public boolean isSetGeodeticDatum() {
    return this.geodeticDatum != null;
  }

  public void setGeodeticDatumIsSet(boolean value) {
    if (!value) {
      this.geodeticDatum = null;
    }
  }

  public String getGeoreferenceProtocol() {
    return this.georeferenceProtocol;
  }

  public Location setGeoreferenceProtocol(String georeferenceProtocol) {
    this.georeferenceProtocol = georeferenceProtocol;
    return this;
  }

  public void unsetGeoreferenceProtocol() {
    this.georeferenceProtocol = null;
  }

  /** Returns true if field georeferenceProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoreferenceProtocol() {
    return this.georeferenceProtocol != null;
  }

  public void setGeoreferenceProtocolIsSet(boolean value) {
    if (!value) {
      this.georeferenceProtocol = null;
    }
  }

  public String getGeoreferenceRemarks() {
    return this.georeferenceRemarks;
  }

  public Location setGeoreferenceRemarks(String georeferenceRemarks) {
    this.georeferenceRemarks = georeferenceRemarks;
    return this;
  }

  public void unsetGeoreferenceRemarks() {
    this.georeferenceRemarks = null;
  }

  /** Returns true if field georeferenceRemarks is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoreferenceRemarks() {
    return this.georeferenceRemarks != null;
  }

  public void setGeoreferenceRemarksIsSet(boolean value) {
    if (!value) {
      this.georeferenceRemarks = null;
    }
  }

  public String getGeoreferenceSources() {
    return this.georeferenceSources;
  }

  public Location setGeoreferenceSources(String georeferenceSources) {
    this.georeferenceSources = georeferenceSources;
    return this;
  }

  public void unsetGeoreferenceSources() {
    this.georeferenceSources = null;
  }

  /** Returns true if field georeferenceSources is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoreferenceSources() {
    return this.georeferenceSources != null;
  }

  public void setGeoreferenceSourcesIsSet(boolean value) {
    if (!value) {
      this.georeferenceSources = null;
    }
  }

  public String getGeoreferenceVerificationStatus() {
    return this.georeferenceVerificationStatus;
  }

  public Location setGeoreferenceVerificationStatus(String georeferenceVerificationStatus) {
    this.georeferenceVerificationStatus = georeferenceVerificationStatus;
    return this;
  }

  public void unsetGeoreferenceVerificationStatus() {
    this.georeferenceVerificationStatus = null;
  }

  /** Returns true if field georeferenceVerificationStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoreferenceVerificationStatus() {
    return this.georeferenceVerificationStatus != null;
  }

  public void setGeoreferenceVerificationStatusIsSet(boolean value) {
    if (!value) {
      this.georeferenceVerificationStatus = null;
    }
  }

  public String getGeoreferencedBy() {
    return this.georeferencedBy;
  }

  public Location setGeoreferencedBy(String georeferencedBy) {
    this.georeferencedBy = georeferencedBy;
    return this;
  }

  public void unsetGeoreferencedBy() {
    this.georeferencedBy = null;
  }

  /** Returns true if field georeferencedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoreferencedBy() {
    return this.georeferencedBy != null;
  }

  public void setGeoreferencedByIsSet(boolean value) {
    if (!value) {
      this.georeferencedBy = null;
    }
  }

  public String getGeoreferencedDate() {
    return this.georeferencedDate;
  }

  public Location setGeoreferencedDate(String georeferencedDate) {
    this.georeferencedDate = georeferencedDate;
    return this;
  }

  public void unsetGeoreferencedDate() {
    this.georeferencedDate = null;
  }

  /** Returns true if field georeferencedDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoreferencedDate() {
    return this.georeferencedDate != null;
  }

  public void setGeoreferencedDateIsSet(boolean value) {
    if (!value) {
      this.georeferencedDate = null;
    }
  }

  public String getHigherGeography() {
    return this.higherGeography;
  }

  public Location setHigherGeography(String higherGeography) {
    this.higherGeography = higherGeography;
    return this;
  }

  public void unsetHigherGeography() {
    this.higherGeography = null;
  }

  /** Returns true if field higherGeography is set (has been assigned a value) and false otherwise */
  public boolean isSetHigherGeography() {
    return this.higherGeography != null;
  }

  public void setHigherGeographyIsSet(boolean value) {
    if (!value) {
      this.higherGeography = null;
    }
  }

  public String getHigherGeographyID() {
    return this.higherGeographyID;
  }

  public Location setHigherGeographyID(String higherGeographyID) {
    this.higherGeographyID = higherGeographyID;
    return this;
  }

  public void unsetHigherGeographyID() {
    this.higherGeographyID = null;
  }

  /** Returns true if field higherGeographyID is set (has been assigned a value) and false otherwise */
  public boolean isSetHigherGeographyID() {
    return this.higherGeographyID != null;
  }

  public void setHigherGeographyIDIsSet(boolean value) {
    if (!value) {
      this.higherGeographyID = null;
    }
  }

  public String getIsland() {
    return this.island;
  }

  public Location setIsland(String island) {
    this.island = island;
    return this;
  }

  public void unsetIsland() {
    this.island = null;
  }

  /** Returns true if field island is set (has been assigned a value) and false otherwise */
  public boolean isSetIsland() {
    return this.island != null;
  }

  public void setIslandIsSet(boolean value) {
    if (!value) {
      this.island = null;
    }
  }

  public String getIslandGroup() {
    return this.islandGroup;
  }

  public Location setIslandGroup(String islandGroup) {
    this.islandGroup = islandGroup;
    return this;
  }

  public void unsetIslandGroup() {
    this.islandGroup = null;
  }

  /** Returns true if field islandGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetIslandGroup() {
    return this.islandGroup != null;
  }

  public void setIslandGroupIsSet(boolean value) {
    if (!value) {
      this.islandGroup = null;
    }
  }

  public String getLocality() {
    return this.locality;
  }

  public Location setLocality(String locality) {
    this.locality = locality;
    return this;
  }

  public void unsetLocality() {
    this.locality = null;
  }

  /** Returns true if field locality is set (has been assigned a value) and false otherwise */
  public boolean isSetLocality() {
    return this.locality != null;
  }

  public void setLocalityIsSet(boolean value) {
    if (!value) {
      this.locality = null;
    }
  }

  public String getLocationAccordingTo() {
    return this.locationAccordingTo;
  }

  public Location setLocationAccordingTo(String locationAccordingTo) {
    this.locationAccordingTo = locationAccordingTo;
    return this;
  }

  public void unsetLocationAccordingTo() {
    this.locationAccordingTo = null;
  }

  /** Returns true if field locationAccordingTo is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationAccordingTo() {
    return this.locationAccordingTo != null;
  }

  public void setLocationAccordingToIsSet(boolean value) {
    if (!value) {
      this.locationAccordingTo = null;
    }
  }

  public String getLocationID() {
    return this.locationID;
  }

  public Location setLocationID(String locationID) {
    this.locationID = locationID;
    return this;
  }

  public void unsetLocationID() {
    this.locationID = null;
  }

  /** Returns true if field locationID is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationID() {
    return this.locationID != null;
  }

  public void setLocationIDIsSet(boolean value) {
    if (!value) {
      this.locationID = null;
    }
  }

  public String getLocationRemarks() {
    return this.locationRemarks;
  }

  public Location setLocationRemarks(String locationRemarks) {
    this.locationRemarks = locationRemarks;
    return this;
  }

  public void unsetLocationRemarks() {
    this.locationRemarks = null;
  }

  /** Returns true if field locationRemarks is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationRemarks() {
    return this.locationRemarks != null;
  }

  public void setLocationRemarksIsSet(boolean value) {
    if (!value) {
      this.locationRemarks = null;
    }
  }

  public String getMaximumDepthInMeters() {
    return this.maximumDepthInMeters;
  }

  public Location setMaximumDepthInMeters(String maximumDepthInMeters) {
    this.maximumDepthInMeters = maximumDepthInMeters;
    return this;
  }

  public void unsetMaximumDepthInMeters() {
    this.maximumDepthInMeters = null;
  }

  /** Returns true if field maximumDepthInMeters is set (has been assigned a value) and false otherwise */
  public boolean isSetMaximumDepthInMeters() {
    return this.maximumDepthInMeters != null;
  }

  public void setMaximumDepthInMetersIsSet(boolean value) {
    if (!value) {
      this.maximumDepthInMeters = null;
    }
  }

  public String getMaximumDistanceAboveSurfaceInMeters() {
    return this.maximumDistanceAboveSurfaceInMeters;
  }

  public Location setMaximumDistanceAboveSurfaceInMeters(String maximumDistanceAboveSurfaceInMeters) {
    this.maximumDistanceAboveSurfaceInMeters = maximumDistanceAboveSurfaceInMeters;
    return this;
  }

  public void unsetMaximumDistanceAboveSurfaceInMeters() {
    this.maximumDistanceAboveSurfaceInMeters = null;
  }

  /** Returns true if field maximumDistanceAboveSurfaceInMeters is set (has been assigned a value) and false otherwise */
  public boolean isSetMaximumDistanceAboveSurfaceInMeters() {
    return this.maximumDistanceAboveSurfaceInMeters != null;
  }

  public void setMaximumDistanceAboveSurfaceInMetersIsSet(boolean value) {
    if (!value) {
      this.maximumDistanceAboveSurfaceInMeters = null;
    }
  }

  public String getMaximumElevationInMeters() {
    return this.maximumElevationInMeters;
  }

  public Location setMaximumElevationInMeters(String maximumElevationInMeters) {
    this.maximumElevationInMeters = maximumElevationInMeters;
    return this;
  }

  public void unsetMaximumElevationInMeters() {
    this.maximumElevationInMeters = null;
  }

  /** Returns true if field maximumElevationInMeters is set (has been assigned a value) and false otherwise */
  public boolean isSetMaximumElevationInMeters() {
    return this.maximumElevationInMeters != null;
  }

  public void setMaximumElevationInMetersIsSet(boolean value) {
    if (!value) {
      this.maximumElevationInMeters = null;
    }
  }

  public String getMinimumDepthInMeters() {
    return this.minimumDepthInMeters;
  }

  public Location setMinimumDepthInMeters(String minimumDepthInMeters) {
    this.minimumDepthInMeters = minimumDepthInMeters;
    return this;
  }

  public void unsetMinimumDepthInMeters() {
    this.minimumDepthInMeters = null;
  }

  /** Returns true if field minimumDepthInMeters is set (has been assigned a value) and false otherwise */
  public boolean isSetMinimumDepthInMeters() {
    return this.minimumDepthInMeters != null;
  }

  public void setMinimumDepthInMetersIsSet(boolean value) {
    if (!value) {
      this.minimumDepthInMeters = null;
    }
  }

  public String getMinimumDistanceAboveSurfaceInMeters() {
    return this.minimumDistanceAboveSurfaceInMeters;
  }

  public Location setMinimumDistanceAboveSurfaceInMeters(String minimumDistanceAboveSurfaceInMeters) {
    this.minimumDistanceAboveSurfaceInMeters = minimumDistanceAboveSurfaceInMeters;
    return this;
  }

  public void unsetMinimumDistanceAboveSurfaceInMeters() {
    this.minimumDistanceAboveSurfaceInMeters = null;
  }

  /** Returns true if field minimumDistanceAboveSurfaceInMeters is set (has been assigned a value) and false otherwise */
  public boolean isSetMinimumDistanceAboveSurfaceInMeters() {
    return this.minimumDistanceAboveSurfaceInMeters != null;
  }

  public void setMinimumDistanceAboveSurfaceInMetersIsSet(boolean value) {
    if (!value) {
      this.minimumDistanceAboveSurfaceInMeters = null;
    }
  }

  public String getMinimumElevationInMeters() {
    return this.minimumElevationInMeters;
  }

  public Location setMinimumElevationInMeters(String minimumElevationInMeters) {
    this.minimumElevationInMeters = minimumElevationInMeters;
    return this;
  }

  public void unsetMinimumElevationInMeters() {
    this.minimumElevationInMeters = null;
  }

  /** Returns true if field minimumElevationInMeters is set (has been assigned a value) and false otherwise */
  public boolean isSetMinimumElevationInMeters() {
    return this.minimumElevationInMeters != null;
  }

  public void setMinimumElevationInMetersIsSet(boolean value) {
    if (!value) {
      this.minimumElevationInMeters = null;
    }
  }

  public String getMunicipality() {
    return this.municipality;
  }

  public Location setMunicipality(String municipality) {
    this.municipality = municipality;
    return this;
  }

  public void unsetMunicipality() {
    this.municipality = null;
  }

  /** Returns true if field municipality is set (has been assigned a value) and false otherwise */
  public boolean isSetMunicipality() {
    return this.municipality != null;
  }

  public void setMunicipalityIsSet(boolean value) {
    if (!value) {
      this.municipality = null;
    }
  }

  public String getPointRadiusSpatialFit() {
    return this.pointRadiusSpatialFit;
  }

  public Location setPointRadiusSpatialFit(String pointRadiusSpatialFit) {
    this.pointRadiusSpatialFit = pointRadiusSpatialFit;
    return this;
  }

  public void unsetPointRadiusSpatialFit() {
    this.pointRadiusSpatialFit = null;
  }

  /** Returns true if field pointRadiusSpatialFit is set (has been assigned a value) and false otherwise */
  public boolean isSetPointRadiusSpatialFit() {
    return this.pointRadiusSpatialFit != null;
  }

  public void setPointRadiusSpatialFitIsSet(boolean value) {
    if (!value) {
      this.pointRadiusSpatialFit = null;
    }
  }

  public String getStateProvince() {
    return this.stateProvince;
  }

  public Location setStateProvince(String stateProvince) {
    this.stateProvince = stateProvince;
    return this;
  }

  public void unsetStateProvince() {
    this.stateProvince = null;
  }

  /** Returns true if field stateProvince is set (has been assigned a value) and false otherwise */
  public boolean isSetStateProvince() {
    return this.stateProvince != null;
  }

  public void setStateProvinceIsSet(boolean value) {
    if (!value) {
      this.stateProvince = null;
    }
  }

  public String getVerbatimCoordinateSystem() {
    return this.verbatimCoordinateSystem;
  }

  public Location setVerbatimCoordinateSystem(String verbatimCoordinateSystem) {
    this.verbatimCoordinateSystem = verbatimCoordinateSystem;
    return this;
  }

  public void unsetVerbatimCoordinateSystem() {
    this.verbatimCoordinateSystem = null;
  }

  /** Returns true if field verbatimCoordinateSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetVerbatimCoordinateSystem() {
    return this.verbatimCoordinateSystem != null;
  }

  public void setVerbatimCoordinateSystemIsSet(boolean value) {
    if (!value) {
      this.verbatimCoordinateSystem = null;
    }
  }

  public String getVerbatimCoordinates() {
    return this.verbatimCoordinates;
  }

  public Location setVerbatimCoordinates(String verbatimCoordinates) {
    this.verbatimCoordinates = verbatimCoordinates;
    return this;
  }

  public void unsetVerbatimCoordinates() {
    this.verbatimCoordinates = null;
  }

  /** Returns true if field verbatimCoordinates is set (has been assigned a value) and false otherwise */
  public boolean isSetVerbatimCoordinates() {
    return this.verbatimCoordinates != null;
  }

  public void setVerbatimCoordinatesIsSet(boolean value) {
    if (!value) {
      this.verbatimCoordinates = null;
    }
  }

  public String getVerbatimDepth() {
    return this.verbatimDepth;
  }

  public Location setVerbatimDepth(String verbatimDepth) {
    this.verbatimDepth = verbatimDepth;
    return this;
  }

  public void unsetVerbatimDepth() {
    this.verbatimDepth = null;
  }

  /** Returns true if field verbatimDepth is set (has been assigned a value) and false otherwise */
  public boolean isSetVerbatimDepth() {
    return this.verbatimDepth != null;
  }

  public void setVerbatimDepthIsSet(boolean value) {
    if (!value) {
      this.verbatimDepth = null;
    }
  }

  public String getVerbatimElevation() {
    return this.verbatimElevation;
  }

  public Location setVerbatimElevation(String verbatimElevation) {
    this.verbatimElevation = verbatimElevation;
    return this;
  }

  public void unsetVerbatimElevation() {
    this.verbatimElevation = null;
  }

  /** Returns true if field verbatimElevation is set (has been assigned a value) and false otherwise */
  public boolean isSetVerbatimElevation() {
    return this.verbatimElevation != null;
  }

  public void setVerbatimElevationIsSet(boolean value) {
    if (!value) {
      this.verbatimElevation = null;
    }
  }

  public String getVerbatimLatitude() {
    return this.verbatimLatitude;
  }

  public Location setVerbatimLatitude(String verbatimLatitude) {
    this.verbatimLatitude = verbatimLatitude;
    return this;
  }

  public void unsetVerbatimLatitude() {
    this.verbatimLatitude = null;
  }

  /** Returns true if field verbatimLatitude is set (has been assigned a value) and false otherwise */
  public boolean isSetVerbatimLatitude() {
    return this.verbatimLatitude != null;
  }

  public void setVerbatimLatitudeIsSet(boolean value) {
    if (!value) {
      this.verbatimLatitude = null;
    }
  }

  public String getVerbatimLocality() {
    return this.verbatimLocality;
  }

  public Location setVerbatimLocality(String verbatimLocality) {
    this.verbatimLocality = verbatimLocality;
    return this;
  }

  public void unsetVerbatimLocality() {
    this.verbatimLocality = null;
  }

  /** Returns true if field verbatimLocality is set (has been assigned a value) and false otherwise */
  public boolean isSetVerbatimLocality() {
    return this.verbatimLocality != null;
  }

  public void setVerbatimLocalityIsSet(boolean value) {
    if (!value) {
      this.verbatimLocality = null;
    }
  }

  public String getVerbatimLongitude() {
    return this.verbatimLongitude;
  }

  public Location setVerbatimLongitude(String verbatimLongitude) {
    this.verbatimLongitude = verbatimLongitude;
    return this;
  }

  public void unsetVerbatimLongitude() {
    this.verbatimLongitude = null;
  }

  /** Returns true if field verbatimLongitude is set (has been assigned a value) and false otherwise */
  public boolean isSetVerbatimLongitude() {
    return this.verbatimLongitude != null;
  }

  public void setVerbatimLongitudeIsSet(boolean value) {
    if (!value) {
      this.verbatimLongitude = null;
    }
  }

  public String getVerbatimSRS() {
    return this.verbatimSRS;
  }

  public Location setVerbatimSRS(String verbatimSRS) {
    this.verbatimSRS = verbatimSRS;
    return this;
  }

  public void unsetVerbatimSRS() {
    this.verbatimSRS = null;
  }

  /** Returns true if field verbatimSRS is set (has been assigned a value) and false otherwise */
  public boolean isSetVerbatimSRS() {
    return this.verbatimSRS != null;
  }

  public void setVerbatimSRSIsSet(boolean value) {
    if (!value) {
      this.verbatimSRS = null;
    }
  }

  public String getWaterBody() {
    return this.waterBody;
  }

  public Location setWaterBody(String waterBody) {
    this.waterBody = waterBody;
    return this;
  }

  public void unsetWaterBody() {
    this.waterBody = null;
  }

  /** Returns true if field waterBody is set (has been assigned a value) and false otherwise */
  public boolean isSetWaterBody() {
    return this.waterBody != null;
  }

  public void setWaterBodyIsSet(boolean value) {
    if (!value) {
      this.waterBody = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTINENT:
      if (value == null) {
        unsetContinent();
      } else {
        setContinent((String)value);
      }
      break;

    case COORDINATE_PRECISION:
      if (value == null) {
        unsetCoordinatePrecision();
      } else {
        setCoordinatePrecision((String)value);
      }
      break;

    case COORDINATE_UNCERTAINTY_IN_METERS:
      if (value == null) {
        unsetCoordinateUncertaintyInMeters();
      } else {
        setCoordinateUncertaintyInMeters((String)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case COUNTRY_CODE:
      if (value == null) {
        unsetCountryCode();
      } else {
        setCountryCode((String)value);
      }
      break;

    case COUNTY:
      if (value == null) {
        unsetCounty();
      } else {
        setCounty((String)value);
      }
      break;

    case DECIMAL_LATITUDE:
      if (value == null) {
        unsetDecimalLatitude();
      } else {
        setDecimalLatitude((String)value);
      }
      break;

    case DECIMAL_LONGITUDE:
      if (value == null) {
        unsetDecimalLongitude();
      } else {
        setDecimalLongitude((String)value);
      }
      break;

    case FOOTPRINT_SRS:
      if (value == null) {
        unsetFootprintSRS();
      } else {
        setFootprintSRS((String)value);
      }
      break;

    case FOOTPRINT_SPATIAL_FIT:
      if (value == null) {
        unsetFootprintSpatialFit();
      } else {
        setFootprintSpatialFit((String)value);
      }
      break;

    case FOOTPRINT_WKT:
      if (value == null) {
        unsetFootprintWKT();
      } else {
        setFootprintWKT((String)value);
      }
      break;

    case GEODETIC_DATUM:
      if (value == null) {
        unsetGeodeticDatum();
      } else {
        setGeodeticDatum((String)value);
      }
      break;

    case GEOREFERENCE_PROTOCOL:
      if (value == null) {
        unsetGeoreferenceProtocol();
      } else {
        setGeoreferenceProtocol((String)value);
      }
      break;

    case GEOREFERENCE_REMARKS:
      if (value == null) {
        unsetGeoreferenceRemarks();
      } else {
        setGeoreferenceRemarks((String)value);
      }
      break;

    case GEOREFERENCE_SOURCES:
      if (value == null) {
        unsetGeoreferenceSources();
      } else {
        setGeoreferenceSources((String)value);
      }
      break;

    case GEOREFERENCE_VERIFICATION_STATUS:
      if (value == null) {
        unsetGeoreferenceVerificationStatus();
      } else {
        setGeoreferenceVerificationStatus((String)value);
      }
      break;

    case GEOREFERENCED_BY:
      if (value == null) {
        unsetGeoreferencedBy();
      } else {
        setGeoreferencedBy((String)value);
      }
      break;

    case GEOREFERENCED_DATE:
      if (value == null) {
        unsetGeoreferencedDate();
      } else {
        setGeoreferencedDate((String)value);
      }
      break;

    case HIGHER_GEOGRAPHY:
      if (value == null) {
        unsetHigherGeography();
      } else {
        setHigherGeography((String)value);
      }
      break;

    case HIGHER_GEOGRAPHY_ID:
      if (value == null) {
        unsetHigherGeographyID();
      } else {
        setHigherGeographyID((String)value);
      }
      break;

    case ISLAND:
      if (value == null) {
        unsetIsland();
      } else {
        setIsland((String)value);
      }
      break;

    case ISLAND_GROUP:
      if (value == null) {
        unsetIslandGroup();
      } else {
        setIslandGroup((String)value);
      }
      break;

    case LOCALITY:
      if (value == null) {
        unsetLocality();
      } else {
        setLocality((String)value);
      }
      break;

    case LOCATION_ACCORDING_TO:
      if (value == null) {
        unsetLocationAccordingTo();
      } else {
        setLocationAccordingTo((String)value);
      }
      break;

    case LOCATION_ID:
      if (value == null) {
        unsetLocationID();
      } else {
        setLocationID((String)value);
      }
      break;

    case LOCATION_REMARKS:
      if (value == null) {
        unsetLocationRemarks();
      } else {
        setLocationRemarks((String)value);
      }
      break;

    case MAXIMUM_DEPTH_IN_METERS:
      if (value == null) {
        unsetMaximumDepthInMeters();
      } else {
        setMaximumDepthInMeters((String)value);
      }
      break;

    case MAXIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS:
      if (value == null) {
        unsetMaximumDistanceAboveSurfaceInMeters();
      } else {
        setMaximumDistanceAboveSurfaceInMeters((String)value);
      }
      break;

    case MAXIMUM_ELEVATION_IN_METERS:
      if (value == null) {
        unsetMaximumElevationInMeters();
      } else {
        setMaximumElevationInMeters((String)value);
      }
      break;

    case MINIMUM_DEPTH_IN_METERS:
      if (value == null) {
        unsetMinimumDepthInMeters();
      } else {
        setMinimumDepthInMeters((String)value);
      }
      break;

    case MINIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS:
      if (value == null) {
        unsetMinimumDistanceAboveSurfaceInMeters();
      } else {
        setMinimumDistanceAboveSurfaceInMeters((String)value);
      }
      break;

    case MINIMUM_ELEVATION_IN_METERS:
      if (value == null) {
        unsetMinimumElevationInMeters();
      } else {
        setMinimumElevationInMeters((String)value);
      }
      break;

    case MUNICIPALITY:
      if (value == null) {
        unsetMunicipality();
      } else {
        setMunicipality((String)value);
      }
      break;

    case POINT_RADIUS_SPATIAL_FIT:
      if (value == null) {
        unsetPointRadiusSpatialFit();
      } else {
        setPointRadiusSpatialFit((String)value);
      }
      break;

    case STATE_PROVINCE:
      if (value == null) {
        unsetStateProvince();
      } else {
        setStateProvince((String)value);
      }
      break;

    case VERBATIM_COORDINATE_SYSTEM:
      if (value == null) {
        unsetVerbatimCoordinateSystem();
      } else {
        setVerbatimCoordinateSystem((String)value);
      }
      break;

    case VERBATIM_COORDINATES:
      if (value == null) {
        unsetVerbatimCoordinates();
      } else {
        setVerbatimCoordinates((String)value);
      }
      break;

    case VERBATIM_DEPTH:
      if (value == null) {
        unsetVerbatimDepth();
      } else {
        setVerbatimDepth((String)value);
      }
      break;

    case VERBATIM_ELEVATION:
      if (value == null) {
        unsetVerbatimElevation();
      } else {
        setVerbatimElevation((String)value);
      }
      break;

    case VERBATIM_LATITUDE:
      if (value == null) {
        unsetVerbatimLatitude();
      } else {
        setVerbatimLatitude((String)value);
      }
      break;

    case VERBATIM_LOCALITY:
      if (value == null) {
        unsetVerbatimLocality();
      } else {
        setVerbatimLocality((String)value);
      }
      break;

    case VERBATIM_LONGITUDE:
      if (value == null) {
        unsetVerbatimLongitude();
      } else {
        setVerbatimLongitude((String)value);
      }
      break;

    case VERBATIM_SRS:
      if (value == null) {
        unsetVerbatimSRS();
      } else {
        setVerbatimSRS((String)value);
      }
      break;

    case WATER_BODY:
      if (value == null) {
        unsetWaterBody();
      } else {
        setWaterBody((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTINENT:
      return getContinent();

    case COORDINATE_PRECISION:
      return getCoordinatePrecision();

    case COORDINATE_UNCERTAINTY_IN_METERS:
      return getCoordinateUncertaintyInMeters();

    case COUNTRY:
      return getCountry();

    case COUNTRY_CODE:
      return getCountryCode();

    case COUNTY:
      return getCounty();

    case DECIMAL_LATITUDE:
      return getDecimalLatitude();

    case DECIMAL_LONGITUDE:
      return getDecimalLongitude();

    case FOOTPRINT_SRS:
      return getFootprintSRS();

    case FOOTPRINT_SPATIAL_FIT:
      return getFootprintSpatialFit();

    case FOOTPRINT_WKT:
      return getFootprintWKT();

    case GEODETIC_DATUM:
      return getGeodeticDatum();

    case GEOREFERENCE_PROTOCOL:
      return getGeoreferenceProtocol();

    case GEOREFERENCE_REMARKS:
      return getGeoreferenceRemarks();

    case GEOREFERENCE_SOURCES:
      return getGeoreferenceSources();

    case GEOREFERENCE_VERIFICATION_STATUS:
      return getGeoreferenceVerificationStatus();

    case GEOREFERENCED_BY:
      return getGeoreferencedBy();

    case GEOREFERENCED_DATE:
      return getGeoreferencedDate();

    case HIGHER_GEOGRAPHY:
      return getHigherGeography();

    case HIGHER_GEOGRAPHY_ID:
      return getHigherGeographyID();

    case ISLAND:
      return getIsland();

    case ISLAND_GROUP:
      return getIslandGroup();

    case LOCALITY:
      return getLocality();

    case LOCATION_ACCORDING_TO:
      return getLocationAccordingTo();

    case LOCATION_ID:
      return getLocationID();

    case LOCATION_REMARKS:
      return getLocationRemarks();

    case MAXIMUM_DEPTH_IN_METERS:
      return getMaximumDepthInMeters();

    case MAXIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS:
      return getMaximumDistanceAboveSurfaceInMeters();

    case MAXIMUM_ELEVATION_IN_METERS:
      return getMaximumElevationInMeters();

    case MINIMUM_DEPTH_IN_METERS:
      return getMinimumDepthInMeters();

    case MINIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS:
      return getMinimumDistanceAboveSurfaceInMeters();

    case MINIMUM_ELEVATION_IN_METERS:
      return getMinimumElevationInMeters();

    case MUNICIPALITY:
      return getMunicipality();

    case POINT_RADIUS_SPATIAL_FIT:
      return getPointRadiusSpatialFit();

    case STATE_PROVINCE:
      return getStateProvince();

    case VERBATIM_COORDINATE_SYSTEM:
      return getVerbatimCoordinateSystem();

    case VERBATIM_COORDINATES:
      return getVerbatimCoordinates();

    case VERBATIM_DEPTH:
      return getVerbatimDepth();

    case VERBATIM_ELEVATION:
      return getVerbatimElevation();

    case VERBATIM_LATITUDE:
      return getVerbatimLatitude();

    case VERBATIM_LOCALITY:
      return getVerbatimLocality();

    case VERBATIM_LONGITUDE:
      return getVerbatimLongitude();

    case VERBATIM_SRS:
      return getVerbatimSRS();

    case WATER_BODY:
      return getWaterBody();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTINENT:
      return isSetContinent();
    case COORDINATE_PRECISION:
      return isSetCoordinatePrecision();
    case COORDINATE_UNCERTAINTY_IN_METERS:
      return isSetCoordinateUncertaintyInMeters();
    case COUNTRY:
      return isSetCountry();
    case COUNTRY_CODE:
      return isSetCountryCode();
    case COUNTY:
      return isSetCounty();
    case DECIMAL_LATITUDE:
      return isSetDecimalLatitude();
    case DECIMAL_LONGITUDE:
      return isSetDecimalLongitude();
    case FOOTPRINT_SRS:
      return isSetFootprintSRS();
    case FOOTPRINT_SPATIAL_FIT:
      return isSetFootprintSpatialFit();
    case FOOTPRINT_WKT:
      return isSetFootprintWKT();
    case GEODETIC_DATUM:
      return isSetGeodeticDatum();
    case GEOREFERENCE_PROTOCOL:
      return isSetGeoreferenceProtocol();
    case GEOREFERENCE_REMARKS:
      return isSetGeoreferenceRemarks();
    case GEOREFERENCE_SOURCES:
      return isSetGeoreferenceSources();
    case GEOREFERENCE_VERIFICATION_STATUS:
      return isSetGeoreferenceVerificationStatus();
    case GEOREFERENCED_BY:
      return isSetGeoreferencedBy();
    case GEOREFERENCED_DATE:
      return isSetGeoreferencedDate();
    case HIGHER_GEOGRAPHY:
      return isSetHigherGeography();
    case HIGHER_GEOGRAPHY_ID:
      return isSetHigherGeographyID();
    case ISLAND:
      return isSetIsland();
    case ISLAND_GROUP:
      return isSetIslandGroup();
    case LOCALITY:
      return isSetLocality();
    case LOCATION_ACCORDING_TO:
      return isSetLocationAccordingTo();
    case LOCATION_ID:
      return isSetLocationID();
    case LOCATION_REMARKS:
      return isSetLocationRemarks();
    case MAXIMUM_DEPTH_IN_METERS:
      return isSetMaximumDepthInMeters();
    case MAXIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS:
      return isSetMaximumDistanceAboveSurfaceInMeters();
    case MAXIMUM_ELEVATION_IN_METERS:
      return isSetMaximumElevationInMeters();
    case MINIMUM_DEPTH_IN_METERS:
      return isSetMinimumDepthInMeters();
    case MINIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS:
      return isSetMinimumDistanceAboveSurfaceInMeters();
    case MINIMUM_ELEVATION_IN_METERS:
      return isSetMinimumElevationInMeters();
    case MUNICIPALITY:
      return isSetMunicipality();
    case POINT_RADIUS_SPATIAL_FIT:
      return isSetPointRadiusSpatialFit();
    case STATE_PROVINCE:
      return isSetStateProvince();
    case VERBATIM_COORDINATE_SYSTEM:
      return isSetVerbatimCoordinateSystem();
    case VERBATIM_COORDINATES:
      return isSetVerbatimCoordinates();
    case VERBATIM_DEPTH:
      return isSetVerbatimDepth();
    case VERBATIM_ELEVATION:
      return isSetVerbatimElevation();
    case VERBATIM_LATITUDE:
      return isSetVerbatimLatitude();
    case VERBATIM_LOCALITY:
      return isSetVerbatimLocality();
    case VERBATIM_LONGITUDE:
      return isSetVerbatimLongitude();
    case VERBATIM_SRS:
      return isSetVerbatimSRS();
    case WATER_BODY:
      return isSetWaterBody();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Location)
      return this.equals((Location)that);
    return false;
  }

  public boolean equals(Location that) {
    if (that == null)
      return false;

    boolean this_present_continent = true && this.isSetContinent();
    boolean that_present_continent = true && that.isSetContinent();
    if (this_present_continent || that_present_continent) {
      if (!(this_present_continent && that_present_continent))
        return false;
      if (!this.continent.equals(that.continent))
        return false;
    }

    boolean this_present_coordinatePrecision = true && this.isSetCoordinatePrecision();
    boolean that_present_coordinatePrecision = true && that.isSetCoordinatePrecision();
    if (this_present_coordinatePrecision || that_present_coordinatePrecision) {
      if (!(this_present_coordinatePrecision && that_present_coordinatePrecision))
        return false;
      if (!this.coordinatePrecision.equals(that.coordinatePrecision))
        return false;
    }

    boolean this_present_coordinateUncertaintyInMeters = true && this.isSetCoordinateUncertaintyInMeters();
    boolean that_present_coordinateUncertaintyInMeters = true && that.isSetCoordinateUncertaintyInMeters();
    if (this_present_coordinateUncertaintyInMeters || that_present_coordinateUncertaintyInMeters) {
      if (!(this_present_coordinateUncertaintyInMeters && that_present_coordinateUncertaintyInMeters))
        return false;
      if (!this.coordinateUncertaintyInMeters.equals(that.coordinateUncertaintyInMeters))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_countryCode = true && this.isSetCountryCode();
    boolean that_present_countryCode = true && that.isSetCountryCode();
    if (this_present_countryCode || that_present_countryCode) {
      if (!(this_present_countryCode && that_present_countryCode))
        return false;
      if (!this.countryCode.equals(that.countryCode))
        return false;
    }

    boolean this_present_county = true && this.isSetCounty();
    boolean that_present_county = true && that.isSetCounty();
    if (this_present_county || that_present_county) {
      if (!(this_present_county && that_present_county))
        return false;
      if (!this.county.equals(that.county))
        return false;
    }

    boolean this_present_decimalLatitude = true && this.isSetDecimalLatitude();
    boolean that_present_decimalLatitude = true && that.isSetDecimalLatitude();
    if (this_present_decimalLatitude || that_present_decimalLatitude) {
      if (!(this_present_decimalLatitude && that_present_decimalLatitude))
        return false;
      if (!this.decimalLatitude.equals(that.decimalLatitude))
        return false;
    }

    boolean this_present_decimalLongitude = true && this.isSetDecimalLongitude();
    boolean that_present_decimalLongitude = true && that.isSetDecimalLongitude();
    if (this_present_decimalLongitude || that_present_decimalLongitude) {
      if (!(this_present_decimalLongitude && that_present_decimalLongitude))
        return false;
      if (!this.decimalLongitude.equals(that.decimalLongitude))
        return false;
    }

    boolean this_present_footprintSRS = true && this.isSetFootprintSRS();
    boolean that_present_footprintSRS = true && that.isSetFootprintSRS();
    if (this_present_footprintSRS || that_present_footprintSRS) {
      if (!(this_present_footprintSRS && that_present_footprintSRS))
        return false;
      if (!this.footprintSRS.equals(that.footprintSRS))
        return false;
    }

    boolean this_present_footprintSpatialFit = true && this.isSetFootprintSpatialFit();
    boolean that_present_footprintSpatialFit = true && that.isSetFootprintSpatialFit();
    if (this_present_footprintSpatialFit || that_present_footprintSpatialFit) {
      if (!(this_present_footprintSpatialFit && that_present_footprintSpatialFit))
        return false;
      if (!this.footprintSpatialFit.equals(that.footprintSpatialFit))
        return false;
    }

    boolean this_present_footprintWKT = true && this.isSetFootprintWKT();
    boolean that_present_footprintWKT = true && that.isSetFootprintWKT();
    if (this_present_footprintWKT || that_present_footprintWKT) {
      if (!(this_present_footprintWKT && that_present_footprintWKT))
        return false;
      if (!this.footprintWKT.equals(that.footprintWKT))
        return false;
    }

    boolean this_present_geodeticDatum = true && this.isSetGeodeticDatum();
    boolean that_present_geodeticDatum = true && that.isSetGeodeticDatum();
    if (this_present_geodeticDatum || that_present_geodeticDatum) {
      if (!(this_present_geodeticDatum && that_present_geodeticDatum))
        return false;
      if (!this.geodeticDatum.equals(that.geodeticDatum))
        return false;
    }

    boolean this_present_georeferenceProtocol = true && this.isSetGeoreferenceProtocol();
    boolean that_present_georeferenceProtocol = true && that.isSetGeoreferenceProtocol();
    if (this_present_georeferenceProtocol || that_present_georeferenceProtocol) {
      if (!(this_present_georeferenceProtocol && that_present_georeferenceProtocol))
        return false;
      if (!this.georeferenceProtocol.equals(that.georeferenceProtocol))
        return false;
    }

    boolean this_present_georeferenceRemarks = true && this.isSetGeoreferenceRemarks();
    boolean that_present_georeferenceRemarks = true && that.isSetGeoreferenceRemarks();
    if (this_present_georeferenceRemarks || that_present_georeferenceRemarks) {
      if (!(this_present_georeferenceRemarks && that_present_georeferenceRemarks))
        return false;
      if (!this.georeferenceRemarks.equals(that.georeferenceRemarks))
        return false;
    }

    boolean this_present_georeferenceSources = true && this.isSetGeoreferenceSources();
    boolean that_present_georeferenceSources = true && that.isSetGeoreferenceSources();
    if (this_present_georeferenceSources || that_present_georeferenceSources) {
      if (!(this_present_georeferenceSources && that_present_georeferenceSources))
        return false;
      if (!this.georeferenceSources.equals(that.georeferenceSources))
        return false;
    }

    boolean this_present_georeferenceVerificationStatus = true && this.isSetGeoreferenceVerificationStatus();
    boolean that_present_georeferenceVerificationStatus = true && that.isSetGeoreferenceVerificationStatus();
    if (this_present_georeferenceVerificationStatus || that_present_georeferenceVerificationStatus) {
      if (!(this_present_georeferenceVerificationStatus && that_present_georeferenceVerificationStatus))
        return false;
      if (!this.georeferenceVerificationStatus.equals(that.georeferenceVerificationStatus))
        return false;
    }

    boolean this_present_georeferencedBy = true && this.isSetGeoreferencedBy();
    boolean that_present_georeferencedBy = true && that.isSetGeoreferencedBy();
    if (this_present_georeferencedBy || that_present_georeferencedBy) {
      if (!(this_present_georeferencedBy && that_present_georeferencedBy))
        return false;
      if (!this.georeferencedBy.equals(that.georeferencedBy))
        return false;
    }

    boolean this_present_georeferencedDate = true && this.isSetGeoreferencedDate();
    boolean that_present_georeferencedDate = true && that.isSetGeoreferencedDate();
    if (this_present_georeferencedDate || that_present_georeferencedDate) {
      if (!(this_present_georeferencedDate && that_present_georeferencedDate))
        return false;
      if (!this.georeferencedDate.equals(that.georeferencedDate))
        return false;
    }

    boolean this_present_higherGeography = true && this.isSetHigherGeography();
    boolean that_present_higherGeography = true && that.isSetHigherGeography();
    if (this_present_higherGeography || that_present_higherGeography) {
      if (!(this_present_higherGeography && that_present_higherGeography))
        return false;
      if (!this.higherGeography.equals(that.higherGeography))
        return false;
    }

    boolean this_present_higherGeographyID = true && this.isSetHigherGeographyID();
    boolean that_present_higherGeographyID = true && that.isSetHigherGeographyID();
    if (this_present_higherGeographyID || that_present_higherGeographyID) {
      if (!(this_present_higherGeographyID && that_present_higherGeographyID))
        return false;
      if (!this.higherGeographyID.equals(that.higherGeographyID))
        return false;
    }

    boolean this_present_island = true && this.isSetIsland();
    boolean that_present_island = true && that.isSetIsland();
    if (this_present_island || that_present_island) {
      if (!(this_present_island && that_present_island))
        return false;
      if (!this.island.equals(that.island))
        return false;
    }

    boolean this_present_islandGroup = true && this.isSetIslandGroup();
    boolean that_present_islandGroup = true && that.isSetIslandGroup();
    if (this_present_islandGroup || that_present_islandGroup) {
      if (!(this_present_islandGroup && that_present_islandGroup))
        return false;
      if (!this.islandGroup.equals(that.islandGroup))
        return false;
    }

    boolean this_present_locality = true && this.isSetLocality();
    boolean that_present_locality = true && that.isSetLocality();
    if (this_present_locality || that_present_locality) {
      if (!(this_present_locality && that_present_locality))
        return false;
      if (!this.locality.equals(that.locality))
        return false;
    }

    boolean this_present_locationAccordingTo = true && this.isSetLocationAccordingTo();
    boolean that_present_locationAccordingTo = true && that.isSetLocationAccordingTo();
    if (this_present_locationAccordingTo || that_present_locationAccordingTo) {
      if (!(this_present_locationAccordingTo && that_present_locationAccordingTo))
        return false;
      if (!this.locationAccordingTo.equals(that.locationAccordingTo))
        return false;
    }

    boolean this_present_locationID = true && this.isSetLocationID();
    boolean that_present_locationID = true && that.isSetLocationID();
    if (this_present_locationID || that_present_locationID) {
      if (!(this_present_locationID && that_present_locationID))
        return false;
      if (!this.locationID.equals(that.locationID))
        return false;
    }

    boolean this_present_locationRemarks = true && this.isSetLocationRemarks();
    boolean that_present_locationRemarks = true && that.isSetLocationRemarks();
    if (this_present_locationRemarks || that_present_locationRemarks) {
      if (!(this_present_locationRemarks && that_present_locationRemarks))
        return false;
      if (!this.locationRemarks.equals(that.locationRemarks))
        return false;
    }

    boolean this_present_maximumDepthInMeters = true && this.isSetMaximumDepthInMeters();
    boolean that_present_maximumDepthInMeters = true && that.isSetMaximumDepthInMeters();
    if (this_present_maximumDepthInMeters || that_present_maximumDepthInMeters) {
      if (!(this_present_maximumDepthInMeters && that_present_maximumDepthInMeters))
        return false;
      if (!this.maximumDepthInMeters.equals(that.maximumDepthInMeters))
        return false;
    }

    boolean this_present_maximumDistanceAboveSurfaceInMeters = true && this.isSetMaximumDistanceAboveSurfaceInMeters();
    boolean that_present_maximumDistanceAboveSurfaceInMeters = true && that.isSetMaximumDistanceAboveSurfaceInMeters();
    if (this_present_maximumDistanceAboveSurfaceInMeters || that_present_maximumDistanceAboveSurfaceInMeters) {
      if (!(this_present_maximumDistanceAboveSurfaceInMeters && that_present_maximumDistanceAboveSurfaceInMeters))
        return false;
      if (!this.maximumDistanceAboveSurfaceInMeters.equals(that.maximumDistanceAboveSurfaceInMeters))
        return false;
    }

    boolean this_present_maximumElevationInMeters = true && this.isSetMaximumElevationInMeters();
    boolean that_present_maximumElevationInMeters = true && that.isSetMaximumElevationInMeters();
    if (this_present_maximumElevationInMeters || that_present_maximumElevationInMeters) {
      if (!(this_present_maximumElevationInMeters && that_present_maximumElevationInMeters))
        return false;
      if (!this.maximumElevationInMeters.equals(that.maximumElevationInMeters))
        return false;
    }

    boolean this_present_minimumDepthInMeters = true && this.isSetMinimumDepthInMeters();
    boolean that_present_minimumDepthInMeters = true && that.isSetMinimumDepthInMeters();
    if (this_present_minimumDepthInMeters || that_present_minimumDepthInMeters) {
      if (!(this_present_minimumDepthInMeters && that_present_minimumDepthInMeters))
        return false;
      if (!this.minimumDepthInMeters.equals(that.minimumDepthInMeters))
        return false;
    }

    boolean this_present_minimumDistanceAboveSurfaceInMeters = true && this.isSetMinimumDistanceAboveSurfaceInMeters();
    boolean that_present_minimumDistanceAboveSurfaceInMeters = true && that.isSetMinimumDistanceAboveSurfaceInMeters();
    if (this_present_minimumDistanceAboveSurfaceInMeters || that_present_minimumDistanceAboveSurfaceInMeters) {
      if (!(this_present_minimumDistanceAboveSurfaceInMeters && that_present_minimumDistanceAboveSurfaceInMeters))
        return false;
      if (!this.minimumDistanceAboveSurfaceInMeters.equals(that.minimumDistanceAboveSurfaceInMeters))
        return false;
    }

    boolean this_present_minimumElevationInMeters = true && this.isSetMinimumElevationInMeters();
    boolean that_present_minimumElevationInMeters = true && that.isSetMinimumElevationInMeters();
    if (this_present_minimumElevationInMeters || that_present_minimumElevationInMeters) {
      if (!(this_present_minimumElevationInMeters && that_present_minimumElevationInMeters))
        return false;
      if (!this.minimumElevationInMeters.equals(that.minimumElevationInMeters))
        return false;
    }

    boolean this_present_municipality = true && this.isSetMunicipality();
    boolean that_present_municipality = true && that.isSetMunicipality();
    if (this_present_municipality || that_present_municipality) {
      if (!(this_present_municipality && that_present_municipality))
        return false;
      if (!this.municipality.equals(that.municipality))
        return false;
    }

    boolean this_present_pointRadiusSpatialFit = true && this.isSetPointRadiusSpatialFit();
    boolean that_present_pointRadiusSpatialFit = true && that.isSetPointRadiusSpatialFit();
    if (this_present_pointRadiusSpatialFit || that_present_pointRadiusSpatialFit) {
      if (!(this_present_pointRadiusSpatialFit && that_present_pointRadiusSpatialFit))
        return false;
      if (!this.pointRadiusSpatialFit.equals(that.pointRadiusSpatialFit))
        return false;
    }

    boolean this_present_stateProvince = true && this.isSetStateProvince();
    boolean that_present_stateProvince = true && that.isSetStateProvince();
    if (this_present_stateProvince || that_present_stateProvince) {
      if (!(this_present_stateProvince && that_present_stateProvince))
        return false;
      if (!this.stateProvince.equals(that.stateProvince))
        return false;
    }

    boolean this_present_verbatimCoordinateSystem = true && this.isSetVerbatimCoordinateSystem();
    boolean that_present_verbatimCoordinateSystem = true && that.isSetVerbatimCoordinateSystem();
    if (this_present_verbatimCoordinateSystem || that_present_verbatimCoordinateSystem) {
      if (!(this_present_verbatimCoordinateSystem && that_present_verbatimCoordinateSystem))
        return false;
      if (!this.verbatimCoordinateSystem.equals(that.verbatimCoordinateSystem))
        return false;
    }

    boolean this_present_verbatimCoordinates = true && this.isSetVerbatimCoordinates();
    boolean that_present_verbatimCoordinates = true && that.isSetVerbatimCoordinates();
    if (this_present_verbatimCoordinates || that_present_verbatimCoordinates) {
      if (!(this_present_verbatimCoordinates && that_present_verbatimCoordinates))
        return false;
      if (!this.verbatimCoordinates.equals(that.verbatimCoordinates))
        return false;
    }

    boolean this_present_verbatimDepth = true && this.isSetVerbatimDepth();
    boolean that_present_verbatimDepth = true && that.isSetVerbatimDepth();
    if (this_present_verbatimDepth || that_present_verbatimDepth) {
      if (!(this_present_verbatimDepth && that_present_verbatimDepth))
        return false;
      if (!this.verbatimDepth.equals(that.verbatimDepth))
        return false;
    }

    boolean this_present_verbatimElevation = true && this.isSetVerbatimElevation();
    boolean that_present_verbatimElevation = true && that.isSetVerbatimElevation();
    if (this_present_verbatimElevation || that_present_verbatimElevation) {
      if (!(this_present_verbatimElevation && that_present_verbatimElevation))
        return false;
      if (!this.verbatimElevation.equals(that.verbatimElevation))
        return false;
    }

    boolean this_present_verbatimLatitude = true && this.isSetVerbatimLatitude();
    boolean that_present_verbatimLatitude = true && that.isSetVerbatimLatitude();
    if (this_present_verbatimLatitude || that_present_verbatimLatitude) {
      if (!(this_present_verbatimLatitude && that_present_verbatimLatitude))
        return false;
      if (!this.verbatimLatitude.equals(that.verbatimLatitude))
        return false;
    }

    boolean this_present_verbatimLocality = true && this.isSetVerbatimLocality();
    boolean that_present_verbatimLocality = true && that.isSetVerbatimLocality();
    if (this_present_verbatimLocality || that_present_verbatimLocality) {
      if (!(this_present_verbatimLocality && that_present_verbatimLocality))
        return false;
      if (!this.verbatimLocality.equals(that.verbatimLocality))
        return false;
    }

    boolean this_present_verbatimLongitude = true && this.isSetVerbatimLongitude();
    boolean that_present_verbatimLongitude = true && that.isSetVerbatimLongitude();
    if (this_present_verbatimLongitude || that_present_verbatimLongitude) {
      if (!(this_present_verbatimLongitude && that_present_verbatimLongitude))
        return false;
      if (!this.verbatimLongitude.equals(that.verbatimLongitude))
        return false;
    }

    boolean this_present_verbatimSRS = true && this.isSetVerbatimSRS();
    boolean that_present_verbatimSRS = true && that.isSetVerbatimSRS();
    if (this_present_verbatimSRS || that_present_verbatimSRS) {
      if (!(this_present_verbatimSRS && that_present_verbatimSRS))
        return false;
      if (!this.verbatimSRS.equals(that.verbatimSRS))
        return false;
    }

    boolean this_present_waterBody = true && this.isSetWaterBody();
    boolean that_present_waterBody = true && that.isSetWaterBody();
    if (this_present_waterBody || that_present_waterBody) {
      if (!(this_present_waterBody && that_present_waterBody))
        return false;
      if (!this.waterBody.equals(that.waterBody))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_continent = true && (isSetContinent());
    builder.append(present_continent);
    if (present_continent)
      builder.append(continent);

    boolean present_coordinatePrecision = true && (isSetCoordinatePrecision());
    builder.append(present_coordinatePrecision);
    if (present_coordinatePrecision)
      builder.append(coordinatePrecision);

    boolean present_coordinateUncertaintyInMeters = true && (isSetCoordinateUncertaintyInMeters());
    builder.append(present_coordinateUncertaintyInMeters);
    if (present_coordinateUncertaintyInMeters)
      builder.append(coordinateUncertaintyInMeters);

    boolean present_country = true && (isSetCountry());
    builder.append(present_country);
    if (present_country)
      builder.append(country);

    boolean present_countryCode = true && (isSetCountryCode());
    builder.append(present_countryCode);
    if (present_countryCode)
      builder.append(countryCode);

    boolean present_county = true && (isSetCounty());
    builder.append(present_county);
    if (present_county)
      builder.append(county);

    boolean present_decimalLatitude = true && (isSetDecimalLatitude());
    builder.append(present_decimalLatitude);
    if (present_decimalLatitude)
      builder.append(decimalLatitude);

    boolean present_decimalLongitude = true && (isSetDecimalLongitude());
    builder.append(present_decimalLongitude);
    if (present_decimalLongitude)
      builder.append(decimalLongitude);

    boolean present_footprintSRS = true && (isSetFootprintSRS());
    builder.append(present_footprintSRS);
    if (present_footprintSRS)
      builder.append(footprintSRS);

    boolean present_footprintSpatialFit = true && (isSetFootprintSpatialFit());
    builder.append(present_footprintSpatialFit);
    if (present_footprintSpatialFit)
      builder.append(footprintSpatialFit);

    boolean present_footprintWKT = true && (isSetFootprintWKT());
    builder.append(present_footprintWKT);
    if (present_footprintWKT)
      builder.append(footprintWKT);

    boolean present_geodeticDatum = true && (isSetGeodeticDatum());
    builder.append(present_geodeticDatum);
    if (present_geodeticDatum)
      builder.append(geodeticDatum);

    boolean present_georeferenceProtocol = true && (isSetGeoreferenceProtocol());
    builder.append(present_georeferenceProtocol);
    if (present_georeferenceProtocol)
      builder.append(georeferenceProtocol);

    boolean present_georeferenceRemarks = true && (isSetGeoreferenceRemarks());
    builder.append(present_georeferenceRemarks);
    if (present_georeferenceRemarks)
      builder.append(georeferenceRemarks);

    boolean present_georeferenceSources = true && (isSetGeoreferenceSources());
    builder.append(present_georeferenceSources);
    if (present_georeferenceSources)
      builder.append(georeferenceSources);

    boolean present_georeferenceVerificationStatus = true && (isSetGeoreferenceVerificationStatus());
    builder.append(present_georeferenceVerificationStatus);
    if (present_georeferenceVerificationStatus)
      builder.append(georeferenceVerificationStatus);

    boolean present_georeferencedBy = true && (isSetGeoreferencedBy());
    builder.append(present_georeferencedBy);
    if (present_georeferencedBy)
      builder.append(georeferencedBy);

    boolean present_georeferencedDate = true && (isSetGeoreferencedDate());
    builder.append(present_georeferencedDate);
    if (present_georeferencedDate)
      builder.append(georeferencedDate);

    boolean present_higherGeography = true && (isSetHigherGeography());
    builder.append(present_higherGeography);
    if (present_higherGeography)
      builder.append(higherGeography);

    boolean present_higherGeographyID = true && (isSetHigherGeographyID());
    builder.append(present_higherGeographyID);
    if (present_higherGeographyID)
      builder.append(higherGeographyID);

    boolean present_island = true && (isSetIsland());
    builder.append(present_island);
    if (present_island)
      builder.append(island);

    boolean present_islandGroup = true && (isSetIslandGroup());
    builder.append(present_islandGroup);
    if (present_islandGroup)
      builder.append(islandGroup);

    boolean present_locality = true && (isSetLocality());
    builder.append(present_locality);
    if (present_locality)
      builder.append(locality);

    boolean present_locationAccordingTo = true && (isSetLocationAccordingTo());
    builder.append(present_locationAccordingTo);
    if (present_locationAccordingTo)
      builder.append(locationAccordingTo);

    boolean present_locationID = true && (isSetLocationID());
    builder.append(present_locationID);
    if (present_locationID)
      builder.append(locationID);

    boolean present_locationRemarks = true && (isSetLocationRemarks());
    builder.append(present_locationRemarks);
    if (present_locationRemarks)
      builder.append(locationRemarks);

    boolean present_maximumDepthInMeters = true && (isSetMaximumDepthInMeters());
    builder.append(present_maximumDepthInMeters);
    if (present_maximumDepthInMeters)
      builder.append(maximumDepthInMeters);

    boolean present_maximumDistanceAboveSurfaceInMeters = true && (isSetMaximumDistanceAboveSurfaceInMeters());
    builder.append(present_maximumDistanceAboveSurfaceInMeters);
    if (present_maximumDistanceAboveSurfaceInMeters)
      builder.append(maximumDistanceAboveSurfaceInMeters);

    boolean present_maximumElevationInMeters = true && (isSetMaximumElevationInMeters());
    builder.append(present_maximumElevationInMeters);
    if (present_maximumElevationInMeters)
      builder.append(maximumElevationInMeters);

    boolean present_minimumDepthInMeters = true && (isSetMinimumDepthInMeters());
    builder.append(present_minimumDepthInMeters);
    if (present_minimumDepthInMeters)
      builder.append(minimumDepthInMeters);

    boolean present_minimumDistanceAboveSurfaceInMeters = true && (isSetMinimumDistanceAboveSurfaceInMeters());
    builder.append(present_minimumDistanceAboveSurfaceInMeters);
    if (present_minimumDistanceAboveSurfaceInMeters)
      builder.append(minimumDistanceAboveSurfaceInMeters);

    boolean present_minimumElevationInMeters = true && (isSetMinimumElevationInMeters());
    builder.append(present_minimumElevationInMeters);
    if (present_minimumElevationInMeters)
      builder.append(minimumElevationInMeters);

    boolean present_municipality = true && (isSetMunicipality());
    builder.append(present_municipality);
    if (present_municipality)
      builder.append(municipality);

    boolean present_pointRadiusSpatialFit = true && (isSetPointRadiusSpatialFit());
    builder.append(present_pointRadiusSpatialFit);
    if (present_pointRadiusSpatialFit)
      builder.append(pointRadiusSpatialFit);

    boolean present_stateProvince = true && (isSetStateProvince());
    builder.append(present_stateProvince);
    if (present_stateProvince)
      builder.append(stateProvince);

    boolean present_verbatimCoordinateSystem = true && (isSetVerbatimCoordinateSystem());
    builder.append(present_verbatimCoordinateSystem);
    if (present_verbatimCoordinateSystem)
      builder.append(verbatimCoordinateSystem);

    boolean present_verbatimCoordinates = true && (isSetVerbatimCoordinates());
    builder.append(present_verbatimCoordinates);
    if (present_verbatimCoordinates)
      builder.append(verbatimCoordinates);

    boolean present_verbatimDepth = true && (isSetVerbatimDepth());
    builder.append(present_verbatimDepth);
    if (present_verbatimDepth)
      builder.append(verbatimDepth);

    boolean present_verbatimElevation = true && (isSetVerbatimElevation());
    builder.append(present_verbatimElevation);
    if (present_verbatimElevation)
      builder.append(verbatimElevation);

    boolean present_verbatimLatitude = true && (isSetVerbatimLatitude());
    builder.append(present_verbatimLatitude);
    if (present_verbatimLatitude)
      builder.append(verbatimLatitude);

    boolean present_verbatimLocality = true && (isSetVerbatimLocality());
    builder.append(present_verbatimLocality);
    if (present_verbatimLocality)
      builder.append(verbatimLocality);

    boolean present_verbatimLongitude = true && (isSetVerbatimLongitude());
    builder.append(present_verbatimLongitude);
    if (present_verbatimLongitude)
      builder.append(verbatimLongitude);

    boolean present_verbatimSRS = true && (isSetVerbatimSRS());
    builder.append(present_verbatimSRS);
    if (present_verbatimSRS)
      builder.append(verbatimSRS);

    boolean present_waterBody = true && (isSetWaterBody());
    builder.append(present_waterBody);
    if (present_waterBody)
      builder.append(waterBody);

    return builder.toHashCode();
  }

  public int compareTo(Location other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Location typedOther = (Location)other;

    lastComparison = Boolean.valueOf(isSetContinent()).compareTo(typedOther.isSetContinent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContinent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.continent, typedOther.continent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordinatePrecision()).compareTo(typedOther.isSetCoordinatePrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinatePrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinatePrecision, typedOther.coordinatePrecision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordinateUncertaintyInMeters()).compareTo(typedOther.isSetCoordinateUncertaintyInMeters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinateUncertaintyInMeters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinateUncertaintyInMeters, typedOther.coordinateUncertaintyInMeters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(typedOther.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, typedOther.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryCode()).compareTo(typedOther.isSetCountryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, typedOther.countryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounty()).compareTo(typedOther.isSetCounty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.county, typedOther.county);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDecimalLatitude()).compareTo(typedOther.isSetDecimalLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecimalLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decimalLatitude, typedOther.decimalLatitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDecimalLongitude()).compareTo(typedOther.isSetDecimalLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecimalLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decimalLongitude, typedOther.decimalLongitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFootprintSRS()).compareTo(typedOther.isSetFootprintSRS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFootprintSRS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.footprintSRS, typedOther.footprintSRS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFootprintSpatialFit()).compareTo(typedOther.isSetFootprintSpatialFit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFootprintSpatialFit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.footprintSpatialFit, typedOther.footprintSpatialFit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFootprintWKT()).compareTo(typedOther.isSetFootprintWKT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFootprintWKT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.footprintWKT, typedOther.footprintWKT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeodeticDatum()).compareTo(typedOther.isSetGeodeticDatum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeodeticDatum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geodeticDatum, typedOther.geodeticDatum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoreferenceProtocol()).compareTo(typedOther.isSetGeoreferenceProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoreferenceProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.georeferenceProtocol, typedOther.georeferenceProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoreferenceRemarks()).compareTo(typedOther.isSetGeoreferenceRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoreferenceRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.georeferenceRemarks, typedOther.georeferenceRemarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoreferenceSources()).compareTo(typedOther.isSetGeoreferenceSources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoreferenceSources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.georeferenceSources, typedOther.georeferenceSources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoreferenceVerificationStatus()).compareTo(typedOther.isSetGeoreferenceVerificationStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoreferenceVerificationStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.georeferenceVerificationStatus, typedOther.georeferenceVerificationStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoreferencedBy()).compareTo(typedOther.isSetGeoreferencedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoreferencedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.georeferencedBy, typedOther.georeferencedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoreferencedDate()).compareTo(typedOther.isSetGeoreferencedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoreferencedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.georeferencedDate, typedOther.georeferencedDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHigherGeography()).compareTo(typedOther.isSetHigherGeography());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHigherGeography()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.higherGeography, typedOther.higherGeography);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHigherGeographyID()).compareTo(typedOther.isSetHigherGeographyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHigherGeographyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.higherGeographyID, typedOther.higherGeographyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsland()).compareTo(typedOther.isSetIsland());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsland()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.island, typedOther.island);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIslandGroup()).compareTo(typedOther.isSetIslandGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIslandGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.islandGroup, typedOther.islandGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocality()).compareTo(typedOther.isSetLocality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locality, typedOther.locality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationAccordingTo()).compareTo(typedOther.isSetLocationAccordingTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationAccordingTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationAccordingTo, typedOther.locationAccordingTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationID()).compareTo(typedOther.isSetLocationID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationID, typedOther.locationID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationRemarks()).compareTo(typedOther.isSetLocationRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationRemarks, typedOther.locationRemarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaximumDepthInMeters()).compareTo(typedOther.isSetMaximumDepthInMeters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaximumDepthInMeters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maximumDepthInMeters, typedOther.maximumDepthInMeters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaximumDistanceAboveSurfaceInMeters()).compareTo(typedOther.isSetMaximumDistanceAboveSurfaceInMeters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaximumDistanceAboveSurfaceInMeters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maximumDistanceAboveSurfaceInMeters, typedOther.maximumDistanceAboveSurfaceInMeters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaximumElevationInMeters()).compareTo(typedOther.isSetMaximumElevationInMeters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaximumElevationInMeters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maximumElevationInMeters, typedOther.maximumElevationInMeters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinimumDepthInMeters()).compareTo(typedOther.isSetMinimumDepthInMeters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinimumDepthInMeters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minimumDepthInMeters, typedOther.minimumDepthInMeters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinimumDistanceAboveSurfaceInMeters()).compareTo(typedOther.isSetMinimumDistanceAboveSurfaceInMeters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinimumDistanceAboveSurfaceInMeters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minimumDistanceAboveSurfaceInMeters, typedOther.minimumDistanceAboveSurfaceInMeters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinimumElevationInMeters()).compareTo(typedOther.isSetMinimumElevationInMeters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinimumElevationInMeters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minimumElevationInMeters, typedOther.minimumElevationInMeters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMunicipality()).compareTo(typedOther.isSetMunicipality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMunicipality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.municipality, typedOther.municipality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointRadiusSpatialFit()).compareTo(typedOther.isSetPointRadiusSpatialFit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointRadiusSpatialFit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointRadiusSpatialFit, typedOther.pointRadiusSpatialFit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStateProvince()).compareTo(typedOther.isSetStateProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateProvince, typedOther.stateProvince);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerbatimCoordinateSystem()).compareTo(typedOther.isSetVerbatimCoordinateSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerbatimCoordinateSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbatimCoordinateSystem, typedOther.verbatimCoordinateSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerbatimCoordinates()).compareTo(typedOther.isSetVerbatimCoordinates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerbatimCoordinates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbatimCoordinates, typedOther.verbatimCoordinates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerbatimDepth()).compareTo(typedOther.isSetVerbatimDepth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerbatimDepth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbatimDepth, typedOther.verbatimDepth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerbatimElevation()).compareTo(typedOther.isSetVerbatimElevation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerbatimElevation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbatimElevation, typedOther.verbatimElevation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerbatimLatitude()).compareTo(typedOther.isSetVerbatimLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerbatimLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbatimLatitude, typedOther.verbatimLatitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerbatimLocality()).compareTo(typedOther.isSetVerbatimLocality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerbatimLocality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbatimLocality, typedOther.verbatimLocality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerbatimLongitude()).compareTo(typedOther.isSetVerbatimLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerbatimLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbatimLongitude, typedOther.verbatimLongitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerbatimSRS()).compareTo(typedOther.isSetVerbatimSRS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerbatimSRS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbatimSRS, typedOther.verbatimSRS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaterBody()).compareTo(typedOther.isSetWaterBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaterBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waterBody, typedOther.waterBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Location(");
    boolean first = true;

    sb.append("continent:");
    if (this.continent == null) {
      sb.append("null");
    } else {
      sb.append(this.continent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coordinatePrecision:");
    if (this.coordinatePrecision == null) {
      sb.append("null");
    } else {
      sb.append(this.coordinatePrecision);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coordinateUncertaintyInMeters:");
    if (this.coordinateUncertaintyInMeters == null) {
      sb.append("null");
    } else {
      sb.append(this.coordinateUncertaintyInMeters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("countryCode:");
    if (this.countryCode == null) {
      sb.append("null");
    } else {
      sb.append(this.countryCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("county:");
    if (this.county == null) {
      sb.append("null");
    } else {
      sb.append(this.county);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("decimalLatitude:");
    if (this.decimalLatitude == null) {
      sb.append("null");
    } else {
      sb.append(this.decimalLatitude);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("decimalLongitude:");
    if (this.decimalLongitude == null) {
      sb.append("null");
    } else {
      sb.append(this.decimalLongitude);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("footprintSRS:");
    if (this.footprintSRS == null) {
      sb.append("null");
    } else {
      sb.append(this.footprintSRS);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("footprintSpatialFit:");
    if (this.footprintSpatialFit == null) {
      sb.append("null");
    } else {
      sb.append(this.footprintSpatialFit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("footprintWKT:");
    if (this.footprintWKT == null) {
      sb.append("null");
    } else {
      sb.append(this.footprintWKT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geodeticDatum:");
    if (this.geodeticDatum == null) {
      sb.append("null");
    } else {
      sb.append(this.geodeticDatum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("georeferenceProtocol:");
    if (this.georeferenceProtocol == null) {
      sb.append("null");
    } else {
      sb.append(this.georeferenceProtocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("georeferenceRemarks:");
    if (this.georeferenceRemarks == null) {
      sb.append("null");
    } else {
      sb.append(this.georeferenceRemarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("georeferenceSources:");
    if (this.georeferenceSources == null) {
      sb.append("null");
    } else {
      sb.append(this.georeferenceSources);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("georeferenceVerificationStatus:");
    if (this.georeferenceVerificationStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.georeferenceVerificationStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("georeferencedBy:");
    if (this.georeferencedBy == null) {
      sb.append("null");
    } else {
      sb.append(this.georeferencedBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("georeferencedDate:");
    if (this.georeferencedDate == null) {
      sb.append("null");
    } else {
      sb.append(this.georeferencedDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("higherGeography:");
    if (this.higherGeography == null) {
      sb.append("null");
    } else {
      sb.append(this.higherGeography);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("higherGeographyID:");
    if (this.higherGeographyID == null) {
      sb.append("null");
    } else {
      sb.append(this.higherGeographyID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("island:");
    if (this.island == null) {
      sb.append("null");
    } else {
      sb.append(this.island);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("islandGroup:");
    if (this.islandGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.islandGroup);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locality:");
    if (this.locality == null) {
      sb.append("null");
    } else {
      sb.append(this.locality);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationAccordingTo:");
    if (this.locationAccordingTo == null) {
      sb.append("null");
    } else {
      sb.append(this.locationAccordingTo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationID:");
    if (this.locationID == null) {
      sb.append("null");
    } else {
      sb.append(this.locationID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationRemarks:");
    if (this.locationRemarks == null) {
      sb.append("null");
    } else {
      sb.append(this.locationRemarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maximumDepthInMeters:");
    if (this.maximumDepthInMeters == null) {
      sb.append("null");
    } else {
      sb.append(this.maximumDepthInMeters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maximumDistanceAboveSurfaceInMeters:");
    if (this.maximumDistanceAboveSurfaceInMeters == null) {
      sb.append("null");
    } else {
      sb.append(this.maximumDistanceAboveSurfaceInMeters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maximumElevationInMeters:");
    if (this.maximumElevationInMeters == null) {
      sb.append("null");
    } else {
      sb.append(this.maximumElevationInMeters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minimumDepthInMeters:");
    if (this.minimumDepthInMeters == null) {
      sb.append("null");
    } else {
      sb.append(this.minimumDepthInMeters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minimumDistanceAboveSurfaceInMeters:");
    if (this.minimumDistanceAboveSurfaceInMeters == null) {
      sb.append("null");
    } else {
      sb.append(this.minimumDistanceAboveSurfaceInMeters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minimumElevationInMeters:");
    if (this.minimumElevationInMeters == null) {
      sb.append("null");
    } else {
      sb.append(this.minimumElevationInMeters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("municipality:");
    if (this.municipality == null) {
      sb.append("null");
    } else {
      sb.append(this.municipality);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pointRadiusSpatialFit:");
    if (this.pointRadiusSpatialFit == null) {
      sb.append("null");
    } else {
      sb.append(this.pointRadiusSpatialFit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stateProvince:");
    if (this.stateProvince == null) {
      sb.append("null");
    } else {
      sb.append(this.stateProvince);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verbatimCoordinateSystem:");
    if (this.verbatimCoordinateSystem == null) {
      sb.append("null");
    } else {
      sb.append(this.verbatimCoordinateSystem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verbatimCoordinates:");
    if (this.verbatimCoordinates == null) {
      sb.append("null");
    } else {
      sb.append(this.verbatimCoordinates);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verbatimDepth:");
    if (this.verbatimDepth == null) {
      sb.append("null");
    } else {
      sb.append(this.verbatimDepth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verbatimElevation:");
    if (this.verbatimElevation == null) {
      sb.append("null");
    } else {
      sb.append(this.verbatimElevation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verbatimLatitude:");
    if (this.verbatimLatitude == null) {
      sb.append("null");
    } else {
      sb.append(this.verbatimLatitude);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verbatimLocality:");
    if (this.verbatimLocality == null) {
      sb.append("null");
    } else {
      sb.append(this.verbatimLocality);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verbatimLongitude:");
    if (this.verbatimLongitude == null) {
      sb.append("null");
    } else {
      sb.append(this.verbatimLongitude);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verbatimSRS:");
    if (this.verbatimSRS == null) {
      sb.append("null");
    } else {
      sb.append(this.verbatimSRS);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("waterBody:");
    if (this.waterBody == null) {
      sb.append("null");
    } else {
      sb.append(this.waterBody);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LocationStandardSchemeFactory implements SchemeFactory {
    public LocationStandardScheme getScheme() {
      return new LocationStandardScheme();
    }
  }

  private static class LocationStandardScheme extends StandardScheme<Location> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Location struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTINENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.continent = iprot.readString();
              struct.setContinentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COORDINATE_PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coordinatePrecision = iprot.readString();
              struct.setCoordinatePrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COORDINATE_UNCERTAINTY_IN_METERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coordinateUncertaintyInMeters = iprot.readString();
              struct.setCoordinateUncertaintyInMetersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUNTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryCode = iprot.readString();
              struct.setCountryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.county = iprot.readString();
              struct.setCountyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DECIMAL_LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.decimalLatitude = iprot.readString();
              struct.setDecimalLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DECIMAL_LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.decimalLongitude = iprot.readString();
              struct.setDecimalLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FOOTPRINT_SRS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.footprintSRS = iprot.readString();
              struct.setFootprintSRSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FOOTPRINT_SPATIAL_FIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.footprintSpatialFit = iprot.readString();
              struct.setFootprintSpatialFitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FOOTPRINT_WKT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.footprintWKT = iprot.readString();
              struct.setFootprintWKTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GEODETIC_DATUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.geodeticDatum = iprot.readString();
              struct.setGeodeticDatumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GEOREFERENCE_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.georeferenceProtocol = iprot.readString();
              struct.setGeoreferenceProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // GEOREFERENCE_REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.georeferenceRemarks = iprot.readString();
              struct.setGeoreferenceRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GEOREFERENCE_SOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.georeferenceSources = iprot.readString();
              struct.setGeoreferenceSourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GEOREFERENCE_VERIFICATION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.georeferenceVerificationStatus = iprot.readString();
              struct.setGeoreferenceVerificationStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // GEOREFERENCED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.georeferencedBy = iprot.readString();
              struct.setGeoreferencedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // GEOREFERENCED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.georeferencedDate = iprot.readString();
              struct.setGeoreferencedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // HIGHER_GEOGRAPHY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.higherGeography = iprot.readString();
              struct.setHigherGeographyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HIGHER_GEOGRAPHY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.higherGeographyID = iprot.readString();
              struct.setHigherGeographyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ISLAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.island = iprot.readString();
              struct.setIslandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ISLAND_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.islandGroup = iprot.readString();
              struct.setIslandGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // LOCALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locality = iprot.readString();
              struct.setLocalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // LOCATION_ACCORDING_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locationAccordingTo = iprot.readString();
              struct.setLocationAccordingToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LOCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locationID = iprot.readString();
              struct.setLocationIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // LOCATION_REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locationRemarks = iprot.readString();
              struct.setLocationRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MAXIMUM_DEPTH_IN_METERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maximumDepthInMeters = iprot.readString();
              struct.setMaximumDepthInMetersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // MAXIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maximumDistanceAboveSurfaceInMeters = iprot.readString();
              struct.setMaximumDistanceAboveSurfaceInMetersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // MAXIMUM_ELEVATION_IN_METERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maximumElevationInMeters = iprot.readString();
              struct.setMaximumElevationInMetersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // MINIMUM_DEPTH_IN_METERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.minimumDepthInMeters = iprot.readString();
              struct.setMinimumDepthInMetersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // MINIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.minimumDistanceAboveSurfaceInMeters = iprot.readString();
              struct.setMinimumDistanceAboveSurfaceInMetersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // MINIMUM_ELEVATION_IN_METERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.minimumElevationInMeters = iprot.readString();
              struct.setMinimumElevationInMetersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // MUNICIPALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.municipality = iprot.readString();
              struct.setMunicipalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // POINT_RADIUS_SPATIAL_FIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pointRadiusSpatialFit = iprot.readString();
              struct.setPointRadiusSpatialFitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // STATE_PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stateProvince = iprot.readString();
              struct.setStateProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // VERBATIM_COORDINATE_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verbatimCoordinateSystem = iprot.readString();
              struct.setVerbatimCoordinateSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // VERBATIM_COORDINATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verbatimCoordinates = iprot.readString();
              struct.setVerbatimCoordinatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // VERBATIM_DEPTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verbatimDepth = iprot.readString();
              struct.setVerbatimDepthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // VERBATIM_ELEVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verbatimElevation = iprot.readString();
              struct.setVerbatimElevationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // VERBATIM_LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verbatimLatitude = iprot.readString();
              struct.setVerbatimLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // VERBATIM_LOCALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verbatimLocality = iprot.readString();
              struct.setVerbatimLocalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // VERBATIM_LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verbatimLongitude = iprot.readString();
              struct.setVerbatimLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // VERBATIM_SRS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verbatimSRS = iprot.readString();
              struct.setVerbatimSRSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // WATER_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.waterBody = iprot.readString();
              struct.setWaterBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Location struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.continent != null) {
        oprot.writeFieldBegin(CONTINENT_FIELD_DESC);
        oprot.writeString(struct.continent);
        oprot.writeFieldEnd();
      }
      if (struct.coordinatePrecision != null) {
        oprot.writeFieldBegin(COORDINATE_PRECISION_FIELD_DESC);
        oprot.writeString(struct.coordinatePrecision);
        oprot.writeFieldEnd();
      }
      if (struct.coordinateUncertaintyInMeters != null) {
        oprot.writeFieldBegin(COORDINATE_UNCERTAINTY_IN_METERS_FIELD_DESC);
        oprot.writeString(struct.coordinateUncertaintyInMeters);
        oprot.writeFieldEnd();
      }
      if (struct.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(struct.country);
        oprot.writeFieldEnd();
      }
      if (struct.countryCode != null) {
        oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
        oprot.writeString(struct.countryCode);
        oprot.writeFieldEnd();
      }
      if (struct.county != null) {
        oprot.writeFieldBegin(COUNTY_FIELD_DESC);
        oprot.writeString(struct.county);
        oprot.writeFieldEnd();
      }
      if (struct.decimalLatitude != null) {
        oprot.writeFieldBegin(DECIMAL_LATITUDE_FIELD_DESC);
        oprot.writeString(struct.decimalLatitude);
        oprot.writeFieldEnd();
      }
      if (struct.decimalLongitude != null) {
        oprot.writeFieldBegin(DECIMAL_LONGITUDE_FIELD_DESC);
        oprot.writeString(struct.decimalLongitude);
        oprot.writeFieldEnd();
      }
      if (struct.footprintSRS != null) {
        oprot.writeFieldBegin(FOOTPRINT_SRS_FIELD_DESC);
        oprot.writeString(struct.footprintSRS);
        oprot.writeFieldEnd();
      }
      if (struct.footprintSpatialFit != null) {
        oprot.writeFieldBegin(FOOTPRINT_SPATIAL_FIT_FIELD_DESC);
        oprot.writeString(struct.footprintSpatialFit);
        oprot.writeFieldEnd();
      }
      if (struct.footprintWKT != null) {
        oprot.writeFieldBegin(FOOTPRINT_WKT_FIELD_DESC);
        oprot.writeString(struct.footprintWKT);
        oprot.writeFieldEnd();
      }
      if (struct.geodeticDatum != null) {
        oprot.writeFieldBegin(GEODETIC_DATUM_FIELD_DESC);
        oprot.writeString(struct.geodeticDatum);
        oprot.writeFieldEnd();
      }
      if (struct.georeferenceProtocol != null) {
        oprot.writeFieldBegin(GEOREFERENCE_PROTOCOL_FIELD_DESC);
        oprot.writeString(struct.georeferenceProtocol);
        oprot.writeFieldEnd();
      }
      if (struct.georeferenceRemarks != null) {
        oprot.writeFieldBegin(GEOREFERENCE_REMARKS_FIELD_DESC);
        oprot.writeString(struct.georeferenceRemarks);
        oprot.writeFieldEnd();
      }
      if (struct.georeferenceSources != null) {
        oprot.writeFieldBegin(GEOREFERENCE_SOURCES_FIELD_DESC);
        oprot.writeString(struct.georeferenceSources);
        oprot.writeFieldEnd();
      }
      if (struct.georeferenceVerificationStatus != null) {
        oprot.writeFieldBegin(GEOREFERENCE_VERIFICATION_STATUS_FIELD_DESC);
        oprot.writeString(struct.georeferenceVerificationStatus);
        oprot.writeFieldEnd();
      }
      if (struct.georeferencedBy != null) {
        oprot.writeFieldBegin(GEOREFERENCED_BY_FIELD_DESC);
        oprot.writeString(struct.georeferencedBy);
        oprot.writeFieldEnd();
      }
      if (struct.georeferencedDate != null) {
        oprot.writeFieldBegin(GEOREFERENCED_DATE_FIELD_DESC);
        oprot.writeString(struct.georeferencedDate);
        oprot.writeFieldEnd();
      }
      if (struct.higherGeography != null) {
        oprot.writeFieldBegin(HIGHER_GEOGRAPHY_FIELD_DESC);
        oprot.writeString(struct.higherGeography);
        oprot.writeFieldEnd();
      }
      if (struct.higherGeographyID != null) {
        oprot.writeFieldBegin(HIGHER_GEOGRAPHY_ID_FIELD_DESC);
        oprot.writeString(struct.higherGeographyID);
        oprot.writeFieldEnd();
      }
      if (struct.island != null) {
        oprot.writeFieldBegin(ISLAND_FIELD_DESC);
        oprot.writeString(struct.island);
        oprot.writeFieldEnd();
      }
      if (struct.islandGroup != null) {
        oprot.writeFieldBegin(ISLAND_GROUP_FIELD_DESC);
        oprot.writeString(struct.islandGroup);
        oprot.writeFieldEnd();
      }
      if (struct.locality != null) {
        oprot.writeFieldBegin(LOCALITY_FIELD_DESC);
        oprot.writeString(struct.locality);
        oprot.writeFieldEnd();
      }
      if (struct.locationAccordingTo != null) {
        oprot.writeFieldBegin(LOCATION_ACCORDING_TO_FIELD_DESC);
        oprot.writeString(struct.locationAccordingTo);
        oprot.writeFieldEnd();
      }
      if (struct.locationID != null) {
        oprot.writeFieldBegin(LOCATION_ID_FIELD_DESC);
        oprot.writeString(struct.locationID);
        oprot.writeFieldEnd();
      }
      if (struct.locationRemarks != null) {
        oprot.writeFieldBegin(LOCATION_REMARKS_FIELD_DESC);
        oprot.writeString(struct.locationRemarks);
        oprot.writeFieldEnd();
      }
      if (struct.maximumDepthInMeters != null) {
        oprot.writeFieldBegin(MAXIMUM_DEPTH_IN_METERS_FIELD_DESC);
        oprot.writeString(struct.maximumDepthInMeters);
        oprot.writeFieldEnd();
      }
      if (struct.maximumDistanceAboveSurfaceInMeters != null) {
        oprot.writeFieldBegin(MAXIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS_FIELD_DESC);
        oprot.writeString(struct.maximumDistanceAboveSurfaceInMeters);
        oprot.writeFieldEnd();
      }
      if (struct.maximumElevationInMeters != null) {
        oprot.writeFieldBegin(MAXIMUM_ELEVATION_IN_METERS_FIELD_DESC);
        oprot.writeString(struct.maximumElevationInMeters);
        oprot.writeFieldEnd();
      }
      if (struct.minimumDepthInMeters != null) {
        oprot.writeFieldBegin(MINIMUM_DEPTH_IN_METERS_FIELD_DESC);
        oprot.writeString(struct.minimumDepthInMeters);
        oprot.writeFieldEnd();
      }
      if (struct.minimumDistanceAboveSurfaceInMeters != null) {
        oprot.writeFieldBegin(MINIMUM_DISTANCE_ABOVE_SURFACE_IN_METERS_FIELD_DESC);
        oprot.writeString(struct.minimumDistanceAboveSurfaceInMeters);
        oprot.writeFieldEnd();
      }
      if (struct.minimumElevationInMeters != null) {
        oprot.writeFieldBegin(MINIMUM_ELEVATION_IN_METERS_FIELD_DESC);
        oprot.writeString(struct.minimumElevationInMeters);
        oprot.writeFieldEnd();
      }
      if (struct.municipality != null) {
        oprot.writeFieldBegin(MUNICIPALITY_FIELD_DESC);
        oprot.writeString(struct.municipality);
        oprot.writeFieldEnd();
      }
      if (struct.pointRadiusSpatialFit != null) {
        oprot.writeFieldBegin(POINT_RADIUS_SPATIAL_FIT_FIELD_DESC);
        oprot.writeString(struct.pointRadiusSpatialFit);
        oprot.writeFieldEnd();
      }
      if (struct.stateProvince != null) {
        oprot.writeFieldBegin(STATE_PROVINCE_FIELD_DESC);
        oprot.writeString(struct.stateProvince);
        oprot.writeFieldEnd();
      }
      if (struct.verbatimCoordinateSystem != null) {
        oprot.writeFieldBegin(VERBATIM_COORDINATE_SYSTEM_FIELD_DESC);
        oprot.writeString(struct.verbatimCoordinateSystem);
        oprot.writeFieldEnd();
      }
      if (struct.verbatimCoordinates != null) {
        oprot.writeFieldBegin(VERBATIM_COORDINATES_FIELD_DESC);
        oprot.writeString(struct.verbatimCoordinates);
        oprot.writeFieldEnd();
      }
      if (struct.verbatimDepth != null) {
        oprot.writeFieldBegin(VERBATIM_DEPTH_FIELD_DESC);
        oprot.writeString(struct.verbatimDepth);
        oprot.writeFieldEnd();
      }
      if (struct.verbatimElevation != null) {
        oprot.writeFieldBegin(VERBATIM_ELEVATION_FIELD_DESC);
        oprot.writeString(struct.verbatimElevation);
        oprot.writeFieldEnd();
      }
      if (struct.verbatimLatitude != null) {
        oprot.writeFieldBegin(VERBATIM_LATITUDE_FIELD_DESC);
        oprot.writeString(struct.verbatimLatitude);
        oprot.writeFieldEnd();
      }
      if (struct.verbatimLocality != null) {
        oprot.writeFieldBegin(VERBATIM_LOCALITY_FIELD_DESC);
        oprot.writeString(struct.verbatimLocality);
        oprot.writeFieldEnd();
      }
      if (struct.verbatimLongitude != null) {
        oprot.writeFieldBegin(VERBATIM_LONGITUDE_FIELD_DESC);
        oprot.writeString(struct.verbatimLongitude);
        oprot.writeFieldEnd();
      }
      if (struct.verbatimSRS != null) {
        oprot.writeFieldBegin(VERBATIM_SRS_FIELD_DESC);
        oprot.writeString(struct.verbatimSRS);
        oprot.writeFieldEnd();
      }
      if (struct.waterBody != null) {
        oprot.writeFieldBegin(WATER_BODY_FIELD_DESC);
        oprot.writeString(struct.waterBody);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LocationTupleSchemeFactory implements SchemeFactory {
    public LocationTupleScheme getScheme() {
      return new LocationTupleScheme();
    }
  }

  private static class LocationTupleScheme extends TupleScheme<Location> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Location struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContinent()) {
        optionals.set(0);
      }
      if (struct.isSetCoordinatePrecision()) {
        optionals.set(1);
      }
      if (struct.isSetCoordinateUncertaintyInMeters()) {
        optionals.set(2);
      }
      if (struct.isSetCountry()) {
        optionals.set(3);
      }
      if (struct.isSetCountryCode()) {
        optionals.set(4);
      }
      if (struct.isSetCounty()) {
        optionals.set(5);
      }
      if (struct.isSetDecimalLatitude()) {
        optionals.set(6);
      }
      if (struct.isSetDecimalLongitude()) {
        optionals.set(7);
      }
      if (struct.isSetFootprintSRS()) {
        optionals.set(8);
      }
      if (struct.isSetFootprintSpatialFit()) {
        optionals.set(9);
      }
      if (struct.isSetFootprintWKT()) {
        optionals.set(10);
      }
      if (struct.isSetGeodeticDatum()) {
        optionals.set(11);
      }
      if (struct.isSetGeoreferenceProtocol()) {
        optionals.set(12);
      }
      if (struct.isSetGeoreferenceRemarks()) {
        optionals.set(13);
      }
      if (struct.isSetGeoreferenceSources()) {
        optionals.set(14);
      }
      if (struct.isSetGeoreferenceVerificationStatus()) {
        optionals.set(15);
      }
      if (struct.isSetGeoreferencedBy()) {
        optionals.set(16);
      }
      if (struct.isSetGeoreferencedDate()) {
        optionals.set(17);
      }
      if (struct.isSetHigherGeography()) {
        optionals.set(18);
      }
      if (struct.isSetHigherGeographyID()) {
        optionals.set(19);
      }
      if (struct.isSetIsland()) {
        optionals.set(20);
      }
      if (struct.isSetIslandGroup()) {
        optionals.set(21);
      }
      if (struct.isSetLocality()) {
        optionals.set(22);
      }
      if (struct.isSetLocationAccordingTo()) {
        optionals.set(23);
      }
      if (struct.isSetLocationID()) {
        optionals.set(24);
      }
      if (struct.isSetLocationRemarks()) {
        optionals.set(25);
      }
      if (struct.isSetMaximumDepthInMeters()) {
        optionals.set(26);
      }
      if (struct.isSetMaximumDistanceAboveSurfaceInMeters()) {
        optionals.set(27);
      }
      if (struct.isSetMaximumElevationInMeters()) {
        optionals.set(28);
      }
      if (struct.isSetMinimumDepthInMeters()) {
        optionals.set(29);
      }
      if (struct.isSetMinimumDistanceAboveSurfaceInMeters()) {
        optionals.set(30);
      }
      if (struct.isSetMinimumElevationInMeters()) {
        optionals.set(31);
      }
      if (struct.isSetMunicipality()) {
        optionals.set(32);
      }
      if (struct.isSetPointRadiusSpatialFit()) {
        optionals.set(33);
      }
      if (struct.isSetStateProvince()) {
        optionals.set(34);
      }
      if (struct.isSetVerbatimCoordinateSystem()) {
        optionals.set(35);
      }
      if (struct.isSetVerbatimCoordinates()) {
        optionals.set(36);
      }
      if (struct.isSetVerbatimDepth()) {
        optionals.set(37);
      }
      if (struct.isSetVerbatimElevation()) {
        optionals.set(38);
      }
      if (struct.isSetVerbatimLatitude()) {
        optionals.set(39);
      }
      if (struct.isSetVerbatimLocality()) {
        optionals.set(40);
      }
      if (struct.isSetVerbatimLongitude()) {
        optionals.set(41);
      }
      if (struct.isSetVerbatimSRS()) {
        optionals.set(42);
      }
      if (struct.isSetWaterBody()) {
        optionals.set(43);
      }
      oprot.writeBitSet(optionals, 44);
      if (struct.isSetContinent()) {
        oprot.writeString(struct.continent);
      }
      if (struct.isSetCoordinatePrecision()) {
        oprot.writeString(struct.coordinatePrecision);
      }
      if (struct.isSetCoordinateUncertaintyInMeters()) {
        oprot.writeString(struct.coordinateUncertaintyInMeters);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetCountryCode()) {
        oprot.writeString(struct.countryCode);
      }
      if (struct.isSetCounty()) {
        oprot.writeString(struct.county);
      }
      if (struct.isSetDecimalLatitude()) {
        oprot.writeString(struct.decimalLatitude);
      }
      if (struct.isSetDecimalLongitude()) {
        oprot.writeString(struct.decimalLongitude);
      }
      if (struct.isSetFootprintSRS()) {
        oprot.writeString(struct.footprintSRS);
      }
      if (struct.isSetFootprintSpatialFit()) {
        oprot.writeString(struct.footprintSpatialFit);
      }
      if (struct.isSetFootprintWKT()) {
        oprot.writeString(struct.footprintWKT);
      }
      if (struct.isSetGeodeticDatum()) {
        oprot.writeString(struct.geodeticDatum);
      }
      if (struct.isSetGeoreferenceProtocol()) {
        oprot.writeString(struct.georeferenceProtocol);
      }
      if (struct.isSetGeoreferenceRemarks()) {
        oprot.writeString(struct.georeferenceRemarks);
      }
      if (struct.isSetGeoreferenceSources()) {
        oprot.writeString(struct.georeferenceSources);
      }
      if (struct.isSetGeoreferenceVerificationStatus()) {
        oprot.writeString(struct.georeferenceVerificationStatus);
      }
      if (struct.isSetGeoreferencedBy()) {
        oprot.writeString(struct.georeferencedBy);
      }
      if (struct.isSetGeoreferencedDate()) {
        oprot.writeString(struct.georeferencedDate);
      }
      if (struct.isSetHigherGeography()) {
        oprot.writeString(struct.higherGeography);
      }
      if (struct.isSetHigherGeographyID()) {
        oprot.writeString(struct.higherGeographyID);
      }
      if (struct.isSetIsland()) {
        oprot.writeString(struct.island);
      }
      if (struct.isSetIslandGroup()) {
        oprot.writeString(struct.islandGroup);
      }
      if (struct.isSetLocality()) {
        oprot.writeString(struct.locality);
      }
      if (struct.isSetLocationAccordingTo()) {
        oprot.writeString(struct.locationAccordingTo);
      }
      if (struct.isSetLocationID()) {
        oprot.writeString(struct.locationID);
      }
      if (struct.isSetLocationRemarks()) {
        oprot.writeString(struct.locationRemarks);
      }
      if (struct.isSetMaximumDepthInMeters()) {
        oprot.writeString(struct.maximumDepthInMeters);
      }
      if (struct.isSetMaximumDistanceAboveSurfaceInMeters()) {
        oprot.writeString(struct.maximumDistanceAboveSurfaceInMeters);
      }
      if (struct.isSetMaximumElevationInMeters()) {
        oprot.writeString(struct.maximumElevationInMeters);
      }
      if (struct.isSetMinimumDepthInMeters()) {
        oprot.writeString(struct.minimumDepthInMeters);
      }
      if (struct.isSetMinimumDistanceAboveSurfaceInMeters()) {
        oprot.writeString(struct.minimumDistanceAboveSurfaceInMeters);
      }
      if (struct.isSetMinimumElevationInMeters()) {
        oprot.writeString(struct.minimumElevationInMeters);
      }
      if (struct.isSetMunicipality()) {
        oprot.writeString(struct.municipality);
      }
      if (struct.isSetPointRadiusSpatialFit()) {
        oprot.writeString(struct.pointRadiusSpatialFit);
      }
      if (struct.isSetStateProvince()) {
        oprot.writeString(struct.stateProvince);
      }
      if (struct.isSetVerbatimCoordinateSystem()) {
        oprot.writeString(struct.verbatimCoordinateSystem);
      }
      if (struct.isSetVerbatimCoordinates()) {
        oprot.writeString(struct.verbatimCoordinates);
      }
      if (struct.isSetVerbatimDepth()) {
        oprot.writeString(struct.verbatimDepth);
      }
      if (struct.isSetVerbatimElevation()) {
        oprot.writeString(struct.verbatimElevation);
      }
      if (struct.isSetVerbatimLatitude()) {
        oprot.writeString(struct.verbatimLatitude);
      }
      if (struct.isSetVerbatimLocality()) {
        oprot.writeString(struct.verbatimLocality);
      }
      if (struct.isSetVerbatimLongitude()) {
        oprot.writeString(struct.verbatimLongitude);
      }
      if (struct.isSetVerbatimSRS()) {
        oprot.writeString(struct.verbatimSRS);
      }
      if (struct.isSetWaterBody()) {
        oprot.writeString(struct.waterBody);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Location struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(44);
      if (incoming.get(0)) {
        struct.continent = iprot.readString();
        struct.setContinentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.coordinatePrecision = iprot.readString();
        struct.setCoordinatePrecisionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.coordinateUncertaintyInMeters = iprot.readString();
        struct.setCoordinateUncertaintyInMetersIsSet(true);
      }
      if (incoming.get(3)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.countryCode = iprot.readString();
        struct.setCountryCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.county = iprot.readString();
        struct.setCountyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.decimalLatitude = iprot.readString();
        struct.setDecimalLatitudeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.decimalLongitude = iprot.readString();
        struct.setDecimalLongitudeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.footprintSRS = iprot.readString();
        struct.setFootprintSRSIsSet(true);
      }
      if (incoming.get(9)) {
        struct.footprintSpatialFit = iprot.readString();
        struct.setFootprintSpatialFitIsSet(true);
      }
      if (incoming.get(10)) {
        struct.footprintWKT = iprot.readString();
        struct.setFootprintWKTIsSet(true);
      }
      if (incoming.get(11)) {
        struct.geodeticDatum = iprot.readString();
        struct.setGeodeticDatumIsSet(true);
      }
      if (incoming.get(12)) {
        struct.georeferenceProtocol = iprot.readString();
        struct.setGeoreferenceProtocolIsSet(true);
      }
      if (incoming.get(13)) {
        struct.georeferenceRemarks = iprot.readString();
        struct.setGeoreferenceRemarksIsSet(true);
      }
      if (incoming.get(14)) {
        struct.georeferenceSources = iprot.readString();
        struct.setGeoreferenceSourcesIsSet(true);
      }
      if (incoming.get(15)) {
        struct.georeferenceVerificationStatus = iprot.readString();
        struct.setGeoreferenceVerificationStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.georeferencedBy = iprot.readString();
        struct.setGeoreferencedByIsSet(true);
      }
      if (incoming.get(17)) {
        struct.georeferencedDate = iprot.readString();
        struct.setGeoreferencedDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.higherGeography = iprot.readString();
        struct.setHigherGeographyIsSet(true);
      }
      if (incoming.get(19)) {
        struct.higherGeographyID = iprot.readString();
        struct.setHigherGeographyIDIsSet(true);
      }
      if (incoming.get(20)) {
        struct.island = iprot.readString();
        struct.setIslandIsSet(true);
      }
      if (incoming.get(21)) {
        struct.islandGroup = iprot.readString();
        struct.setIslandGroupIsSet(true);
      }
      if (incoming.get(22)) {
        struct.locality = iprot.readString();
        struct.setLocalityIsSet(true);
      }
      if (incoming.get(23)) {
        struct.locationAccordingTo = iprot.readString();
        struct.setLocationAccordingToIsSet(true);
      }
      if (incoming.get(24)) {
        struct.locationID = iprot.readString();
        struct.setLocationIDIsSet(true);
      }
      if (incoming.get(25)) {
        struct.locationRemarks = iprot.readString();
        struct.setLocationRemarksIsSet(true);
      }
      if (incoming.get(26)) {
        struct.maximumDepthInMeters = iprot.readString();
        struct.setMaximumDepthInMetersIsSet(true);
      }
      if (incoming.get(27)) {
        struct.maximumDistanceAboveSurfaceInMeters = iprot.readString();
        struct.setMaximumDistanceAboveSurfaceInMetersIsSet(true);
      }
      if (incoming.get(28)) {
        struct.maximumElevationInMeters = iprot.readString();
        struct.setMaximumElevationInMetersIsSet(true);
      }
      if (incoming.get(29)) {
        struct.minimumDepthInMeters = iprot.readString();
        struct.setMinimumDepthInMetersIsSet(true);
      }
      if (incoming.get(30)) {
        struct.minimumDistanceAboveSurfaceInMeters = iprot.readString();
        struct.setMinimumDistanceAboveSurfaceInMetersIsSet(true);
      }
      if (incoming.get(31)) {
        struct.minimumElevationInMeters = iprot.readString();
        struct.setMinimumElevationInMetersIsSet(true);
      }
      if (incoming.get(32)) {
        struct.municipality = iprot.readString();
        struct.setMunicipalityIsSet(true);
      }
      if (incoming.get(33)) {
        struct.pointRadiusSpatialFit = iprot.readString();
        struct.setPointRadiusSpatialFitIsSet(true);
      }
      if (incoming.get(34)) {
        struct.stateProvince = iprot.readString();
        struct.setStateProvinceIsSet(true);
      }
      if (incoming.get(35)) {
        struct.verbatimCoordinateSystem = iprot.readString();
        struct.setVerbatimCoordinateSystemIsSet(true);
      }
      if (incoming.get(36)) {
        struct.verbatimCoordinates = iprot.readString();
        struct.setVerbatimCoordinatesIsSet(true);
      }
      if (incoming.get(37)) {
        struct.verbatimDepth = iprot.readString();
        struct.setVerbatimDepthIsSet(true);
      }
      if (incoming.get(38)) {
        struct.verbatimElevation = iprot.readString();
        struct.setVerbatimElevationIsSet(true);
      }
      if (incoming.get(39)) {
        struct.verbatimLatitude = iprot.readString();
        struct.setVerbatimLatitudeIsSet(true);
      }
      if (incoming.get(40)) {
        struct.verbatimLocality = iprot.readString();
        struct.setVerbatimLocalityIsSet(true);
      }
      if (incoming.get(41)) {
        struct.verbatimLongitude = iprot.readString();
        struct.setVerbatimLongitudeIsSet(true);
      }
      if (incoming.get(42)) {
        struct.verbatimSRS = iprot.readString();
        struct.setVerbatimSRSIsSet(true);
      }
      if (incoming.get(43)) {
        struct.waterBody = iprot.readString();
        struct.setWaterBodyIsSet(true);
      }
    }
  }

}

