/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Darwin Core Event class structure.
 * 
 * http://rs.tdwg.org/dwc/terms/index.htm#eventindex
 */
public class Event implements org.apache.thrift.TBase<Event, Event._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Event");

  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField END_DAY_OF_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("endDayOfYear", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EVENT_REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("eventRemarks", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EVENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("eventTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FIELD_NOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldNotes", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FIELD_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldNumber", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HABITAT_FIELD_DESC = new org.apache.thrift.protocol.TField("habitat", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SAMPLING_EFFORT_FIELD_DESC = new org.apache.thrift.protocol.TField("samplingEffort", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SAMPLING_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("samplingProtocol", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField START_DAY_OF_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("startDayOfYear", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField VERBATIM_EVENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("verbatimEventDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EventTupleSchemeFactory());
  }

  public String day; // required
  public String endDayOfYear; // required
  public String eventDate; // required
  public String eventID; // required
  public String eventRemarks; // required
  public String eventTime; // required
  public String fieldNotes; // required
  public String fieldNumber; // required
  public String habitat; // required
  public String month; // required
  public String samplingEffort; // required
  public String samplingProtocol; // required
  public String startDayOfYear; // required
  public String verbatimEventDate; // required
  public String year; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DAY((short)1, "day"),
    END_DAY_OF_YEAR((short)2, "endDayOfYear"),
    EVENT_DATE((short)3, "eventDate"),
    EVENT_ID((short)4, "eventID"),
    EVENT_REMARKS((short)5, "eventRemarks"),
    EVENT_TIME((short)6, "eventTime"),
    FIELD_NOTES((short)7, "fieldNotes"),
    FIELD_NUMBER((short)8, "fieldNumber"),
    HABITAT((short)9, "habitat"),
    MONTH((short)10, "month"),
    SAMPLING_EFFORT((short)11, "samplingEffort"),
    SAMPLING_PROTOCOL((short)12, "samplingProtocol"),
    START_DAY_OF_YEAR((short)13, "startDayOfYear"),
    VERBATIM_EVENT_DATE((short)14, "verbatimEventDate"),
    YEAR((short)15, "year");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DAY
          return DAY;
        case 2: // END_DAY_OF_YEAR
          return END_DAY_OF_YEAR;
        case 3: // EVENT_DATE
          return EVENT_DATE;
        case 4: // EVENT_ID
          return EVENT_ID;
        case 5: // EVENT_REMARKS
          return EVENT_REMARKS;
        case 6: // EVENT_TIME
          return EVENT_TIME;
        case 7: // FIELD_NOTES
          return FIELD_NOTES;
        case 8: // FIELD_NUMBER
          return FIELD_NUMBER;
        case 9: // HABITAT
          return HABITAT;
        case 10: // MONTH
          return MONTH;
        case 11: // SAMPLING_EFFORT
          return SAMPLING_EFFORT;
        case 12: // SAMPLING_PROTOCOL
          return SAMPLING_PROTOCOL;
        case 13: // START_DAY_OF_YEAR
          return START_DAY_OF_YEAR;
        case 14: // VERBATIM_EVENT_DATE
          return VERBATIM_EVENT_DATE;
        case 15: // YEAR
          return YEAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DAY_OF_YEAR, new org.apache.thrift.meta_data.FieldMetaData("endDayOfYear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("eventDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_REMARKS, new org.apache.thrift.meta_data.FieldMetaData("eventRemarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("eventTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_NOTES, new org.apache.thrift.meta_data.FieldMetaData("fieldNotes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("fieldNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HABITAT, new org.apache.thrift.meta_data.FieldMetaData("habitat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAMPLING_EFFORT, new org.apache.thrift.meta_data.FieldMetaData("samplingEffort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAMPLING_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("samplingProtocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_DAY_OF_YEAR, new org.apache.thrift.meta_data.FieldMetaData("startDayOfYear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERBATIM_EVENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("verbatimEventDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Event.class, metaDataMap);
  }

  public Event() {
  }

  public Event(
    String day,
    String endDayOfYear,
    String eventDate,
    String eventID,
    String eventRemarks,
    String eventTime,
    String fieldNotes,
    String fieldNumber,
    String habitat,
    String month,
    String samplingEffort,
    String samplingProtocol,
    String startDayOfYear,
    String verbatimEventDate,
    String year)
  {
    this();
    this.day = day;
    this.endDayOfYear = endDayOfYear;
    this.eventDate = eventDate;
    this.eventID = eventID;
    this.eventRemarks = eventRemarks;
    this.eventTime = eventTime;
    this.fieldNotes = fieldNotes;
    this.fieldNumber = fieldNumber;
    this.habitat = habitat;
    this.month = month;
    this.samplingEffort = samplingEffort;
    this.samplingProtocol = samplingProtocol;
    this.startDayOfYear = startDayOfYear;
    this.verbatimEventDate = verbatimEventDate;
    this.year = year;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Event(Event other) {
    if (other.isSetDay()) {
      this.day = other.day;
    }
    if (other.isSetEndDayOfYear()) {
      this.endDayOfYear = other.endDayOfYear;
    }
    if (other.isSetEventDate()) {
      this.eventDate = other.eventDate;
    }
    if (other.isSetEventID()) {
      this.eventID = other.eventID;
    }
    if (other.isSetEventRemarks()) {
      this.eventRemarks = other.eventRemarks;
    }
    if (other.isSetEventTime()) {
      this.eventTime = other.eventTime;
    }
    if (other.isSetFieldNotes()) {
      this.fieldNotes = other.fieldNotes;
    }
    if (other.isSetFieldNumber()) {
      this.fieldNumber = other.fieldNumber;
    }
    if (other.isSetHabitat()) {
      this.habitat = other.habitat;
    }
    if (other.isSetMonth()) {
      this.month = other.month;
    }
    if (other.isSetSamplingEffort()) {
      this.samplingEffort = other.samplingEffort;
    }
    if (other.isSetSamplingProtocol()) {
      this.samplingProtocol = other.samplingProtocol;
    }
    if (other.isSetStartDayOfYear()) {
      this.startDayOfYear = other.startDayOfYear;
    }
    if (other.isSetVerbatimEventDate()) {
      this.verbatimEventDate = other.verbatimEventDate;
    }
    if (other.isSetYear()) {
      this.year = other.year;
    }
  }

  public Event deepCopy() {
    return new Event(this);
  }

  @Override
  public void clear() {
    this.day = null;
    this.endDayOfYear = null;
    this.eventDate = null;
    this.eventID = null;
    this.eventRemarks = null;
    this.eventTime = null;
    this.fieldNotes = null;
    this.fieldNumber = null;
    this.habitat = null;
    this.month = null;
    this.samplingEffort = null;
    this.samplingProtocol = null;
    this.startDayOfYear = null;
    this.verbatimEventDate = null;
    this.year = null;
  }

  public String getDay() {
    return this.day;
  }

  public Event setDay(String day) {
    this.day = day;
    return this;
  }

  public void unsetDay() {
    this.day = null;
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return this.day != null;
  }

  public void setDayIsSet(boolean value) {
    if (!value) {
      this.day = null;
    }
  }

  public String getEndDayOfYear() {
    return this.endDayOfYear;
  }

  public Event setEndDayOfYear(String endDayOfYear) {
    this.endDayOfYear = endDayOfYear;
    return this;
  }

  public void unsetEndDayOfYear() {
    this.endDayOfYear = null;
  }

  /** Returns true if field endDayOfYear is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDayOfYear() {
    return this.endDayOfYear != null;
  }

  public void setEndDayOfYearIsSet(boolean value) {
    if (!value) {
      this.endDayOfYear = null;
    }
  }

  public String getEventDate() {
    return this.eventDate;
  }

  public Event setEventDate(String eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  public void unsetEventDate() {
    this.eventDate = null;
  }

  /** Returns true if field eventDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEventDate() {
    return this.eventDate != null;
  }

  public void setEventDateIsSet(boolean value) {
    if (!value) {
      this.eventDate = null;
    }
  }

  public String getEventID() {
    return this.eventID;
  }

  public Event setEventID(String eventID) {
    this.eventID = eventID;
    return this;
  }

  public void unsetEventID() {
    this.eventID = null;
  }

  /** Returns true if field eventID is set (has been assigned a value) and false otherwise */
  public boolean isSetEventID() {
    return this.eventID != null;
  }

  public void setEventIDIsSet(boolean value) {
    if (!value) {
      this.eventID = null;
    }
  }

  public String getEventRemarks() {
    return this.eventRemarks;
  }

  public Event setEventRemarks(String eventRemarks) {
    this.eventRemarks = eventRemarks;
    return this;
  }

  public void unsetEventRemarks() {
    this.eventRemarks = null;
  }

  /** Returns true if field eventRemarks is set (has been assigned a value) and false otherwise */
  public boolean isSetEventRemarks() {
    return this.eventRemarks != null;
  }

  public void setEventRemarksIsSet(boolean value) {
    if (!value) {
      this.eventRemarks = null;
    }
  }

  public String getEventTime() {
    return this.eventTime;
  }

  public Event setEventTime(String eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  public void unsetEventTime() {
    this.eventTime = null;
  }

  /** Returns true if field eventTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEventTime() {
    return this.eventTime != null;
  }

  public void setEventTimeIsSet(boolean value) {
    if (!value) {
      this.eventTime = null;
    }
  }

  public String getFieldNotes() {
    return this.fieldNotes;
  }

  public Event setFieldNotes(String fieldNotes) {
    this.fieldNotes = fieldNotes;
    return this;
  }

  public void unsetFieldNotes() {
    this.fieldNotes = null;
  }

  /** Returns true if field fieldNotes is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldNotes() {
    return this.fieldNotes != null;
  }

  public void setFieldNotesIsSet(boolean value) {
    if (!value) {
      this.fieldNotes = null;
    }
  }

  public String getFieldNumber() {
    return this.fieldNumber;
  }

  public Event setFieldNumber(String fieldNumber) {
    this.fieldNumber = fieldNumber;
    return this;
  }

  public void unsetFieldNumber() {
    this.fieldNumber = null;
  }

  /** Returns true if field fieldNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldNumber() {
    return this.fieldNumber != null;
  }

  public void setFieldNumberIsSet(boolean value) {
    if (!value) {
      this.fieldNumber = null;
    }
  }

  public String getHabitat() {
    return this.habitat;
  }

  public Event setHabitat(String habitat) {
    this.habitat = habitat;
    return this;
  }

  public void unsetHabitat() {
    this.habitat = null;
  }

  /** Returns true if field habitat is set (has been assigned a value) and false otherwise */
  public boolean isSetHabitat() {
    return this.habitat != null;
  }

  public void setHabitatIsSet(boolean value) {
    if (!value) {
      this.habitat = null;
    }
  }

  public String getMonth() {
    return this.month;
  }

  public Event setMonth(String month) {
    this.month = month;
    return this;
  }

  public void unsetMonth() {
    this.month = null;
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return this.month != null;
  }

  public void setMonthIsSet(boolean value) {
    if (!value) {
      this.month = null;
    }
  }

  public String getSamplingEffort() {
    return this.samplingEffort;
  }

  public Event setSamplingEffort(String samplingEffort) {
    this.samplingEffort = samplingEffort;
    return this;
  }

  public void unsetSamplingEffort() {
    this.samplingEffort = null;
  }

  /** Returns true if field samplingEffort is set (has been assigned a value) and false otherwise */
  public boolean isSetSamplingEffort() {
    return this.samplingEffort != null;
  }

  public void setSamplingEffortIsSet(boolean value) {
    if (!value) {
      this.samplingEffort = null;
    }
  }

  public String getSamplingProtocol() {
    return this.samplingProtocol;
  }

  public Event setSamplingProtocol(String samplingProtocol) {
    this.samplingProtocol = samplingProtocol;
    return this;
  }

  public void unsetSamplingProtocol() {
    this.samplingProtocol = null;
  }

  /** Returns true if field samplingProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetSamplingProtocol() {
    return this.samplingProtocol != null;
  }

  public void setSamplingProtocolIsSet(boolean value) {
    if (!value) {
      this.samplingProtocol = null;
    }
  }

  public String getStartDayOfYear() {
    return this.startDayOfYear;
  }

  public Event setStartDayOfYear(String startDayOfYear) {
    this.startDayOfYear = startDayOfYear;
    return this;
  }

  public void unsetStartDayOfYear() {
    this.startDayOfYear = null;
  }

  /** Returns true if field startDayOfYear is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDayOfYear() {
    return this.startDayOfYear != null;
  }

  public void setStartDayOfYearIsSet(boolean value) {
    if (!value) {
      this.startDayOfYear = null;
    }
  }

  public String getVerbatimEventDate() {
    return this.verbatimEventDate;
  }

  public Event setVerbatimEventDate(String verbatimEventDate) {
    this.verbatimEventDate = verbatimEventDate;
    return this;
  }

  public void unsetVerbatimEventDate() {
    this.verbatimEventDate = null;
  }

  /** Returns true if field verbatimEventDate is set (has been assigned a value) and false otherwise */
  public boolean isSetVerbatimEventDate() {
    return this.verbatimEventDate != null;
  }

  public void setVerbatimEventDateIsSet(boolean value) {
    if (!value) {
      this.verbatimEventDate = null;
    }
  }

  public String getYear() {
    return this.year;
  }

  public Event setYear(String year) {
    this.year = year;
    return this;
  }

  public void unsetYear() {
    this.year = null;
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return this.year != null;
  }

  public void setYearIsSet(boolean value) {
    if (!value) {
      this.year = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((String)value);
      }
      break;

    case END_DAY_OF_YEAR:
      if (value == null) {
        unsetEndDayOfYear();
      } else {
        setEndDayOfYear((String)value);
      }
      break;

    case EVENT_DATE:
      if (value == null) {
        unsetEventDate();
      } else {
        setEventDate((String)value);
      }
      break;

    case EVENT_ID:
      if (value == null) {
        unsetEventID();
      } else {
        setEventID((String)value);
      }
      break;

    case EVENT_REMARKS:
      if (value == null) {
        unsetEventRemarks();
      } else {
        setEventRemarks((String)value);
      }
      break;

    case EVENT_TIME:
      if (value == null) {
        unsetEventTime();
      } else {
        setEventTime((String)value);
      }
      break;

    case FIELD_NOTES:
      if (value == null) {
        unsetFieldNotes();
      } else {
        setFieldNotes((String)value);
      }
      break;

    case FIELD_NUMBER:
      if (value == null) {
        unsetFieldNumber();
      } else {
        setFieldNumber((String)value);
      }
      break;

    case HABITAT:
      if (value == null) {
        unsetHabitat();
      } else {
        setHabitat((String)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((String)value);
      }
      break;

    case SAMPLING_EFFORT:
      if (value == null) {
        unsetSamplingEffort();
      } else {
        setSamplingEffort((String)value);
      }
      break;

    case SAMPLING_PROTOCOL:
      if (value == null) {
        unsetSamplingProtocol();
      } else {
        setSamplingProtocol((String)value);
      }
      break;

    case START_DAY_OF_YEAR:
      if (value == null) {
        unsetStartDayOfYear();
      } else {
        setStartDayOfYear((String)value);
      }
      break;

    case VERBATIM_EVENT_DATE:
      if (value == null) {
        unsetVerbatimEventDate();
      } else {
        setVerbatimEventDate((String)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DAY:
      return getDay();

    case END_DAY_OF_YEAR:
      return getEndDayOfYear();

    case EVENT_DATE:
      return getEventDate();

    case EVENT_ID:
      return getEventID();

    case EVENT_REMARKS:
      return getEventRemarks();

    case EVENT_TIME:
      return getEventTime();

    case FIELD_NOTES:
      return getFieldNotes();

    case FIELD_NUMBER:
      return getFieldNumber();

    case HABITAT:
      return getHabitat();

    case MONTH:
      return getMonth();

    case SAMPLING_EFFORT:
      return getSamplingEffort();

    case SAMPLING_PROTOCOL:
      return getSamplingProtocol();

    case START_DAY_OF_YEAR:
      return getStartDayOfYear();

    case VERBATIM_EVENT_DATE:
      return getVerbatimEventDate();

    case YEAR:
      return getYear();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DAY:
      return isSetDay();
    case END_DAY_OF_YEAR:
      return isSetEndDayOfYear();
    case EVENT_DATE:
      return isSetEventDate();
    case EVENT_ID:
      return isSetEventID();
    case EVENT_REMARKS:
      return isSetEventRemarks();
    case EVENT_TIME:
      return isSetEventTime();
    case FIELD_NOTES:
      return isSetFieldNotes();
    case FIELD_NUMBER:
      return isSetFieldNumber();
    case HABITAT:
      return isSetHabitat();
    case MONTH:
      return isSetMonth();
    case SAMPLING_EFFORT:
      return isSetSamplingEffort();
    case SAMPLING_PROTOCOL:
      return isSetSamplingProtocol();
    case START_DAY_OF_YEAR:
      return isSetStartDayOfYear();
    case VERBATIM_EVENT_DATE:
      return isSetVerbatimEventDate();
    case YEAR:
      return isSetYear();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Event)
      return this.equals((Event)that);
    return false;
  }

  public boolean equals(Event that) {
    if (that == null)
      return false;

    boolean this_present_day = true && this.isSetDay();
    boolean that_present_day = true && that.isSetDay();
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!this.day.equals(that.day))
        return false;
    }

    boolean this_present_endDayOfYear = true && this.isSetEndDayOfYear();
    boolean that_present_endDayOfYear = true && that.isSetEndDayOfYear();
    if (this_present_endDayOfYear || that_present_endDayOfYear) {
      if (!(this_present_endDayOfYear && that_present_endDayOfYear))
        return false;
      if (!this.endDayOfYear.equals(that.endDayOfYear))
        return false;
    }

    boolean this_present_eventDate = true && this.isSetEventDate();
    boolean that_present_eventDate = true && that.isSetEventDate();
    if (this_present_eventDate || that_present_eventDate) {
      if (!(this_present_eventDate && that_present_eventDate))
        return false;
      if (!this.eventDate.equals(that.eventDate))
        return false;
    }

    boolean this_present_eventID = true && this.isSetEventID();
    boolean that_present_eventID = true && that.isSetEventID();
    if (this_present_eventID || that_present_eventID) {
      if (!(this_present_eventID && that_present_eventID))
        return false;
      if (!this.eventID.equals(that.eventID))
        return false;
    }

    boolean this_present_eventRemarks = true && this.isSetEventRemarks();
    boolean that_present_eventRemarks = true && that.isSetEventRemarks();
    if (this_present_eventRemarks || that_present_eventRemarks) {
      if (!(this_present_eventRemarks && that_present_eventRemarks))
        return false;
      if (!this.eventRemarks.equals(that.eventRemarks))
        return false;
    }

    boolean this_present_eventTime = true && this.isSetEventTime();
    boolean that_present_eventTime = true && that.isSetEventTime();
    if (this_present_eventTime || that_present_eventTime) {
      if (!(this_present_eventTime && that_present_eventTime))
        return false;
      if (!this.eventTime.equals(that.eventTime))
        return false;
    }

    boolean this_present_fieldNotes = true && this.isSetFieldNotes();
    boolean that_present_fieldNotes = true && that.isSetFieldNotes();
    if (this_present_fieldNotes || that_present_fieldNotes) {
      if (!(this_present_fieldNotes && that_present_fieldNotes))
        return false;
      if (!this.fieldNotes.equals(that.fieldNotes))
        return false;
    }

    boolean this_present_fieldNumber = true && this.isSetFieldNumber();
    boolean that_present_fieldNumber = true && that.isSetFieldNumber();
    if (this_present_fieldNumber || that_present_fieldNumber) {
      if (!(this_present_fieldNumber && that_present_fieldNumber))
        return false;
      if (!this.fieldNumber.equals(that.fieldNumber))
        return false;
    }

    boolean this_present_habitat = true && this.isSetHabitat();
    boolean that_present_habitat = true && that.isSetHabitat();
    if (this_present_habitat || that_present_habitat) {
      if (!(this_present_habitat && that_present_habitat))
        return false;
      if (!this.habitat.equals(that.habitat))
        return false;
    }

    boolean this_present_month = true && this.isSetMonth();
    boolean that_present_month = true && that.isSetMonth();
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (!this.month.equals(that.month))
        return false;
    }

    boolean this_present_samplingEffort = true && this.isSetSamplingEffort();
    boolean that_present_samplingEffort = true && that.isSetSamplingEffort();
    if (this_present_samplingEffort || that_present_samplingEffort) {
      if (!(this_present_samplingEffort && that_present_samplingEffort))
        return false;
      if (!this.samplingEffort.equals(that.samplingEffort))
        return false;
    }

    boolean this_present_samplingProtocol = true && this.isSetSamplingProtocol();
    boolean that_present_samplingProtocol = true && that.isSetSamplingProtocol();
    if (this_present_samplingProtocol || that_present_samplingProtocol) {
      if (!(this_present_samplingProtocol && that_present_samplingProtocol))
        return false;
      if (!this.samplingProtocol.equals(that.samplingProtocol))
        return false;
    }

    boolean this_present_startDayOfYear = true && this.isSetStartDayOfYear();
    boolean that_present_startDayOfYear = true && that.isSetStartDayOfYear();
    if (this_present_startDayOfYear || that_present_startDayOfYear) {
      if (!(this_present_startDayOfYear && that_present_startDayOfYear))
        return false;
      if (!this.startDayOfYear.equals(that.startDayOfYear))
        return false;
    }

    boolean this_present_verbatimEventDate = true && this.isSetVerbatimEventDate();
    boolean that_present_verbatimEventDate = true && that.isSetVerbatimEventDate();
    if (this_present_verbatimEventDate || that_present_verbatimEventDate) {
      if (!(this_present_verbatimEventDate && that_present_verbatimEventDate))
        return false;
      if (!this.verbatimEventDate.equals(that.verbatimEventDate))
        return false;
    }

    boolean this_present_year = true && this.isSetYear();
    boolean that_present_year = true && that.isSetYear();
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (!this.year.equals(that.year))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_day = true && (isSetDay());
    builder.append(present_day);
    if (present_day)
      builder.append(day);

    boolean present_endDayOfYear = true && (isSetEndDayOfYear());
    builder.append(present_endDayOfYear);
    if (present_endDayOfYear)
      builder.append(endDayOfYear);

    boolean present_eventDate = true && (isSetEventDate());
    builder.append(present_eventDate);
    if (present_eventDate)
      builder.append(eventDate);

    boolean present_eventID = true && (isSetEventID());
    builder.append(present_eventID);
    if (present_eventID)
      builder.append(eventID);

    boolean present_eventRemarks = true && (isSetEventRemarks());
    builder.append(present_eventRemarks);
    if (present_eventRemarks)
      builder.append(eventRemarks);

    boolean present_eventTime = true && (isSetEventTime());
    builder.append(present_eventTime);
    if (present_eventTime)
      builder.append(eventTime);

    boolean present_fieldNotes = true && (isSetFieldNotes());
    builder.append(present_fieldNotes);
    if (present_fieldNotes)
      builder.append(fieldNotes);

    boolean present_fieldNumber = true && (isSetFieldNumber());
    builder.append(present_fieldNumber);
    if (present_fieldNumber)
      builder.append(fieldNumber);

    boolean present_habitat = true && (isSetHabitat());
    builder.append(present_habitat);
    if (present_habitat)
      builder.append(habitat);

    boolean present_month = true && (isSetMonth());
    builder.append(present_month);
    if (present_month)
      builder.append(month);

    boolean present_samplingEffort = true && (isSetSamplingEffort());
    builder.append(present_samplingEffort);
    if (present_samplingEffort)
      builder.append(samplingEffort);

    boolean present_samplingProtocol = true && (isSetSamplingProtocol());
    builder.append(present_samplingProtocol);
    if (present_samplingProtocol)
      builder.append(samplingProtocol);

    boolean present_startDayOfYear = true && (isSetStartDayOfYear());
    builder.append(present_startDayOfYear);
    if (present_startDayOfYear)
      builder.append(startDayOfYear);

    boolean present_verbatimEventDate = true && (isSetVerbatimEventDate());
    builder.append(present_verbatimEventDate);
    if (present_verbatimEventDate)
      builder.append(verbatimEventDate);

    boolean present_year = true && (isSetYear());
    builder.append(present_year);
    if (present_year)
      builder.append(year);

    return builder.toHashCode();
  }

  public int compareTo(Event other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Event typedOther = (Event)other;

    lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, typedOther.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDayOfYear()).compareTo(typedOther.isSetEndDayOfYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDayOfYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDayOfYear, typedOther.endDayOfYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventDate()).compareTo(typedOther.isSetEventDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventDate, typedOther.eventDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventID()).compareTo(typedOther.isSetEventID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventID, typedOther.eventID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventRemarks()).compareTo(typedOther.isSetEventRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventRemarks, typedOther.eventRemarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventTime()).compareTo(typedOther.isSetEventTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventTime, typedOther.eventTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldNotes()).compareTo(typedOther.isSetFieldNotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldNotes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldNotes, typedOther.fieldNotes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldNumber()).compareTo(typedOther.isSetFieldNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldNumber, typedOther.fieldNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHabitat()).compareTo(typedOther.isSetHabitat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHabitat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.habitat, typedOther.habitat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(typedOther.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, typedOther.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSamplingEffort()).compareTo(typedOther.isSetSamplingEffort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamplingEffort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samplingEffort, typedOther.samplingEffort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSamplingProtocol()).compareTo(typedOther.isSetSamplingProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamplingProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samplingProtocol, typedOther.samplingProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDayOfYear()).compareTo(typedOther.isSetStartDayOfYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDayOfYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDayOfYear, typedOther.startDayOfYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerbatimEventDate()).compareTo(typedOther.isSetVerbatimEventDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerbatimEventDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbatimEventDate, typedOther.verbatimEventDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear()).compareTo(typedOther.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, typedOther.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Event(");
    boolean first = true;

    sb.append("day:");
    if (this.day == null) {
      sb.append("null");
    } else {
      sb.append(this.day);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDayOfYear:");
    if (this.endDayOfYear == null) {
      sb.append("null");
    } else {
      sb.append(this.endDayOfYear);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventDate:");
    if (this.eventDate == null) {
      sb.append("null");
    } else {
      sb.append(this.eventDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventID:");
    if (this.eventID == null) {
      sb.append("null");
    } else {
      sb.append(this.eventID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventRemarks:");
    if (this.eventRemarks == null) {
      sb.append("null");
    } else {
      sb.append(this.eventRemarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventTime:");
    if (this.eventTime == null) {
      sb.append("null");
    } else {
      sb.append(this.eventTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldNotes:");
    if (this.fieldNotes == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldNotes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldNumber:");
    if (this.fieldNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("habitat:");
    if (this.habitat == null) {
      sb.append("null");
    } else {
      sb.append(this.habitat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("month:");
    if (this.month == null) {
      sb.append("null");
    } else {
      sb.append(this.month);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("samplingEffort:");
    if (this.samplingEffort == null) {
      sb.append("null");
    } else {
      sb.append(this.samplingEffort);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("samplingProtocol:");
    if (this.samplingProtocol == null) {
      sb.append("null");
    } else {
      sb.append(this.samplingProtocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDayOfYear:");
    if (this.startDayOfYear == null) {
      sb.append("null");
    } else {
      sb.append(this.startDayOfYear);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verbatimEventDate:");
    if (this.verbatimEventDate == null) {
      sb.append("null");
    } else {
      sb.append(this.verbatimEventDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    if (this.year == null) {
      sb.append("null");
    } else {
      sb.append(this.year);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EventStandardSchemeFactory implements SchemeFactory {
    public EventStandardScheme getScheme() {
      return new EventStandardScheme();
    }
  }

  private static class EventStandardScheme extends StandardScheme<Event> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Event struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.day = iprot.readString();
              struct.setDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_DAY_OF_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDayOfYear = iprot.readString();
              struct.setEndDayOfYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventDate = iprot.readString();
              struct.setEventDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventID = iprot.readString();
              struct.setEventIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EVENT_REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventRemarks = iprot.readString();
              struct.setEventRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EVENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventTime = iprot.readString();
              struct.setEventTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FIELD_NOTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldNotes = iprot.readString();
              struct.setFieldNotesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FIELD_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldNumber = iprot.readString();
              struct.setFieldNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HABITAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.habitat = iprot.readString();
              struct.setHabitatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.month = iprot.readString();
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SAMPLING_EFFORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.samplingEffort = iprot.readString();
              struct.setSamplingEffortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SAMPLING_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.samplingProtocol = iprot.readString();
              struct.setSamplingProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // START_DAY_OF_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDayOfYear = iprot.readString();
              struct.setStartDayOfYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VERBATIM_EVENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verbatimEventDate = iprot.readString();
              struct.setVerbatimEventDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.year = iprot.readString();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Event struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.day != null) {
        oprot.writeFieldBegin(DAY_FIELD_DESC);
        oprot.writeString(struct.day);
        oprot.writeFieldEnd();
      }
      if (struct.endDayOfYear != null) {
        oprot.writeFieldBegin(END_DAY_OF_YEAR_FIELD_DESC);
        oprot.writeString(struct.endDayOfYear);
        oprot.writeFieldEnd();
      }
      if (struct.eventDate != null) {
        oprot.writeFieldBegin(EVENT_DATE_FIELD_DESC);
        oprot.writeString(struct.eventDate);
        oprot.writeFieldEnd();
      }
      if (struct.eventID != null) {
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeString(struct.eventID);
        oprot.writeFieldEnd();
      }
      if (struct.eventRemarks != null) {
        oprot.writeFieldBegin(EVENT_REMARKS_FIELD_DESC);
        oprot.writeString(struct.eventRemarks);
        oprot.writeFieldEnd();
      }
      if (struct.eventTime != null) {
        oprot.writeFieldBegin(EVENT_TIME_FIELD_DESC);
        oprot.writeString(struct.eventTime);
        oprot.writeFieldEnd();
      }
      if (struct.fieldNotes != null) {
        oprot.writeFieldBegin(FIELD_NOTES_FIELD_DESC);
        oprot.writeString(struct.fieldNotes);
        oprot.writeFieldEnd();
      }
      if (struct.fieldNumber != null) {
        oprot.writeFieldBegin(FIELD_NUMBER_FIELD_DESC);
        oprot.writeString(struct.fieldNumber);
        oprot.writeFieldEnd();
      }
      if (struct.habitat != null) {
        oprot.writeFieldBegin(HABITAT_FIELD_DESC);
        oprot.writeString(struct.habitat);
        oprot.writeFieldEnd();
      }
      if (struct.month != null) {
        oprot.writeFieldBegin(MONTH_FIELD_DESC);
        oprot.writeString(struct.month);
        oprot.writeFieldEnd();
      }
      if (struct.samplingEffort != null) {
        oprot.writeFieldBegin(SAMPLING_EFFORT_FIELD_DESC);
        oprot.writeString(struct.samplingEffort);
        oprot.writeFieldEnd();
      }
      if (struct.samplingProtocol != null) {
        oprot.writeFieldBegin(SAMPLING_PROTOCOL_FIELD_DESC);
        oprot.writeString(struct.samplingProtocol);
        oprot.writeFieldEnd();
      }
      if (struct.startDayOfYear != null) {
        oprot.writeFieldBegin(START_DAY_OF_YEAR_FIELD_DESC);
        oprot.writeString(struct.startDayOfYear);
        oprot.writeFieldEnd();
      }
      if (struct.verbatimEventDate != null) {
        oprot.writeFieldBegin(VERBATIM_EVENT_DATE_FIELD_DESC);
        oprot.writeString(struct.verbatimEventDate);
        oprot.writeFieldEnd();
      }
      if (struct.year != null) {
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeString(struct.year);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EventTupleSchemeFactory implements SchemeFactory {
    public EventTupleScheme getScheme() {
      return new EventTupleScheme();
    }
  }

  private static class EventTupleScheme extends TupleScheme<Event> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Event struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDay()) {
        optionals.set(0);
      }
      if (struct.isSetEndDayOfYear()) {
        optionals.set(1);
      }
      if (struct.isSetEventDate()) {
        optionals.set(2);
      }
      if (struct.isSetEventID()) {
        optionals.set(3);
      }
      if (struct.isSetEventRemarks()) {
        optionals.set(4);
      }
      if (struct.isSetEventTime()) {
        optionals.set(5);
      }
      if (struct.isSetFieldNotes()) {
        optionals.set(6);
      }
      if (struct.isSetFieldNumber()) {
        optionals.set(7);
      }
      if (struct.isSetHabitat()) {
        optionals.set(8);
      }
      if (struct.isSetMonth()) {
        optionals.set(9);
      }
      if (struct.isSetSamplingEffort()) {
        optionals.set(10);
      }
      if (struct.isSetSamplingProtocol()) {
        optionals.set(11);
      }
      if (struct.isSetStartDayOfYear()) {
        optionals.set(12);
      }
      if (struct.isSetVerbatimEventDate()) {
        optionals.set(13);
      }
      if (struct.isSetYear()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetDay()) {
        oprot.writeString(struct.day);
      }
      if (struct.isSetEndDayOfYear()) {
        oprot.writeString(struct.endDayOfYear);
      }
      if (struct.isSetEventDate()) {
        oprot.writeString(struct.eventDate);
      }
      if (struct.isSetEventID()) {
        oprot.writeString(struct.eventID);
      }
      if (struct.isSetEventRemarks()) {
        oprot.writeString(struct.eventRemarks);
      }
      if (struct.isSetEventTime()) {
        oprot.writeString(struct.eventTime);
      }
      if (struct.isSetFieldNotes()) {
        oprot.writeString(struct.fieldNotes);
      }
      if (struct.isSetFieldNumber()) {
        oprot.writeString(struct.fieldNumber);
      }
      if (struct.isSetHabitat()) {
        oprot.writeString(struct.habitat);
      }
      if (struct.isSetMonth()) {
        oprot.writeString(struct.month);
      }
      if (struct.isSetSamplingEffort()) {
        oprot.writeString(struct.samplingEffort);
      }
      if (struct.isSetSamplingProtocol()) {
        oprot.writeString(struct.samplingProtocol);
      }
      if (struct.isSetStartDayOfYear()) {
        oprot.writeString(struct.startDayOfYear);
      }
      if (struct.isSetVerbatimEventDate()) {
        oprot.writeString(struct.verbatimEventDate);
      }
      if (struct.isSetYear()) {
        oprot.writeString(struct.year);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Event struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.day = iprot.readString();
        struct.setDayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.endDayOfYear = iprot.readString();
        struct.setEndDayOfYearIsSet(true);
      }
      if (incoming.get(2)) {
        struct.eventDate = iprot.readString();
        struct.setEventDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.eventID = iprot.readString();
        struct.setEventIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.eventRemarks = iprot.readString();
        struct.setEventRemarksIsSet(true);
      }
      if (incoming.get(5)) {
        struct.eventTime = iprot.readString();
        struct.setEventTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fieldNotes = iprot.readString();
        struct.setFieldNotesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fieldNumber = iprot.readString();
        struct.setFieldNumberIsSet(true);
      }
      if (incoming.get(8)) {
        struct.habitat = iprot.readString();
        struct.setHabitatIsSet(true);
      }
      if (incoming.get(9)) {
        struct.month = iprot.readString();
        struct.setMonthIsSet(true);
      }
      if (incoming.get(10)) {
        struct.samplingEffort = iprot.readString();
        struct.setSamplingEffortIsSet(true);
      }
      if (incoming.get(11)) {
        struct.samplingProtocol = iprot.readString();
        struct.setSamplingProtocolIsSet(true);
      }
      if (incoming.get(12)) {
        struct.startDayOfYear = iprot.readString();
        struct.setStartDayOfYearIsSet(true);
      }
      if (incoming.get(13)) {
        struct.verbatimEventDate = iprot.readString();
        struct.setVerbatimEventDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.year = iprot.readString();
        struct.setYearIsSet(true);
      }
    }
  }

}

