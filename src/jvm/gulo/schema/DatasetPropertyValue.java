/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The DatasetPropertyValue is the polymorphic representation of Dataset
 * property values.
 */
public class DatasetPropertyValue extends org.apache.thrift.TUnion<DatasetPropertyValue, DatasetPropertyValue._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DatasetPropertyValue");
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField METADATA_PROVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataProvider", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ASSOCIATED_PARTY_FIELD_DESC = new org.apache.thrift.protocol.TField("associatedParty", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PUB_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pubDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contact", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ADDITIONAL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("additionalInfo", org.apache.thrift.protocol.TType.STRING, (short)8);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    CREATOR((short)2, "creator"),
    METADATA_PROVIDER((short)3, "metadataProvider"),
    LANGUAGE((short)4, "language"),
    ASSOCIATED_PARTY((short)5, "associatedParty"),
    PUB_DATE((short)6, "pubDate"),
    CONTACT((short)7, "contact"),
    ADDITIONAL_INFO((short)8, "additionalInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // CREATOR
          return CREATOR;
        case 3: // METADATA_PROVIDER
          return METADATA_PROVIDER;
        case 4: // LANGUAGE
          return LANGUAGE;
        case 5: // ASSOCIATED_PARTY
          return ASSOCIATED_PARTY;
        case 6: // PUB_DATE
          return PUB_DATE;
        case 7: // CONTACT
          return CONTACT;
        case 8: // ADDITIONAL_INFO
          return ADDITIONAL_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_PROVIDER, new org.apache.thrift.meta_data.FieldMetaData("metadataProvider", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSOCIATED_PARTY, new org.apache.thrift.meta_data.FieldMetaData("associatedParty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUB_DATE, new org.apache.thrift.meta_data.FieldMetaData("pubDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT, new org.apache.thrift.meta_data.FieldMetaData("contact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDITIONAL_INFO, new org.apache.thrift.meta_data.FieldMetaData("additionalInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DatasetPropertyValue.class, metaDataMap);
  }

  public DatasetPropertyValue() {
    super();
  }

  public DatasetPropertyValue(_Fields setField, Object value) {
    super(setField, value);
  }

  public DatasetPropertyValue(DatasetPropertyValue other) {
    super(other);
  }
  public DatasetPropertyValue deepCopy() {
    return new DatasetPropertyValue(this);
  }

  public static DatasetPropertyValue title(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setTitle(value);
    return x;
  }

  public static DatasetPropertyValue creator(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setCreator(value);
    return x;
  }

  public static DatasetPropertyValue metadataProvider(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setMetadataProvider(value);
    return x;
  }

  public static DatasetPropertyValue language(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setLanguage(value);
    return x;
  }

  public static DatasetPropertyValue associatedParty(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setAssociatedParty(value);
    return x;
  }

  public static DatasetPropertyValue pubDate(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setPubDate(value);
    return x;
  }

  public static DatasetPropertyValue contact(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setContact(value);
    return x;
  }

  public static DatasetPropertyValue additionalInfo(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setAdditionalInfo(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case TITLE:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'title', but got " + value.getClass().getSimpleName());
      case CREATOR:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'creator', but got " + value.getClass().getSimpleName());
      case METADATA_PROVIDER:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'metadataProvider', but got " + value.getClass().getSimpleName());
      case LANGUAGE:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'language', but got " + value.getClass().getSimpleName());
      case ASSOCIATED_PARTY:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'associatedParty', but got " + value.getClass().getSimpleName());
      case PUB_DATE:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'pubDate', but got " + value.getClass().getSimpleName());
      case CONTACT:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'contact', but got " + value.getClass().getSimpleName());
      case ADDITIONAL_INFO:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'additionalInfo', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TITLE:
          if (field.type == TITLE_FIELD_DESC.type) {
            String title;
            title = iprot.readString();
            return title;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CREATOR:
          if (field.type == CREATOR_FIELD_DESC.type) {
            String creator;
            creator = iprot.readString();
            return creator;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case METADATA_PROVIDER:
          if (field.type == METADATA_PROVIDER_FIELD_DESC.type) {
            String metadataProvider;
            metadataProvider = iprot.readString();
            return metadataProvider;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LANGUAGE:
          if (field.type == LANGUAGE_FIELD_DESC.type) {
            String language;
            language = iprot.readString();
            return language;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ASSOCIATED_PARTY:
          if (field.type == ASSOCIATED_PARTY_FIELD_DESC.type) {
            String associatedParty;
            associatedParty = iprot.readString();
            return associatedParty;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PUB_DATE:
          if (field.type == PUB_DATE_FIELD_DESC.type) {
            String pubDate;
            pubDate = iprot.readString();
            return pubDate;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CONTACT:
          if (field.type == CONTACT_FIELD_DESC.type) {
            String contact;
            contact = iprot.readString();
            return contact;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADDITIONAL_INFO:
          if (field.type == ADDITIONAL_INFO_FIELD_DESC.type) {
            String additionalInfo;
            additionalInfo = iprot.readString();
            return additionalInfo;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TITLE:
        String title = (String)value_;
        oprot.writeString(title);
        return;
      case CREATOR:
        String creator = (String)value_;
        oprot.writeString(creator);
        return;
      case METADATA_PROVIDER:
        String metadataProvider = (String)value_;
        oprot.writeString(metadataProvider);
        return;
      case LANGUAGE:
        String language = (String)value_;
        oprot.writeString(language);
        return;
      case ASSOCIATED_PARTY:
        String associatedParty = (String)value_;
        oprot.writeString(associatedParty);
        return;
      case PUB_DATE:
        String pubDate = (String)value_;
        oprot.writeString(pubDate);
        return;
      case CONTACT:
        String contact = (String)value_;
        oprot.writeString(contact);
        return;
      case ADDITIONAL_INFO:
        String additionalInfo = (String)value_;
        oprot.writeString(additionalInfo);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TITLE:
          String title;
          title = iprot.readString();
          return title;
        case CREATOR:
          String creator;
          creator = iprot.readString();
          return creator;
        case METADATA_PROVIDER:
          String metadataProvider;
          metadataProvider = iprot.readString();
          return metadataProvider;
        case LANGUAGE:
          String language;
          language = iprot.readString();
          return language;
        case ASSOCIATED_PARTY:
          String associatedParty;
          associatedParty = iprot.readString();
          return associatedParty;
        case PUB_DATE:
          String pubDate;
          pubDate = iprot.readString();
          return pubDate;
        case CONTACT:
          String contact;
          contact = iprot.readString();
          return contact;
        case ADDITIONAL_INFO:
          String additionalInfo;
          additionalInfo = iprot.readString();
          return additionalInfo;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TITLE:
        String title = (String)value_;
        oprot.writeString(title);
        return;
      case CREATOR:
        String creator = (String)value_;
        oprot.writeString(creator);
        return;
      case METADATA_PROVIDER:
        String metadataProvider = (String)value_;
        oprot.writeString(metadataProvider);
        return;
      case LANGUAGE:
        String language = (String)value_;
        oprot.writeString(language);
        return;
      case ASSOCIATED_PARTY:
        String associatedParty = (String)value_;
        oprot.writeString(associatedParty);
        return;
      case PUB_DATE:
        String pubDate = (String)value_;
        oprot.writeString(pubDate);
        return;
      case CONTACT:
        String contact = (String)value_;
        oprot.writeString(contact);
        return;
      case ADDITIONAL_INFO:
        String additionalInfo = (String)value_;
        oprot.writeString(additionalInfo);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TITLE:
        return TITLE_FIELD_DESC;
      case CREATOR:
        return CREATOR_FIELD_DESC;
      case METADATA_PROVIDER:
        return METADATA_PROVIDER_FIELD_DESC;
      case LANGUAGE:
        return LANGUAGE_FIELD_DESC;
      case ASSOCIATED_PARTY:
        return ASSOCIATED_PARTY_FIELD_DESC;
      case PUB_DATE:
        return PUB_DATE_FIELD_DESC;
      case CONTACT:
        return CONTACT_FIELD_DESC;
      case ADDITIONAL_INFO:
        return ADDITIONAL_INFO_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public String getTitle() {
    if (getSetField() == _Fields.TITLE) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'title' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTitle(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TITLE;
    value_ = value;
  }

  public String getCreator() {
    if (getSetField() == _Fields.CREATOR) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'creator' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCreator(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CREATOR;
    value_ = value;
  }

  public String getMetadataProvider() {
    if (getSetField() == _Fields.METADATA_PROVIDER) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'metadataProvider' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMetadataProvider(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.METADATA_PROVIDER;
    value_ = value;
  }

  public String getLanguage() {
    if (getSetField() == _Fields.LANGUAGE) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'language' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLanguage(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LANGUAGE;
    value_ = value;
  }

  public String getAssociatedParty() {
    if (getSetField() == _Fields.ASSOCIATED_PARTY) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'associatedParty' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAssociatedParty(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ASSOCIATED_PARTY;
    value_ = value;
  }

  public String getPubDate() {
    if (getSetField() == _Fields.PUB_DATE) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'pubDate' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPubDate(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PUB_DATE;
    value_ = value;
  }

  public String getContact() {
    if (getSetField() == _Fields.CONTACT) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'contact' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setContact(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CONTACT;
    value_ = value;
  }

  public String getAdditionalInfo() {
    if (getSetField() == _Fields.ADDITIONAL_INFO) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'additionalInfo' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAdditionalInfo(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADDITIONAL_INFO;
    value_ = value;
  }

  public boolean isSetTitle() {
    return setField_ == _Fields.TITLE;
  }


  public boolean isSetCreator() {
    return setField_ == _Fields.CREATOR;
  }


  public boolean isSetMetadataProvider() {
    return setField_ == _Fields.METADATA_PROVIDER;
  }


  public boolean isSetLanguage() {
    return setField_ == _Fields.LANGUAGE;
  }


  public boolean isSetAssociatedParty() {
    return setField_ == _Fields.ASSOCIATED_PARTY;
  }


  public boolean isSetPubDate() {
    return setField_ == _Fields.PUB_DATE;
  }


  public boolean isSetContact() {
    return setField_ == _Fields.CONTACT;
  }


  public boolean isSetAdditionalInfo() {
    return setField_ == _Fields.ADDITIONAL_INFO;
  }


  public boolean equals(Object other) {
    if (other instanceof DatasetPropertyValue) {
      return equals((DatasetPropertyValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(DatasetPropertyValue other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(DatasetPropertyValue other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
