/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The DataUnit is a polymorphic representation of properties and edges.
 */
public class DataUnit extends org.apache.thrift.TUnion<DataUnit, DataUnit._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataUnit");
  private static final org.apache.thrift.protocol.TField RECORD_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("recordProperty", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DATASET_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetProperty", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RESOURCE_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceProperty", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("organizationProperty", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DATASET_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetRecord", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField RESOURCE_DATASET_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceDataset", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField RESOURCE_ORGANIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceOrganization", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECORD_PROPERTY((short)1, "recordProperty"),
    DATASET_PROPERTY((short)2, "datasetProperty"),
    RESOURCE_PROPERTY((short)3, "resourceProperty"),
    ORGANIZATION_PROPERTY((short)4, "organizationProperty"),
    DATASET_RECORD((short)5, "datasetRecord"),
    RESOURCE_DATASET((short)6, "resourceDataset"),
    RESOURCE_ORGANIZATION((short)7, "resourceOrganization");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECORD_PROPERTY
          return RECORD_PROPERTY;
        case 2: // DATASET_PROPERTY
          return DATASET_PROPERTY;
        case 3: // RESOURCE_PROPERTY
          return RESOURCE_PROPERTY;
        case 4: // ORGANIZATION_PROPERTY
          return ORGANIZATION_PROPERTY;
        case 5: // DATASET_RECORD
          return DATASET_RECORD;
        case 6: // RESOURCE_DATASET
          return RESOURCE_DATASET;
        case 7: // RESOURCE_ORGANIZATION
          return RESOURCE_ORGANIZATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECORD_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("recordProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordProperty.class)));
    tmpMap.put(_Fields.DATASET_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("datasetProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DatasetProperty.class)));
    tmpMap.put(_Fields.RESOURCE_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("resourceProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResourceProperty.class)));
    tmpMap.put(_Fields.ORGANIZATION_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("organizationProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrganizationProperty.class)));
    tmpMap.put(_Fields.DATASET_RECORD, new org.apache.thrift.meta_data.FieldMetaData("datasetRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DatasetRecordEdge.class)));
    tmpMap.put(_Fields.RESOURCE_DATASET, new org.apache.thrift.meta_data.FieldMetaData("resourceDataset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResourceDatasetEdge.class)));
    tmpMap.put(_Fields.RESOURCE_ORGANIZATION, new org.apache.thrift.meta_data.FieldMetaData("resourceOrganization", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResourceOrganizationEdge.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataUnit.class, metaDataMap);
  }

  public DataUnit() {
    super();
  }

  public DataUnit(_Fields setField, Object value) {
    super(setField, value);
  }

  public DataUnit(DataUnit other) {
    super(other);
  }
  public DataUnit deepCopy() {
    return new DataUnit(this);
  }

  public static DataUnit recordProperty(RecordProperty value) {
    DataUnit x = new DataUnit();
    x.setRecordProperty(value);
    return x;
  }

  public static DataUnit datasetProperty(DatasetProperty value) {
    DataUnit x = new DataUnit();
    x.setDatasetProperty(value);
    return x;
  }

  public static DataUnit resourceProperty(ResourceProperty value) {
    DataUnit x = new DataUnit();
    x.setResourceProperty(value);
    return x;
  }

  public static DataUnit organizationProperty(OrganizationProperty value) {
    DataUnit x = new DataUnit();
    x.setOrganizationProperty(value);
    return x;
  }

  public static DataUnit datasetRecord(DatasetRecordEdge value) {
    DataUnit x = new DataUnit();
    x.setDatasetRecord(value);
    return x;
  }

  public static DataUnit resourceDataset(ResourceDatasetEdge value) {
    DataUnit x = new DataUnit();
    x.setResourceDataset(value);
    return x;
  }

  public static DataUnit resourceOrganization(ResourceOrganizationEdge value) {
    DataUnit x = new DataUnit();
    x.setResourceOrganization(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case RECORD_PROPERTY:
        if (value instanceof RecordProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RecordProperty for field 'recordProperty', but got " + value.getClass().getSimpleName());
      case DATASET_PROPERTY:
        if (value instanceof DatasetProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DatasetProperty for field 'datasetProperty', but got " + value.getClass().getSimpleName());
      case RESOURCE_PROPERTY:
        if (value instanceof ResourceProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ResourceProperty for field 'resourceProperty', but got " + value.getClass().getSimpleName());
      case ORGANIZATION_PROPERTY:
        if (value instanceof OrganizationProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type OrganizationProperty for field 'organizationProperty', but got " + value.getClass().getSimpleName());
      case DATASET_RECORD:
        if (value instanceof DatasetRecordEdge) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DatasetRecordEdge for field 'datasetRecord', but got " + value.getClass().getSimpleName());
      case RESOURCE_DATASET:
        if (value instanceof ResourceDatasetEdge) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ResourceDatasetEdge for field 'resourceDataset', but got " + value.getClass().getSimpleName());
      case RESOURCE_ORGANIZATION:
        if (value instanceof ResourceOrganizationEdge) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ResourceOrganizationEdge for field 'resourceOrganization', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case RECORD_PROPERTY:
          if (field.type == RECORD_PROPERTY_FIELD_DESC.type) {
            RecordProperty recordProperty;
            recordProperty = new RecordProperty();
            recordProperty.read(iprot);
            return recordProperty;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DATASET_PROPERTY:
          if (field.type == DATASET_PROPERTY_FIELD_DESC.type) {
            DatasetProperty datasetProperty;
            datasetProperty = new DatasetProperty();
            datasetProperty.read(iprot);
            return datasetProperty;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RESOURCE_PROPERTY:
          if (field.type == RESOURCE_PROPERTY_FIELD_DESC.type) {
            ResourceProperty resourceProperty;
            resourceProperty = new ResourceProperty();
            resourceProperty.read(iprot);
            return resourceProperty;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ORGANIZATION_PROPERTY:
          if (field.type == ORGANIZATION_PROPERTY_FIELD_DESC.type) {
            OrganizationProperty organizationProperty;
            organizationProperty = new OrganizationProperty();
            organizationProperty.read(iprot);
            return organizationProperty;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DATASET_RECORD:
          if (field.type == DATASET_RECORD_FIELD_DESC.type) {
            DatasetRecordEdge datasetRecord;
            datasetRecord = new DatasetRecordEdge();
            datasetRecord.read(iprot);
            return datasetRecord;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RESOURCE_DATASET:
          if (field.type == RESOURCE_DATASET_FIELD_DESC.type) {
            ResourceDatasetEdge resourceDataset;
            resourceDataset = new ResourceDatasetEdge();
            resourceDataset.read(iprot);
            return resourceDataset;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RESOURCE_ORGANIZATION:
          if (field.type == RESOURCE_ORGANIZATION_FIELD_DESC.type) {
            ResourceOrganizationEdge resourceOrganization;
            resourceOrganization = new ResourceOrganizationEdge();
            resourceOrganization.read(iprot);
            return resourceOrganization;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case RECORD_PROPERTY:
        RecordProperty recordProperty = (RecordProperty)value_;
        recordProperty.write(oprot);
        return;
      case DATASET_PROPERTY:
        DatasetProperty datasetProperty = (DatasetProperty)value_;
        datasetProperty.write(oprot);
        return;
      case RESOURCE_PROPERTY:
        ResourceProperty resourceProperty = (ResourceProperty)value_;
        resourceProperty.write(oprot);
        return;
      case ORGANIZATION_PROPERTY:
        OrganizationProperty organizationProperty = (OrganizationProperty)value_;
        organizationProperty.write(oprot);
        return;
      case DATASET_RECORD:
        DatasetRecordEdge datasetRecord = (DatasetRecordEdge)value_;
        datasetRecord.write(oprot);
        return;
      case RESOURCE_DATASET:
        ResourceDatasetEdge resourceDataset = (ResourceDatasetEdge)value_;
        resourceDataset.write(oprot);
        return;
      case RESOURCE_ORGANIZATION:
        ResourceOrganizationEdge resourceOrganization = (ResourceOrganizationEdge)value_;
        resourceOrganization.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case RECORD_PROPERTY:
          RecordProperty recordProperty;
          recordProperty = new RecordProperty();
          recordProperty.read(iprot);
          return recordProperty;
        case DATASET_PROPERTY:
          DatasetProperty datasetProperty;
          datasetProperty = new DatasetProperty();
          datasetProperty.read(iprot);
          return datasetProperty;
        case RESOURCE_PROPERTY:
          ResourceProperty resourceProperty;
          resourceProperty = new ResourceProperty();
          resourceProperty.read(iprot);
          return resourceProperty;
        case ORGANIZATION_PROPERTY:
          OrganizationProperty organizationProperty;
          organizationProperty = new OrganizationProperty();
          organizationProperty.read(iprot);
          return organizationProperty;
        case DATASET_RECORD:
          DatasetRecordEdge datasetRecord;
          datasetRecord = new DatasetRecordEdge();
          datasetRecord.read(iprot);
          return datasetRecord;
        case RESOURCE_DATASET:
          ResourceDatasetEdge resourceDataset;
          resourceDataset = new ResourceDatasetEdge();
          resourceDataset.read(iprot);
          return resourceDataset;
        case RESOURCE_ORGANIZATION:
          ResourceOrganizationEdge resourceOrganization;
          resourceOrganization = new ResourceOrganizationEdge();
          resourceOrganization.read(iprot);
          return resourceOrganization;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case RECORD_PROPERTY:
        RecordProperty recordProperty = (RecordProperty)value_;
        recordProperty.write(oprot);
        return;
      case DATASET_PROPERTY:
        DatasetProperty datasetProperty = (DatasetProperty)value_;
        datasetProperty.write(oprot);
        return;
      case RESOURCE_PROPERTY:
        ResourceProperty resourceProperty = (ResourceProperty)value_;
        resourceProperty.write(oprot);
        return;
      case ORGANIZATION_PROPERTY:
        OrganizationProperty organizationProperty = (OrganizationProperty)value_;
        organizationProperty.write(oprot);
        return;
      case DATASET_RECORD:
        DatasetRecordEdge datasetRecord = (DatasetRecordEdge)value_;
        datasetRecord.write(oprot);
        return;
      case RESOURCE_DATASET:
        ResourceDatasetEdge resourceDataset = (ResourceDatasetEdge)value_;
        resourceDataset.write(oprot);
        return;
      case RESOURCE_ORGANIZATION:
        ResourceOrganizationEdge resourceOrganization = (ResourceOrganizationEdge)value_;
        resourceOrganization.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case RECORD_PROPERTY:
        return RECORD_PROPERTY_FIELD_DESC;
      case DATASET_PROPERTY:
        return DATASET_PROPERTY_FIELD_DESC;
      case RESOURCE_PROPERTY:
        return RESOURCE_PROPERTY_FIELD_DESC;
      case ORGANIZATION_PROPERTY:
        return ORGANIZATION_PROPERTY_FIELD_DESC;
      case DATASET_RECORD:
        return DATASET_RECORD_FIELD_DESC;
      case RESOURCE_DATASET:
        return RESOURCE_DATASET_FIELD_DESC;
      case RESOURCE_ORGANIZATION:
        return RESOURCE_ORGANIZATION_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public RecordProperty getRecordProperty() {
    if (getSetField() == _Fields.RECORD_PROPERTY) {
      return (RecordProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'recordProperty' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRecordProperty(RecordProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RECORD_PROPERTY;
    value_ = value;
  }

  public DatasetProperty getDatasetProperty() {
    if (getSetField() == _Fields.DATASET_PROPERTY) {
      return (DatasetProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'datasetProperty' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDatasetProperty(DatasetProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DATASET_PROPERTY;
    value_ = value;
  }

  public ResourceProperty getResourceProperty() {
    if (getSetField() == _Fields.RESOURCE_PROPERTY) {
      return (ResourceProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'resourceProperty' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setResourceProperty(ResourceProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RESOURCE_PROPERTY;
    value_ = value;
  }

  public OrganizationProperty getOrganizationProperty() {
    if (getSetField() == _Fields.ORGANIZATION_PROPERTY) {
      return (OrganizationProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'organizationProperty' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOrganizationProperty(OrganizationProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ORGANIZATION_PROPERTY;
    value_ = value;
  }

  public DatasetRecordEdge getDatasetRecord() {
    if (getSetField() == _Fields.DATASET_RECORD) {
      return (DatasetRecordEdge)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'datasetRecord' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDatasetRecord(DatasetRecordEdge value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DATASET_RECORD;
    value_ = value;
  }

  public ResourceDatasetEdge getResourceDataset() {
    if (getSetField() == _Fields.RESOURCE_DATASET) {
      return (ResourceDatasetEdge)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'resourceDataset' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setResourceDataset(ResourceDatasetEdge value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RESOURCE_DATASET;
    value_ = value;
  }

  public ResourceOrganizationEdge getResourceOrganization() {
    if (getSetField() == _Fields.RESOURCE_ORGANIZATION) {
      return (ResourceOrganizationEdge)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'resourceOrganization' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setResourceOrganization(ResourceOrganizationEdge value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RESOURCE_ORGANIZATION;
    value_ = value;
  }

  public boolean isSetRecordProperty() {
    return setField_ == _Fields.RECORD_PROPERTY;
  }


  public boolean isSetDatasetProperty() {
    return setField_ == _Fields.DATASET_PROPERTY;
  }


  public boolean isSetResourceProperty() {
    return setField_ == _Fields.RESOURCE_PROPERTY;
  }


  public boolean isSetOrganizationProperty() {
    return setField_ == _Fields.ORGANIZATION_PROPERTY;
  }


  public boolean isSetDatasetRecord() {
    return setField_ == _Fields.DATASET_RECORD;
  }


  public boolean isSetResourceDataset() {
    return setField_ == _Fields.RESOURCE_DATASET;
  }


  public boolean isSetResourceOrganization() {
    return setField_ == _Fields.RESOURCE_ORGANIZATION;
  }


  public boolean equals(Object other) {
    if (other instanceof DataUnit) {
      return equals((DataUnit)other);
    } else {
      return false;
    }
  }

  public boolean equals(DataUnit other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(DataUnit other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
