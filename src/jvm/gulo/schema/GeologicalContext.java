/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Darwin Core GeologicalContext class structure.
 * 
 * http://rs.tdwg.org/dwc/terms/index.htm#geologicalindex
 */
public class GeologicalContext implements org.apache.thrift.TBase<GeologicalContext, GeologicalContext._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GeologicalContext");

  private static final org.apache.thrift.protocol.TField BED_FIELD_DESC = new org.apache.thrift.protocol.TField("bed", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EARLIEST_AGE_OR_LOWEST_STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("earliestAgeOrLowestStage", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EARLIEST_EON_OR_LOWEST_EONOTHEM_FIELD_DESC = new org.apache.thrift.protocol.TField("earliestEonOrLowestEonothem", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EARLIEST_EPOCH_OR_LOWEST_SERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("earliestEpochOrLowestSeries", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EARLIEST_ERA_OR_LOWEST_ERATHEM_FIELD_DESC = new org.apache.thrift.protocol.TField("earliestEraOrLowestErathem", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EARLIEST_PERIOD_OR_LOWEST_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("earliestPeriodOrLowestSystem", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FORMATION_FIELD_DESC = new org.apache.thrift.protocol.TField("formation", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField GEOLOGICAL_CONTEXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("geologicalContextID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField HIGHEST_BIOSTRATIGRAPHIC_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("highestBiostratigraphicZone", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LATEST_AGE_OR_HIGHEST_STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("latestAgeOrHighestStage", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LATEST_EON_OR_HIGHEST_EONOTHEM_FIELD_DESC = new org.apache.thrift.protocol.TField("latestEonOrHighestEonothem", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LATEST_EPOCH_OR_HIGHEST_SERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("latestEpochOrHighestSeries", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LATEST_ERA_OR_HIGHEST_ERATHEM_FIELD_DESC = new org.apache.thrift.protocol.TField("latestEraOrHighestErathem", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LATEST_PERIOD_OR_HIGHEST_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("latestPeriodOrHighestSystem", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LITHOSTRATIGRAPHIC_TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("lithostratigraphicTerms", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LOWEST_BIOSTRATIGRAPHIC_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("lowestBiostratigraphicZone", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("member", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GeologicalContextStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GeologicalContextTupleSchemeFactory());
  }

  public String bed; // required
  public String earliestAgeOrLowestStage; // required
  public String earliestEonOrLowestEonothem; // required
  public String earliestEpochOrLowestSeries; // required
  public String earliestEraOrLowestErathem; // required
  public String earliestPeriodOrLowestSystem; // required
  public String formation; // required
  public String geologicalContextID; // required
  public String group; // required
  public String highestBiostratigraphicZone; // required
  public String latestAgeOrHighestStage; // required
  public String latestEonOrHighestEonothem; // required
  public String latestEpochOrHighestSeries; // required
  public String latestEraOrHighestErathem; // required
  public String latestPeriodOrHighestSystem; // required
  public String lithostratigraphicTerms; // required
  public String lowestBiostratigraphicZone; // required
  public String member; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BED((short)1, "bed"),
    EARLIEST_AGE_OR_LOWEST_STAGE((short)2, "earliestAgeOrLowestStage"),
    EARLIEST_EON_OR_LOWEST_EONOTHEM((short)3, "earliestEonOrLowestEonothem"),
    EARLIEST_EPOCH_OR_LOWEST_SERIES((short)4, "earliestEpochOrLowestSeries"),
    EARLIEST_ERA_OR_LOWEST_ERATHEM((short)5, "earliestEraOrLowestErathem"),
    EARLIEST_PERIOD_OR_LOWEST_SYSTEM((short)6, "earliestPeriodOrLowestSystem"),
    FORMATION((short)7, "formation"),
    GEOLOGICAL_CONTEXT_ID((short)8, "geologicalContextID"),
    GROUP((short)9, "group"),
    HIGHEST_BIOSTRATIGRAPHIC_ZONE((short)10, "highestBiostratigraphicZone"),
    LATEST_AGE_OR_HIGHEST_STAGE((short)11, "latestAgeOrHighestStage"),
    LATEST_EON_OR_HIGHEST_EONOTHEM((short)12, "latestEonOrHighestEonothem"),
    LATEST_EPOCH_OR_HIGHEST_SERIES((short)13, "latestEpochOrHighestSeries"),
    LATEST_ERA_OR_HIGHEST_ERATHEM((short)14, "latestEraOrHighestErathem"),
    LATEST_PERIOD_OR_HIGHEST_SYSTEM((short)15, "latestPeriodOrHighestSystem"),
    LITHOSTRATIGRAPHIC_TERMS((short)16, "lithostratigraphicTerms"),
    LOWEST_BIOSTRATIGRAPHIC_ZONE((short)17, "lowestBiostratigraphicZone"),
    MEMBER((short)18, "member");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BED
          return BED;
        case 2: // EARLIEST_AGE_OR_LOWEST_STAGE
          return EARLIEST_AGE_OR_LOWEST_STAGE;
        case 3: // EARLIEST_EON_OR_LOWEST_EONOTHEM
          return EARLIEST_EON_OR_LOWEST_EONOTHEM;
        case 4: // EARLIEST_EPOCH_OR_LOWEST_SERIES
          return EARLIEST_EPOCH_OR_LOWEST_SERIES;
        case 5: // EARLIEST_ERA_OR_LOWEST_ERATHEM
          return EARLIEST_ERA_OR_LOWEST_ERATHEM;
        case 6: // EARLIEST_PERIOD_OR_LOWEST_SYSTEM
          return EARLIEST_PERIOD_OR_LOWEST_SYSTEM;
        case 7: // FORMATION
          return FORMATION;
        case 8: // GEOLOGICAL_CONTEXT_ID
          return GEOLOGICAL_CONTEXT_ID;
        case 9: // GROUP
          return GROUP;
        case 10: // HIGHEST_BIOSTRATIGRAPHIC_ZONE
          return HIGHEST_BIOSTRATIGRAPHIC_ZONE;
        case 11: // LATEST_AGE_OR_HIGHEST_STAGE
          return LATEST_AGE_OR_HIGHEST_STAGE;
        case 12: // LATEST_EON_OR_HIGHEST_EONOTHEM
          return LATEST_EON_OR_HIGHEST_EONOTHEM;
        case 13: // LATEST_EPOCH_OR_HIGHEST_SERIES
          return LATEST_EPOCH_OR_HIGHEST_SERIES;
        case 14: // LATEST_ERA_OR_HIGHEST_ERATHEM
          return LATEST_ERA_OR_HIGHEST_ERATHEM;
        case 15: // LATEST_PERIOD_OR_HIGHEST_SYSTEM
          return LATEST_PERIOD_OR_HIGHEST_SYSTEM;
        case 16: // LITHOSTRATIGRAPHIC_TERMS
          return LITHOSTRATIGRAPHIC_TERMS;
        case 17: // LOWEST_BIOSTRATIGRAPHIC_ZONE
          return LOWEST_BIOSTRATIGRAPHIC_ZONE;
        case 18: // MEMBER
          return MEMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BED, new org.apache.thrift.meta_data.FieldMetaData("bed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EARLIEST_AGE_OR_LOWEST_STAGE, new org.apache.thrift.meta_data.FieldMetaData("earliestAgeOrLowestStage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EARLIEST_EON_OR_LOWEST_EONOTHEM, new org.apache.thrift.meta_data.FieldMetaData("earliestEonOrLowestEonothem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EARLIEST_EPOCH_OR_LOWEST_SERIES, new org.apache.thrift.meta_data.FieldMetaData("earliestEpochOrLowestSeries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EARLIEST_ERA_OR_LOWEST_ERATHEM, new org.apache.thrift.meta_data.FieldMetaData("earliestEraOrLowestErathem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EARLIEST_PERIOD_OR_LOWEST_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("earliestPeriodOrLowestSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORMATION, new org.apache.thrift.meta_data.FieldMetaData("formation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEOLOGICAL_CONTEXT_ID, new org.apache.thrift.meta_data.FieldMetaData("geologicalContextID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHEST_BIOSTRATIGRAPHIC_ZONE, new org.apache.thrift.meta_data.FieldMetaData("highestBiostratigraphicZone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATEST_AGE_OR_HIGHEST_STAGE, new org.apache.thrift.meta_data.FieldMetaData("latestAgeOrHighestStage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATEST_EON_OR_HIGHEST_EONOTHEM, new org.apache.thrift.meta_data.FieldMetaData("latestEonOrHighestEonothem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATEST_EPOCH_OR_HIGHEST_SERIES, new org.apache.thrift.meta_data.FieldMetaData("latestEpochOrHighestSeries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATEST_ERA_OR_HIGHEST_ERATHEM, new org.apache.thrift.meta_data.FieldMetaData("latestEraOrHighestErathem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATEST_PERIOD_OR_HIGHEST_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("latestPeriodOrHighestSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LITHOSTRATIGRAPHIC_TERMS, new org.apache.thrift.meta_data.FieldMetaData("lithostratigraphicTerms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOWEST_BIOSTRATIGRAPHIC_ZONE, new org.apache.thrift.meta_data.FieldMetaData("lowestBiostratigraphicZone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER, new org.apache.thrift.meta_data.FieldMetaData("member", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GeologicalContext.class, metaDataMap);
  }

  public GeologicalContext() {
  }

  public GeologicalContext(
    String bed,
    String earliestAgeOrLowestStage,
    String earliestEonOrLowestEonothem,
    String earliestEpochOrLowestSeries,
    String earliestEraOrLowestErathem,
    String earliestPeriodOrLowestSystem,
    String formation,
    String geologicalContextID,
    String group,
    String highestBiostratigraphicZone,
    String latestAgeOrHighestStage,
    String latestEonOrHighestEonothem,
    String latestEpochOrHighestSeries,
    String latestEraOrHighestErathem,
    String latestPeriodOrHighestSystem,
    String lithostratigraphicTerms,
    String lowestBiostratigraphicZone,
    String member)
  {
    this();
    this.bed = bed;
    this.earliestAgeOrLowestStage = earliestAgeOrLowestStage;
    this.earliestEonOrLowestEonothem = earliestEonOrLowestEonothem;
    this.earliestEpochOrLowestSeries = earliestEpochOrLowestSeries;
    this.earliestEraOrLowestErathem = earliestEraOrLowestErathem;
    this.earliestPeriodOrLowestSystem = earliestPeriodOrLowestSystem;
    this.formation = formation;
    this.geologicalContextID = geologicalContextID;
    this.group = group;
    this.highestBiostratigraphicZone = highestBiostratigraphicZone;
    this.latestAgeOrHighestStage = latestAgeOrHighestStage;
    this.latestEonOrHighestEonothem = latestEonOrHighestEonothem;
    this.latestEpochOrHighestSeries = latestEpochOrHighestSeries;
    this.latestEraOrHighestErathem = latestEraOrHighestErathem;
    this.latestPeriodOrHighestSystem = latestPeriodOrHighestSystem;
    this.lithostratigraphicTerms = lithostratigraphicTerms;
    this.lowestBiostratigraphicZone = lowestBiostratigraphicZone;
    this.member = member;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeologicalContext(GeologicalContext other) {
    if (other.isSetBed()) {
      this.bed = other.bed;
    }
    if (other.isSetEarliestAgeOrLowestStage()) {
      this.earliestAgeOrLowestStage = other.earliestAgeOrLowestStage;
    }
    if (other.isSetEarliestEonOrLowestEonothem()) {
      this.earliestEonOrLowestEonothem = other.earliestEonOrLowestEonothem;
    }
    if (other.isSetEarliestEpochOrLowestSeries()) {
      this.earliestEpochOrLowestSeries = other.earliestEpochOrLowestSeries;
    }
    if (other.isSetEarliestEraOrLowestErathem()) {
      this.earliestEraOrLowestErathem = other.earliestEraOrLowestErathem;
    }
    if (other.isSetEarliestPeriodOrLowestSystem()) {
      this.earliestPeriodOrLowestSystem = other.earliestPeriodOrLowestSystem;
    }
    if (other.isSetFormation()) {
      this.formation = other.formation;
    }
    if (other.isSetGeologicalContextID()) {
      this.geologicalContextID = other.geologicalContextID;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetHighestBiostratigraphicZone()) {
      this.highestBiostratigraphicZone = other.highestBiostratigraphicZone;
    }
    if (other.isSetLatestAgeOrHighestStage()) {
      this.latestAgeOrHighestStage = other.latestAgeOrHighestStage;
    }
    if (other.isSetLatestEonOrHighestEonothem()) {
      this.latestEonOrHighestEonothem = other.latestEonOrHighestEonothem;
    }
    if (other.isSetLatestEpochOrHighestSeries()) {
      this.latestEpochOrHighestSeries = other.latestEpochOrHighestSeries;
    }
    if (other.isSetLatestEraOrHighestErathem()) {
      this.latestEraOrHighestErathem = other.latestEraOrHighestErathem;
    }
    if (other.isSetLatestPeriodOrHighestSystem()) {
      this.latestPeriodOrHighestSystem = other.latestPeriodOrHighestSystem;
    }
    if (other.isSetLithostratigraphicTerms()) {
      this.lithostratigraphicTerms = other.lithostratigraphicTerms;
    }
    if (other.isSetLowestBiostratigraphicZone()) {
      this.lowestBiostratigraphicZone = other.lowestBiostratigraphicZone;
    }
    if (other.isSetMember()) {
      this.member = other.member;
    }
  }

  public GeologicalContext deepCopy() {
    return new GeologicalContext(this);
  }

  @Override
  public void clear() {
    this.bed = null;
    this.earliestAgeOrLowestStage = null;
    this.earliestEonOrLowestEonothem = null;
    this.earliestEpochOrLowestSeries = null;
    this.earliestEraOrLowestErathem = null;
    this.earliestPeriodOrLowestSystem = null;
    this.formation = null;
    this.geologicalContextID = null;
    this.group = null;
    this.highestBiostratigraphicZone = null;
    this.latestAgeOrHighestStage = null;
    this.latestEonOrHighestEonothem = null;
    this.latestEpochOrHighestSeries = null;
    this.latestEraOrHighestErathem = null;
    this.latestPeriodOrHighestSystem = null;
    this.lithostratigraphicTerms = null;
    this.lowestBiostratigraphicZone = null;
    this.member = null;
  }

  public String getBed() {
    return this.bed;
  }

  public GeologicalContext setBed(String bed) {
    this.bed = bed;
    return this;
  }

  public void unsetBed() {
    this.bed = null;
  }

  /** Returns true if field bed is set (has been assigned a value) and false otherwise */
  public boolean isSetBed() {
    return this.bed != null;
  }

  public void setBedIsSet(boolean value) {
    if (!value) {
      this.bed = null;
    }
  }

  public String getEarliestAgeOrLowestStage() {
    return this.earliestAgeOrLowestStage;
  }

  public GeologicalContext setEarliestAgeOrLowestStage(String earliestAgeOrLowestStage) {
    this.earliestAgeOrLowestStage = earliestAgeOrLowestStage;
    return this;
  }

  public void unsetEarliestAgeOrLowestStage() {
    this.earliestAgeOrLowestStage = null;
  }

  /** Returns true if field earliestAgeOrLowestStage is set (has been assigned a value) and false otherwise */
  public boolean isSetEarliestAgeOrLowestStage() {
    return this.earliestAgeOrLowestStage != null;
  }

  public void setEarliestAgeOrLowestStageIsSet(boolean value) {
    if (!value) {
      this.earliestAgeOrLowestStage = null;
    }
  }

  public String getEarliestEonOrLowestEonothem() {
    return this.earliestEonOrLowestEonothem;
  }

  public GeologicalContext setEarliestEonOrLowestEonothem(String earliestEonOrLowestEonothem) {
    this.earliestEonOrLowestEonothem = earliestEonOrLowestEonothem;
    return this;
  }

  public void unsetEarliestEonOrLowestEonothem() {
    this.earliestEonOrLowestEonothem = null;
  }

  /** Returns true if field earliestEonOrLowestEonothem is set (has been assigned a value) and false otherwise */
  public boolean isSetEarliestEonOrLowestEonothem() {
    return this.earliestEonOrLowestEonothem != null;
  }

  public void setEarliestEonOrLowestEonothemIsSet(boolean value) {
    if (!value) {
      this.earliestEonOrLowestEonothem = null;
    }
  }

  public String getEarliestEpochOrLowestSeries() {
    return this.earliestEpochOrLowestSeries;
  }

  public GeologicalContext setEarliestEpochOrLowestSeries(String earliestEpochOrLowestSeries) {
    this.earliestEpochOrLowestSeries = earliestEpochOrLowestSeries;
    return this;
  }

  public void unsetEarliestEpochOrLowestSeries() {
    this.earliestEpochOrLowestSeries = null;
  }

  /** Returns true if field earliestEpochOrLowestSeries is set (has been assigned a value) and false otherwise */
  public boolean isSetEarliestEpochOrLowestSeries() {
    return this.earliestEpochOrLowestSeries != null;
  }

  public void setEarliestEpochOrLowestSeriesIsSet(boolean value) {
    if (!value) {
      this.earliestEpochOrLowestSeries = null;
    }
  }

  public String getEarliestEraOrLowestErathem() {
    return this.earliestEraOrLowestErathem;
  }

  public GeologicalContext setEarliestEraOrLowestErathem(String earliestEraOrLowestErathem) {
    this.earliestEraOrLowestErathem = earliestEraOrLowestErathem;
    return this;
  }

  public void unsetEarliestEraOrLowestErathem() {
    this.earliestEraOrLowestErathem = null;
  }

  /** Returns true if field earliestEraOrLowestErathem is set (has been assigned a value) and false otherwise */
  public boolean isSetEarliestEraOrLowestErathem() {
    return this.earliestEraOrLowestErathem != null;
  }

  public void setEarliestEraOrLowestErathemIsSet(boolean value) {
    if (!value) {
      this.earliestEraOrLowestErathem = null;
    }
  }

  public String getEarliestPeriodOrLowestSystem() {
    return this.earliestPeriodOrLowestSystem;
  }

  public GeologicalContext setEarliestPeriodOrLowestSystem(String earliestPeriodOrLowestSystem) {
    this.earliestPeriodOrLowestSystem = earliestPeriodOrLowestSystem;
    return this;
  }

  public void unsetEarliestPeriodOrLowestSystem() {
    this.earliestPeriodOrLowestSystem = null;
  }

  /** Returns true if field earliestPeriodOrLowestSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetEarliestPeriodOrLowestSystem() {
    return this.earliestPeriodOrLowestSystem != null;
  }

  public void setEarliestPeriodOrLowestSystemIsSet(boolean value) {
    if (!value) {
      this.earliestPeriodOrLowestSystem = null;
    }
  }

  public String getFormation() {
    return this.formation;
  }

  public GeologicalContext setFormation(String formation) {
    this.formation = formation;
    return this;
  }

  public void unsetFormation() {
    this.formation = null;
  }

  /** Returns true if field formation is set (has been assigned a value) and false otherwise */
  public boolean isSetFormation() {
    return this.formation != null;
  }

  public void setFormationIsSet(boolean value) {
    if (!value) {
      this.formation = null;
    }
  }

  public String getGeologicalContextID() {
    return this.geologicalContextID;
  }

  public GeologicalContext setGeologicalContextID(String geologicalContextID) {
    this.geologicalContextID = geologicalContextID;
    return this;
  }

  public void unsetGeologicalContextID() {
    this.geologicalContextID = null;
  }

  /** Returns true if field geologicalContextID is set (has been assigned a value) and false otherwise */
  public boolean isSetGeologicalContextID() {
    return this.geologicalContextID != null;
  }

  public void setGeologicalContextIDIsSet(boolean value) {
    if (!value) {
      this.geologicalContextID = null;
    }
  }

  public String getGroup() {
    return this.group;
  }

  public GeologicalContext setGroup(String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public String getHighestBiostratigraphicZone() {
    return this.highestBiostratigraphicZone;
  }

  public GeologicalContext setHighestBiostratigraphicZone(String highestBiostratigraphicZone) {
    this.highestBiostratigraphicZone = highestBiostratigraphicZone;
    return this;
  }

  public void unsetHighestBiostratigraphicZone() {
    this.highestBiostratigraphicZone = null;
  }

  /** Returns true if field highestBiostratigraphicZone is set (has been assigned a value) and false otherwise */
  public boolean isSetHighestBiostratigraphicZone() {
    return this.highestBiostratigraphicZone != null;
  }

  public void setHighestBiostratigraphicZoneIsSet(boolean value) {
    if (!value) {
      this.highestBiostratigraphicZone = null;
    }
  }

  public String getLatestAgeOrHighestStage() {
    return this.latestAgeOrHighestStage;
  }

  public GeologicalContext setLatestAgeOrHighestStage(String latestAgeOrHighestStage) {
    this.latestAgeOrHighestStage = latestAgeOrHighestStage;
    return this;
  }

  public void unsetLatestAgeOrHighestStage() {
    this.latestAgeOrHighestStage = null;
  }

  /** Returns true if field latestAgeOrHighestStage is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestAgeOrHighestStage() {
    return this.latestAgeOrHighestStage != null;
  }

  public void setLatestAgeOrHighestStageIsSet(boolean value) {
    if (!value) {
      this.latestAgeOrHighestStage = null;
    }
  }

  public String getLatestEonOrHighestEonothem() {
    return this.latestEonOrHighestEonothem;
  }

  public GeologicalContext setLatestEonOrHighestEonothem(String latestEonOrHighestEonothem) {
    this.latestEonOrHighestEonothem = latestEonOrHighestEonothem;
    return this;
  }

  public void unsetLatestEonOrHighestEonothem() {
    this.latestEonOrHighestEonothem = null;
  }

  /** Returns true if field latestEonOrHighestEonothem is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestEonOrHighestEonothem() {
    return this.latestEonOrHighestEonothem != null;
  }

  public void setLatestEonOrHighestEonothemIsSet(boolean value) {
    if (!value) {
      this.latestEonOrHighestEonothem = null;
    }
  }

  public String getLatestEpochOrHighestSeries() {
    return this.latestEpochOrHighestSeries;
  }

  public GeologicalContext setLatestEpochOrHighestSeries(String latestEpochOrHighestSeries) {
    this.latestEpochOrHighestSeries = latestEpochOrHighestSeries;
    return this;
  }

  public void unsetLatestEpochOrHighestSeries() {
    this.latestEpochOrHighestSeries = null;
  }

  /** Returns true if field latestEpochOrHighestSeries is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestEpochOrHighestSeries() {
    return this.latestEpochOrHighestSeries != null;
  }

  public void setLatestEpochOrHighestSeriesIsSet(boolean value) {
    if (!value) {
      this.latestEpochOrHighestSeries = null;
    }
  }

  public String getLatestEraOrHighestErathem() {
    return this.latestEraOrHighestErathem;
  }

  public GeologicalContext setLatestEraOrHighestErathem(String latestEraOrHighestErathem) {
    this.latestEraOrHighestErathem = latestEraOrHighestErathem;
    return this;
  }

  public void unsetLatestEraOrHighestErathem() {
    this.latestEraOrHighestErathem = null;
  }

  /** Returns true if field latestEraOrHighestErathem is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestEraOrHighestErathem() {
    return this.latestEraOrHighestErathem != null;
  }

  public void setLatestEraOrHighestErathemIsSet(boolean value) {
    if (!value) {
      this.latestEraOrHighestErathem = null;
    }
  }

  public String getLatestPeriodOrHighestSystem() {
    return this.latestPeriodOrHighestSystem;
  }

  public GeologicalContext setLatestPeriodOrHighestSystem(String latestPeriodOrHighestSystem) {
    this.latestPeriodOrHighestSystem = latestPeriodOrHighestSystem;
    return this;
  }

  public void unsetLatestPeriodOrHighestSystem() {
    this.latestPeriodOrHighestSystem = null;
  }

  /** Returns true if field latestPeriodOrHighestSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestPeriodOrHighestSystem() {
    return this.latestPeriodOrHighestSystem != null;
  }

  public void setLatestPeriodOrHighestSystemIsSet(boolean value) {
    if (!value) {
      this.latestPeriodOrHighestSystem = null;
    }
  }

  public String getLithostratigraphicTerms() {
    return this.lithostratigraphicTerms;
  }

  public GeologicalContext setLithostratigraphicTerms(String lithostratigraphicTerms) {
    this.lithostratigraphicTerms = lithostratigraphicTerms;
    return this;
  }

  public void unsetLithostratigraphicTerms() {
    this.lithostratigraphicTerms = null;
  }

  /** Returns true if field lithostratigraphicTerms is set (has been assigned a value) and false otherwise */
  public boolean isSetLithostratigraphicTerms() {
    return this.lithostratigraphicTerms != null;
  }

  public void setLithostratigraphicTermsIsSet(boolean value) {
    if (!value) {
      this.lithostratigraphicTerms = null;
    }
  }

  public String getLowestBiostratigraphicZone() {
    return this.lowestBiostratigraphicZone;
  }

  public GeologicalContext setLowestBiostratigraphicZone(String lowestBiostratigraphicZone) {
    this.lowestBiostratigraphicZone = lowestBiostratigraphicZone;
    return this;
  }

  public void unsetLowestBiostratigraphicZone() {
    this.lowestBiostratigraphicZone = null;
  }

  /** Returns true if field lowestBiostratigraphicZone is set (has been assigned a value) and false otherwise */
  public boolean isSetLowestBiostratigraphicZone() {
    return this.lowestBiostratigraphicZone != null;
  }

  public void setLowestBiostratigraphicZoneIsSet(boolean value) {
    if (!value) {
      this.lowestBiostratigraphicZone = null;
    }
  }

  public String getMember() {
    return this.member;
  }

  public GeologicalContext setMember(String member) {
    this.member = member;
    return this;
  }

  public void unsetMember() {
    this.member = null;
  }

  /** Returns true if field member is set (has been assigned a value) and false otherwise */
  public boolean isSetMember() {
    return this.member != null;
  }

  public void setMemberIsSet(boolean value) {
    if (!value) {
      this.member = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BED:
      if (value == null) {
        unsetBed();
      } else {
        setBed((String)value);
      }
      break;

    case EARLIEST_AGE_OR_LOWEST_STAGE:
      if (value == null) {
        unsetEarliestAgeOrLowestStage();
      } else {
        setEarliestAgeOrLowestStage((String)value);
      }
      break;

    case EARLIEST_EON_OR_LOWEST_EONOTHEM:
      if (value == null) {
        unsetEarliestEonOrLowestEonothem();
      } else {
        setEarliestEonOrLowestEonothem((String)value);
      }
      break;

    case EARLIEST_EPOCH_OR_LOWEST_SERIES:
      if (value == null) {
        unsetEarliestEpochOrLowestSeries();
      } else {
        setEarliestEpochOrLowestSeries((String)value);
      }
      break;

    case EARLIEST_ERA_OR_LOWEST_ERATHEM:
      if (value == null) {
        unsetEarliestEraOrLowestErathem();
      } else {
        setEarliestEraOrLowestErathem((String)value);
      }
      break;

    case EARLIEST_PERIOD_OR_LOWEST_SYSTEM:
      if (value == null) {
        unsetEarliestPeriodOrLowestSystem();
      } else {
        setEarliestPeriodOrLowestSystem((String)value);
      }
      break;

    case FORMATION:
      if (value == null) {
        unsetFormation();
      } else {
        setFormation((String)value);
      }
      break;

    case GEOLOGICAL_CONTEXT_ID:
      if (value == null) {
        unsetGeologicalContextID();
      } else {
        setGeologicalContextID((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case HIGHEST_BIOSTRATIGRAPHIC_ZONE:
      if (value == null) {
        unsetHighestBiostratigraphicZone();
      } else {
        setHighestBiostratigraphicZone((String)value);
      }
      break;

    case LATEST_AGE_OR_HIGHEST_STAGE:
      if (value == null) {
        unsetLatestAgeOrHighestStage();
      } else {
        setLatestAgeOrHighestStage((String)value);
      }
      break;

    case LATEST_EON_OR_HIGHEST_EONOTHEM:
      if (value == null) {
        unsetLatestEonOrHighestEonothem();
      } else {
        setLatestEonOrHighestEonothem((String)value);
      }
      break;

    case LATEST_EPOCH_OR_HIGHEST_SERIES:
      if (value == null) {
        unsetLatestEpochOrHighestSeries();
      } else {
        setLatestEpochOrHighestSeries((String)value);
      }
      break;

    case LATEST_ERA_OR_HIGHEST_ERATHEM:
      if (value == null) {
        unsetLatestEraOrHighestErathem();
      } else {
        setLatestEraOrHighestErathem((String)value);
      }
      break;

    case LATEST_PERIOD_OR_HIGHEST_SYSTEM:
      if (value == null) {
        unsetLatestPeriodOrHighestSystem();
      } else {
        setLatestPeriodOrHighestSystem((String)value);
      }
      break;

    case LITHOSTRATIGRAPHIC_TERMS:
      if (value == null) {
        unsetLithostratigraphicTerms();
      } else {
        setLithostratigraphicTerms((String)value);
      }
      break;

    case LOWEST_BIOSTRATIGRAPHIC_ZONE:
      if (value == null) {
        unsetLowestBiostratigraphicZone();
      } else {
        setLowestBiostratigraphicZone((String)value);
      }
      break;

    case MEMBER:
      if (value == null) {
        unsetMember();
      } else {
        setMember((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BED:
      return getBed();

    case EARLIEST_AGE_OR_LOWEST_STAGE:
      return getEarliestAgeOrLowestStage();

    case EARLIEST_EON_OR_LOWEST_EONOTHEM:
      return getEarliestEonOrLowestEonothem();

    case EARLIEST_EPOCH_OR_LOWEST_SERIES:
      return getEarliestEpochOrLowestSeries();

    case EARLIEST_ERA_OR_LOWEST_ERATHEM:
      return getEarliestEraOrLowestErathem();

    case EARLIEST_PERIOD_OR_LOWEST_SYSTEM:
      return getEarliestPeriodOrLowestSystem();

    case FORMATION:
      return getFormation();

    case GEOLOGICAL_CONTEXT_ID:
      return getGeologicalContextID();

    case GROUP:
      return getGroup();

    case HIGHEST_BIOSTRATIGRAPHIC_ZONE:
      return getHighestBiostratigraphicZone();

    case LATEST_AGE_OR_HIGHEST_STAGE:
      return getLatestAgeOrHighestStage();

    case LATEST_EON_OR_HIGHEST_EONOTHEM:
      return getLatestEonOrHighestEonothem();

    case LATEST_EPOCH_OR_HIGHEST_SERIES:
      return getLatestEpochOrHighestSeries();

    case LATEST_ERA_OR_HIGHEST_ERATHEM:
      return getLatestEraOrHighestErathem();

    case LATEST_PERIOD_OR_HIGHEST_SYSTEM:
      return getLatestPeriodOrHighestSystem();

    case LITHOSTRATIGRAPHIC_TERMS:
      return getLithostratigraphicTerms();

    case LOWEST_BIOSTRATIGRAPHIC_ZONE:
      return getLowestBiostratigraphicZone();

    case MEMBER:
      return getMember();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BED:
      return isSetBed();
    case EARLIEST_AGE_OR_LOWEST_STAGE:
      return isSetEarliestAgeOrLowestStage();
    case EARLIEST_EON_OR_LOWEST_EONOTHEM:
      return isSetEarliestEonOrLowestEonothem();
    case EARLIEST_EPOCH_OR_LOWEST_SERIES:
      return isSetEarliestEpochOrLowestSeries();
    case EARLIEST_ERA_OR_LOWEST_ERATHEM:
      return isSetEarliestEraOrLowestErathem();
    case EARLIEST_PERIOD_OR_LOWEST_SYSTEM:
      return isSetEarliestPeriodOrLowestSystem();
    case FORMATION:
      return isSetFormation();
    case GEOLOGICAL_CONTEXT_ID:
      return isSetGeologicalContextID();
    case GROUP:
      return isSetGroup();
    case HIGHEST_BIOSTRATIGRAPHIC_ZONE:
      return isSetHighestBiostratigraphicZone();
    case LATEST_AGE_OR_HIGHEST_STAGE:
      return isSetLatestAgeOrHighestStage();
    case LATEST_EON_OR_HIGHEST_EONOTHEM:
      return isSetLatestEonOrHighestEonothem();
    case LATEST_EPOCH_OR_HIGHEST_SERIES:
      return isSetLatestEpochOrHighestSeries();
    case LATEST_ERA_OR_HIGHEST_ERATHEM:
      return isSetLatestEraOrHighestErathem();
    case LATEST_PERIOD_OR_HIGHEST_SYSTEM:
      return isSetLatestPeriodOrHighestSystem();
    case LITHOSTRATIGRAPHIC_TERMS:
      return isSetLithostratigraphicTerms();
    case LOWEST_BIOSTRATIGRAPHIC_ZONE:
      return isSetLowestBiostratigraphicZone();
    case MEMBER:
      return isSetMember();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeologicalContext)
      return this.equals((GeologicalContext)that);
    return false;
  }

  public boolean equals(GeologicalContext that) {
    if (that == null)
      return false;

    boolean this_present_bed = true && this.isSetBed();
    boolean that_present_bed = true && that.isSetBed();
    if (this_present_bed || that_present_bed) {
      if (!(this_present_bed && that_present_bed))
        return false;
      if (!this.bed.equals(that.bed))
        return false;
    }

    boolean this_present_earliestAgeOrLowestStage = true && this.isSetEarliestAgeOrLowestStage();
    boolean that_present_earliestAgeOrLowestStage = true && that.isSetEarliestAgeOrLowestStage();
    if (this_present_earliestAgeOrLowestStage || that_present_earliestAgeOrLowestStage) {
      if (!(this_present_earliestAgeOrLowestStage && that_present_earliestAgeOrLowestStage))
        return false;
      if (!this.earliestAgeOrLowestStage.equals(that.earliestAgeOrLowestStage))
        return false;
    }

    boolean this_present_earliestEonOrLowestEonothem = true && this.isSetEarliestEonOrLowestEonothem();
    boolean that_present_earliestEonOrLowestEonothem = true && that.isSetEarliestEonOrLowestEonothem();
    if (this_present_earliestEonOrLowestEonothem || that_present_earliestEonOrLowestEonothem) {
      if (!(this_present_earliestEonOrLowestEonothem && that_present_earliestEonOrLowestEonothem))
        return false;
      if (!this.earliestEonOrLowestEonothem.equals(that.earliestEonOrLowestEonothem))
        return false;
    }

    boolean this_present_earliestEpochOrLowestSeries = true && this.isSetEarliestEpochOrLowestSeries();
    boolean that_present_earliestEpochOrLowestSeries = true && that.isSetEarliestEpochOrLowestSeries();
    if (this_present_earliestEpochOrLowestSeries || that_present_earliestEpochOrLowestSeries) {
      if (!(this_present_earliestEpochOrLowestSeries && that_present_earliestEpochOrLowestSeries))
        return false;
      if (!this.earliestEpochOrLowestSeries.equals(that.earliestEpochOrLowestSeries))
        return false;
    }

    boolean this_present_earliestEraOrLowestErathem = true && this.isSetEarliestEraOrLowestErathem();
    boolean that_present_earliestEraOrLowestErathem = true && that.isSetEarliestEraOrLowestErathem();
    if (this_present_earliestEraOrLowestErathem || that_present_earliestEraOrLowestErathem) {
      if (!(this_present_earliestEraOrLowestErathem && that_present_earliestEraOrLowestErathem))
        return false;
      if (!this.earliestEraOrLowestErathem.equals(that.earliestEraOrLowestErathem))
        return false;
    }

    boolean this_present_earliestPeriodOrLowestSystem = true && this.isSetEarliestPeriodOrLowestSystem();
    boolean that_present_earliestPeriodOrLowestSystem = true && that.isSetEarliestPeriodOrLowestSystem();
    if (this_present_earliestPeriodOrLowestSystem || that_present_earliestPeriodOrLowestSystem) {
      if (!(this_present_earliestPeriodOrLowestSystem && that_present_earliestPeriodOrLowestSystem))
        return false;
      if (!this.earliestPeriodOrLowestSystem.equals(that.earliestPeriodOrLowestSystem))
        return false;
    }

    boolean this_present_formation = true && this.isSetFormation();
    boolean that_present_formation = true && that.isSetFormation();
    if (this_present_formation || that_present_formation) {
      if (!(this_present_formation && that_present_formation))
        return false;
      if (!this.formation.equals(that.formation))
        return false;
    }

    boolean this_present_geologicalContextID = true && this.isSetGeologicalContextID();
    boolean that_present_geologicalContextID = true && that.isSetGeologicalContextID();
    if (this_present_geologicalContextID || that_present_geologicalContextID) {
      if (!(this_present_geologicalContextID && that_present_geologicalContextID))
        return false;
      if (!this.geologicalContextID.equals(that.geologicalContextID))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_highestBiostratigraphicZone = true && this.isSetHighestBiostratigraphicZone();
    boolean that_present_highestBiostratigraphicZone = true && that.isSetHighestBiostratigraphicZone();
    if (this_present_highestBiostratigraphicZone || that_present_highestBiostratigraphicZone) {
      if (!(this_present_highestBiostratigraphicZone && that_present_highestBiostratigraphicZone))
        return false;
      if (!this.highestBiostratigraphicZone.equals(that.highestBiostratigraphicZone))
        return false;
    }

    boolean this_present_latestAgeOrHighestStage = true && this.isSetLatestAgeOrHighestStage();
    boolean that_present_latestAgeOrHighestStage = true && that.isSetLatestAgeOrHighestStage();
    if (this_present_latestAgeOrHighestStage || that_present_latestAgeOrHighestStage) {
      if (!(this_present_latestAgeOrHighestStage && that_present_latestAgeOrHighestStage))
        return false;
      if (!this.latestAgeOrHighestStage.equals(that.latestAgeOrHighestStage))
        return false;
    }

    boolean this_present_latestEonOrHighestEonothem = true && this.isSetLatestEonOrHighestEonothem();
    boolean that_present_latestEonOrHighestEonothem = true && that.isSetLatestEonOrHighestEonothem();
    if (this_present_latestEonOrHighestEonothem || that_present_latestEonOrHighestEonothem) {
      if (!(this_present_latestEonOrHighestEonothem && that_present_latestEonOrHighestEonothem))
        return false;
      if (!this.latestEonOrHighestEonothem.equals(that.latestEonOrHighestEonothem))
        return false;
    }

    boolean this_present_latestEpochOrHighestSeries = true && this.isSetLatestEpochOrHighestSeries();
    boolean that_present_latestEpochOrHighestSeries = true && that.isSetLatestEpochOrHighestSeries();
    if (this_present_latestEpochOrHighestSeries || that_present_latestEpochOrHighestSeries) {
      if (!(this_present_latestEpochOrHighestSeries && that_present_latestEpochOrHighestSeries))
        return false;
      if (!this.latestEpochOrHighestSeries.equals(that.latestEpochOrHighestSeries))
        return false;
    }

    boolean this_present_latestEraOrHighestErathem = true && this.isSetLatestEraOrHighestErathem();
    boolean that_present_latestEraOrHighestErathem = true && that.isSetLatestEraOrHighestErathem();
    if (this_present_latestEraOrHighestErathem || that_present_latestEraOrHighestErathem) {
      if (!(this_present_latestEraOrHighestErathem && that_present_latestEraOrHighestErathem))
        return false;
      if (!this.latestEraOrHighestErathem.equals(that.latestEraOrHighestErathem))
        return false;
    }

    boolean this_present_latestPeriodOrHighestSystem = true && this.isSetLatestPeriodOrHighestSystem();
    boolean that_present_latestPeriodOrHighestSystem = true && that.isSetLatestPeriodOrHighestSystem();
    if (this_present_latestPeriodOrHighestSystem || that_present_latestPeriodOrHighestSystem) {
      if (!(this_present_latestPeriodOrHighestSystem && that_present_latestPeriodOrHighestSystem))
        return false;
      if (!this.latestPeriodOrHighestSystem.equals(that.latestPeriodOrHighestSystem))
        return false;
    }

    boolean this_present_lithostratigraphicTerms = true && this.isSetLithostratigraphicTerms();
    boolean that_present_lithostratigraphicTerms = true && that.isSetLithostratigraphicTerms();
    if (this_present_lithostratigraphicTerms || that_present_lithostratigraphicTerms) {
      if (!(this_present_lithostratigraphicTerms && that_present_lithostratigraphicTerms))
        return false;
      if (!this.lithostratigraphicTerms.equals(that.lithostratigraphicTerms))
        return false;
    }

    boolean this_present_lowestBiostratigraphicZone = true && this.isSetLowestBiostratigraphicZone();
    boolean that_present_lowestBiostratigraphicZone = true && that.isSetLowestBiostratigraphicZone();
    if (this_present_lowestBiostratigraphicZone || that_present_lowestBiostratigraphicZone) {
      if (!(this_present_lowestBiostratigraphicZone && that_present_lowestBiostratigraphicZone))
        return false;
      if (!this.lowestBiostratigraphicZone.equals(that.lowestBiostratigraphicZone))
        return false;
    }

    boolean this_present_member = true && this.isSetMember();
    boolean that_present_member = true && that.isSetMember();
    if (this_present_member || that_present_member) {
      if (!(this_present_member && that_present_member))
        return false;
      if (!this.member.equals(that.member))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_bed = true && (isSetBed());
    builder.append(present_bed);
    if (present_bed)
      builder.append(bed);

    boolean present_earliestAgeOrLowestStage = true && (isSetEarliestAgeOrLowestStage());
    builder.append(present_earliestAgeOrLowestStage);
    if (present_earliestAgeOrLowestStage)
      builder.append(earliestAgeOrLowestStage);

    boolean present_earliestEonOrLowestEonothem = true && (isSetEarliestEonOrLowestEonothem());
    builder.append(present_earliestEonOrLowestEonothem);
    if (present_earliestEonOrLowestEonothem)
      builder.append(earliestEonOrLowestEonothem);

    boolean present_earliestEpochOrLowestSeries = true && (isSetEarliestEpochOrLowestSeries());
    builder.append(present_earliestEpochOrLowestSeries);
    if (present_earliestEpochOrLowestSeries)
      builder.append(earliestEpochOrLowestSeries);

    boolean present_earliestEraOrLowestErathem = true && (isSetEarliestEraOrLowestErathem());
    builder.append(present_earliestEraOrLowestErathem);
    if (present_earliestEraOrLowestErathem)
      builder.append(earliestEraOrLowestErathem);

    boolean present_earliestPeriodOrLowestSystem = true && (isSetEarliestPeriodOrLowestSystem());
    builder.append(present_earliestPeriodOrLowestSystem);
    if (present_earliestPeriodOrLowestSystem)
      builder.append(earliestPeriodOrLowestSystem);

    boolean present_formation = true && (isSetFormation());
    builder.append(present_formation);
    if (present_formation)
      builder.append(formation);

    boolean present_geologicalContextID = true && (isSetGeologicalContextID());
    builder.append(present_geologicalContextID);
    if (present_geologicalContextID)
      builder.append(geologicalContextID);

    boolean present_group = true && (isSetGroup());
    builder.append(present_group);
    if (present_group)
      builder.append(group);

    boolean present_highestBiostratigraphicZone = true && (isSetHighestBiostratigraphicZone());
    builder.append(present_highestBiostratigraphicZone);
    if (present_highestBiostratigraphicZone)
      builder.append(highestBiostratigraphicZone);

    boolean present_latestAgeOrHighestStage = true && (isSetLatestAgeOrHighestStage());
    builder.append(present_latestAgeOrHighestStage);
    if (present_latestAgeOrHighestStage)
      builder.append(latestAgeOrHighestStage);

    boolean present_latestEonOrHighestEonothem = true && (isSetLatestEonOrHighestEonothem());
    builder.append(present_latestEonOrHighestEonothem);
    if (present_latestEonOrHighestEonothem)
      builder.append(latestEonOrHighestEonothem);

    boolean present_latestEpochOrHighestSeries = true && (isSetLatestEpochOrHighestSeries());
    builder.append(present_latestEpochOrHighestSeries);
    if (present_latestEpochOrHighestSeries)
      builder.append(latestEpochOrHighestSeries);

    boolean present_latestEraOrHighestErathem = true && (isSetLatestEraOrHighestErathem());
    builder.append(present_latestEraOrHighestErathem);
    if (present_latestEraOrHighestErathem)
      builder.append(latestEraOrHighestErathem);

    boolean present_latestPeriodOrHighestSystem = true && (isSetLatestPeriodOrHighestSystem());
    builder.append(present_latestPeriodOrHighestSystem);
    if (present_latestPeriodOrHighestSystem)
      builder.append(latestPeriodOrHighestSystem);

    boolean present_lithostratigraphicTerms = true && (isSetLithostratigraphicTerms());
    builder.append(present_lithostratigraphicTerms);
    if (present_lithostratigraphicTerms)
      builder.append(lithostratigraphicTerms);

    boolean present_lowestBiostratigraphicZone = true && (isSetLowestBiostratigraphicZone());
    builder.append(present_lowestBiostratigraphicZone);
    if (present_lowestBiostratigraphicZone)
      builder.append(lowestBiostratigraphicZone);

    boolean present_member = true && (isSetMember());
    builder.append(present_member);
    if (present_member)
      builder.append(member);

    return builder.toHashCode();
  }

  public int compareTo(GeologicalContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GeologicalContext typedOther = (GeologicalContext)other;

    lastComparison = Boolean.valueOf(isSetBed()).compareTo(typedOther.isSetBed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bed, typedOther.bed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEarliestAgeOrLowestStage()).compareTo(typedOther.isSetEarliestAgeOrLowestStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarliestAgeOrLowestStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliestAgeOrLowestStage, typedOther.earliestAgeOrLowestStage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEarliestEonOrLowestEonothem()).compareTo(typedOther.isSetEarliestEonOrLowestEonothem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarliestEonOrLowestEonothem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliestEonOrLowestEonothem, typedOther.earliestEonOrLowestEonothem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEarliestEpochOrLowestSeries()).compareTo(typedOther.isSetEarliestEpochOrLowestSeries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarliestEpochOrLowestSeries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliestEpochOrLowestSeries, typedOther.earliestEpochOrLowestSeries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEarliestEraOrLowestErathem()).compareTo(typedOther.isSetEarliestEraOrLowestErathem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarliestEraOrLowestErathem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliestEraOrLowestErathem, typedOther.earliestEraOrLowestErathem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEarliestPeriodOrLowestSystem()).compareTo(typedOther.isSetEarliestPeriodOrLowestSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarliestPeriodOrLowestSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliestPeriodOrLowestSystem, typedOther.earliestPeriodOrLowestSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormation()).compareTo(typedOther.isSetFormation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formation, typedOther.formation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeologicalContextID()).compareTo(typedOther.isSetGeologicalContextID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeologicalContextID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geologicalContextID, typedOther.geologicalContextID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(typedOther.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, typedOther.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighestBiostratigraphicZone()).compareTo(typedOther.isSetHighestBiostratigraphicZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighestBiostratigraphicZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highestBiostratigraphicZone, typedOther.highestBiostratigraphicZone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestAgeOrHighestStage()).compareTo(typedOther.isSetLatestAgeOrHighestStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestAgeOrHighestStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestAgeOrHighestStage, typedOther.latestAgeOrHighestStage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestEonOrHighestEonothem()).compareTo(typedOther.isSetLatestEonOrHighestEonothem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestEonOrHighestEonothem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestEonOrHighestEonothem, typedOther.latestEonOrHighestEonothem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestEpochOrHighestSeries()).compareTo(typedOther.isSetLatestEpochOrHighestSeries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestEpochOrHighestSeries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestEpochOrHighestSeries, typedOther.latestEpochOrHighestSeries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestEraOrHighestErathem()).compareTo(typedOther.isSetLatestEraOrHighestErathem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestEraOrHighestErathem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestEraOrHighestErathem, typedOther.latestEraOrHighestErathem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestPeriodOrHighestSystem()).compareTo(typedOther.isSetLatestPeriodOrHighestSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestPeriodOrHighestSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestPeriodOrHighestSystem, typedOther.latestPeriodOrHighestSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLithostratigraphicTerms()).compareTo(typedOther.isSetLithostratigraphicTerms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLithostratigraphicTerms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lithostratigraphicTerms, typedOther.lithostratigraphicTerms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLowestBiostratigraphicZone()).compareTo(typedOther.isSetLowestBiostratigraphicZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLowestBiostratigraphicZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowestBiostratigraphicZone, typedOther.lowestBiostratigraphicZone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMember()).compareTo(typedOther.isSetMember());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMember()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member, typedOther.member);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeologicalContext(");
    boolean first = true;

    sb.append("bed:");
    if (this.bed == null) {
      sb.append("null");
    } else {
      sb.append(this.bed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("earliestAgeOrLowestStage:");
    if (this.earliestAgeOrLowestStage == null) {
      sb.append("null");
    } else {
      sb.append(this.earliestAgeOrLowestStage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("earliestEonOrLowestEonothem:");
    if (this.earliestEonOrLowestEonothem == null) {
      sb.append("null");
    } else {
      sb.append(this.earliestEonOrLowestEonothem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("earliestEpochOrLowestSeries:");
    if (this.earliestEpochOrLowestSeries == null) {
      sb.append("null");
    } else {
      sb.append(this.earliestEpochOrLowestSeries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("earliestEraOrLowestErathem:");
    if (this.earliestEraOrLowestErathem == null) {
      sb.append("null");
    } else {
      sb.append(this.earliestEraOrLowestErathem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("earliestPeriodOrLowestSystem:");
    if (this.earliestPeriodOrLowestSystem == null) {
      sb.append("null");
    } else {
      sb.append(this.earliestPeriodOrLowestSystem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("formation:");
    if (this.formation == null) {
      sb.append("null");
    } else {
      sb.append(this.formation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geologicalContextID:");
    if (this.geologicalContextID == null) {
      sb.append("null");
    } else {
      sb.append(this.geologicalContextID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("group:");
    if (this.group == null) {
      sb.append("null");
    } else {
      sb.append(this.group);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("highestBiostratigraphicZone:");
    if (this.highestBiostratigraphicZone == null) {
      sb.append("null");
    } else {
      sb.append(this.highestBiostratigraphicZone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("latestAgeOrHighestStage:");
    if (this.latestAgeOrHighestStage == null) {
      sb.append("null");
    } else {
      sb.append(this.latestAgeOrHighestStage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("latestEonOrHighestEonothem:");
    if (this.latestEonOrHighestEonothem == null) {
      sb.append("null");
    } else {
      sb.append(this.latestEonOrHighestEonothem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("latestEpochOrHighestSeries:");
    if (this.latestEpochOrHighestSeries == null) {
      sb.append("null");
    } else {
      sb.append(this.latestEpochOrHighestSeries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("latestEraOrHighestErathem:");
    if (this.latestEraOrHighestErathem == null) {
      sb.append("null");
    } else {
      sb.append(this.latestEraOrHighestErathem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("latestPeriodOrHighestSystem:");
    if (this.latestPeriodOrHighestSystem == null) {
      sb.append("null");
    } else {
      sb.append(this.latestPeriodOrHighestSystem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lithostratigraphicTerms:");
    if (this.lithostratigraphicTerms == null) {
      sb.append("null");
    } else {
      sb.append(this.lithostratigraphicTerms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lowestBiostratigraphicZone:");
    if (this.lowestBiostratigraphicZone == null) {
      sb.append("null");
    } else {
      sb.append(this.lowestBiostratigraphicZone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("member:");
    if (this.member == null) {
      sb.append("null");
    } else {
      sb.append(this.member);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GeologicalContextStandardSchemeFactory implements SchemeFactory {
    public GeologicalContextStandardScheme getScheme() {
      return new GeologicalContextStandardScheme();
    }
  }

  private static class GeologicalContextStandardScheme extends StandardScheme<GeologicalContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GeologicalContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bed = iprot.readString();
              struct.setBedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EARLIEST_AGE_OR_LOWEST_STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.earliestAgeOrLowestStage = iprot.readString();
              struct.setEarliestAgeOrLowestStageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EARLIEST_EON_OR_LOWEST_EONOTHEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.earliestEonOrLowestEonothem = iprot.readString();
              struct.setEarliestEonOrLowestEonothemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EARLIEST_EPOCH_OR_LOWEST_SERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.earliestEpochOrLowestSeries = iprot.readString();
              struct.setEarliestEpochOrLowestSeriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EARLIEST_ERA_OR_LOWEST_ERATHEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.earliestEraOrLowestErathem = iprot.readString();
              struct.setEarliestEraOrLowestErathemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EARLIEST_PERIOD_OR_LOWEST_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.earliestPeriodOrLowestSystem = iprot.readString();
              struct.setEarliestPeriodOrLowestSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FORMATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.formation = iprot.readString();
              struct.setFormationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GEOLOGICAL_CONTEXT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.geologicalContextID = iprot.readString();
              struct.setGeologicalContextIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HIGHEST_BIOSTRATIGRAPHIC_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highestBiostratigraphicZone = iprot.readString();
              struct.setHighestBiostratigraphicZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LATEST_AGE_OR_HIGHEST_STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.latestAgeOrHighestStage = iprot.readString();
              struct.setLatestAgeOrHighestStageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LATEST_EON_OR_HIGHEST_EONOTHEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.latestEonOrHighestEonothem = iprot.readString();
              struct.setLatestEonOrHighestEonothemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LATEST_EPOCH_OR_HIGHEST_SERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.latestEpochOrHighestSeries = iprot.readString();
              struct.setLatestEpochOrHighestSeriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LATEST_ERA_OR_HIGHEST_ERATHEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.latestEraOrHighestErathem = iprot.readString();
              struct.setLatestEraOrHighestErathemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LATEST_PERIOD_OR_HIGHEST_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.latestPeriodOrHighestSystem = iprot.readString();
              struct.setLatestPeriodOrHighestSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LITHOSTRATIGRAPHIC_TERMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lithostratigraphicTerms = iprot.readString();
              struct.setLithostratigraphicTermsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOWEST_BIOSTRATIGRAPHIC_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lowestBiostratigraphicZone = iprot.readString();
              struct.setLowestBiostratigraphicZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MEMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.member = iprot.readString();
              struct.setMemberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GeologicalContext struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bed != null) {
        oprot.writeFieldBegin(BED_FIELD_DESC);
        oprot.writeString(struct.bed);
        oprot.writeFieldEnd();
      }
      if (struct.earliestAgeOrLowestStage != null) {
        oprot.writeFieldBegin(EARLIEST_AGE_OR_LOWEST_STAGE_FIELD_DESC);
        oprot.writeString(struct.earliestAgeOrLowestStage);
        oprot.writeFieldEnd();
      }
      if (struct.earliestEonOrLowestEonothem != null) {
        oprot.writeFieldBegin(EARLIEST_EON_OR_LOWEST_EONOTHEM_FIELD_DESC);
        oprot.writeString(struct.earliestEonOrLowestEonothem);
        oprot.writeFieldEnd();
      }
      if (struct.earliestEpochOrLowestSeries != null) {
        oprot.writeFieldBegin(EARLIEST_EPOCH_OR_LOWEST_SERIES_FIELD_DESC);
        oprot.writeString(struct.earliestEpochOrLowestSeries);
        oprot.writeFieldEnd();
      }
      if (struct.earliestEraOrLowestErathem != null) {
        oprot.writeFieldBegin(EARLIEST_ERA_OR_LOWEST_ERATHEM_FIELD_DESC);
        oprot.writeString(struct.earliestEraOrLowestErathem);
        oprot.writeFieldEnd();
      }
      if (struct.earliestPeriodOrLowestSystem != null) {
        oprot.writeFieldBegin(EARLIEST_PERIOD_OR_LOWEST_SYSTEM_FIELD_DESC);
        oprot.writeString(struct.earliestPeriodOrLowestSystem);
        oprot.writeFieldEnd();
      }
      if (struct.formation != null) {
        oprot.writeFieldBegin(FORMATION_FIELD_DESC);
        oprot.writeString(struct.formation);
        oprot.writeFieldEnd();
      }
      if (struct.geologicalContextID != null) {
        oprot.writeFieldBegin(GEOLOGICAL_CONTEXT_ID_FIELD_DESC);
        oprot.writeString(struct.geologicalContextID);
        oprot.writeFieldEnd();
      }
      if (struct.group != null) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeString(struct.group);
        oprot.writeFieldEnd();
      }
      if (struct.highestBiostratigraphicZone != null) {
        oprot.writeFieldBegin(HIGHEST_BIOSTRATIGRAPHIC_ZONE_FIELD_DESC);
        oprot.writeString(struct.highestBiostratigraphicZone);
        oprot.writeFieldEnd();
      }
      if (struct.latestAgeOrHighestStage != null) {
        oprot.writeFieldBegin(LATEST_AGE_OR_HIGHEST_STAGE_FIELD_DESC);
        oprot.writeString(struct.latestAgeOrHighestStage);
        oprot.writeFieldEnd();
      }
      if (struct.latestEonOrHighestEonothem != null) {
        oprot.writeFieldBegin(LATEST_EON_OR_HIGHEST_EONOTHEM_FIELD_DESC);
        oprot.writeString(struct.latestEonOrHighestEonothem);
        oprot.writeFieldEnd();
      }
      if (struct.latestEpochOrHighestSeries != null) {
        oprot.writeFieldBegin(LATEST_EPOCH_OR_HIGHEST_SERIES_FIELD_DESC);
        oprot.writeString(struct.latestEpochOrHighestSeries);
        oprot.writeFieldEnd();
      }
      if (struct.latestEraOrHighestErathem != null) {
        oprot.writeFieldBegin(LATEST_ERA_OR_HIGHEST_ERATHEM_FIELD_DESC);
        oprot.writeString(struct.latestEraOrHighestErathem);
        oprot.writeFieldEnd();
      }
      if (struct.latestPeriodOrHighestSystem != null) {
        oprot.writeFieldBegin(LATEST_PERIOD_OR_HIGHEST_SYSTEM_FIELD_DESC);
        oprot.writeString(struct.latestPeriodOrHighestSystem);
        oprot.writeFieldEnd();
      }
      if (struct.lithostratigraphicTerms != null) {
        oprot.writeFieldBegin(LITHOSTRATIGRAPHIC_TERMS_FIELD_DESC);
        oprot.writeString(struct.lithostratigraphicTerms);
        oprot.writeFieldEnd();
      }
      if (struct.lowestBiostratigraphicZone != null) {
        oprot.writeFieldBegin(LOWEST_BIOSTRATIGRAPHIC_ZONE_FIELD_DESC);
        oprot.writeString(struct.lowestBiostratigraphicZone);
        oprot.writeFieldEnd();
      }
      if (struct.member != null) {
        oprot.writeFieldBegin(MEMBER_FIELD_DESC);
        oprot.writeString(struct.member);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GeologicalContextTupleSchemeFactory implements SchemeFactory {
    public GeologicalContextTupleScheme getScheme() {
      return new GeologicalContextTupleScheme();
    }
  }

  private static class GeologicalContextTupleScheme extends TupleScheme<GeologicalContext> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GeologicalContext struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBed()) {
        optionals.set(0);
      }
      if (struct.isSetEarliestAgeOrLowestStage()) {
        optionals.set(1);
      }
      if (struct.isSetEarliestEonOrLowestEonothem()) {
        optionals.set(2);
      }
      if (struct.isSetEarliestEpochOrLowestSeries()) {
        optionals.set(3);
      }
      if (struct.isSetEarliestEraOrLowestErathem()) {
        optionals.set(4);
      }
      if (struct.isSetEarliestPeriodOrLowestSystem()) {
        optionals.set(5);
      }
      if (struct.isSetFormation()) {
        optionals.set(6);
      }
      if (struct.isSetGeologicalContextID()) {
        optionals.set(7);
      }
      if (struct.isSetGroup()) {
        optionals.set(8);
      }
      if (struct.isSetHighestBiostratigraphicZone()) {
        optionals.set(9);
      }
      if (struct.isSetLatestAgeOrHighestStage()) {
        optionals.set(10);
      }
      if (struct.isSetLatestEonOrHighestEonothem()) {
        optionals.set(11);
      }
      if (struct.isSetLatestEpochOrHighestSeries()) {
        optionals.set(12);
      }
      if (struct.isSetLatestEraOrHighestErathem()) {
        optionals.set(13);
      }
      if (struct.isSetLatestPeriodOrHighestSystem()) {
        optionals.set(14);
      }
      if (struct.isSetLithostratigraphicTerms()) {
        optionals.set(15);
      }
      if (struct.isSetLowestBiostratigraphicZone()) {
        optionals.set(16);
      }
      if (struct.isSetMember()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetBed()) {
        oprot.writeString(struct.bed);
      }
      if (struct.isSetEarliestAgeOrLowestStage()) {
        oprot.writeString(struct.earliestAgeOrLowestStage);
      }
      if (struct.isSetEarliestEonOrLowestEonothem()) {
        oprot.writeString(struct.earliestEonOrLowestEonothem);
      }
      if (struct.isSetEarliestEpochOrLowestSeries()) {
        oprot.writeString(struct.earliestEpochOrLowestSeries);
      }
      if (struct.isSetEarliestEraOrLowestErathem()) {
        oprot.writeString(struct.earliestEraOrLowestErathem);
      }
      if (struct.isSetEarliestPeriodOrLowestSystem()) {
        oprot.writeString(struct.earliestPeriodOrLowestSystem);
      }
      if (struct.isSetFormation()) {
        oprot.writeString(struct.formation);
      }
      if (struct.isSetGeologicalContextID()) {
        oprot.writeString(struct.geologicalContextID);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetHighestBiostratigraphicZone()) {
        oprot.writeString(struct.highestBiostratigraphicZone);
      }
      if (struct.isSetLatestAgeOrHighestStage()) {
        oprot.writeString(struct.latestAgeOrHighestStage);
      }
      if (struct.isSetLatestEonOrHighestEonothem()) {
        oprot.writeString(struct.latestEonOrHighestEonothem);
      }
      if (struct.isSetLatestEpochOrHighestSeries()) {
        oprot.writeString(struct.latestEpochOrHighestSeries);
      }
      if (struct.isSetLatestEraOrHighestErathem()) {
        oprot.writeString(struct.latestEraOrHighestErathem);
      }
      if (struct.isSetLatestPeriodOrHighestSystem()) {
        oprot.writeString(struct.latestPeriodOrHighestSystem);
      }
      if (struct.isSetLithostratigraphicTerms()) {
        oprot.writeString(struct.lithostratigraphicTerms);
      }
      if (struct.isSetLowestBiostratigraphicZone()) {
        oprot.writeString(struct.lowestBiostratigraphicZone);
      }
      if (struct.isSetMember()) {
        oprot.writeString(struct.member);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GeologicalContext struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.bed = iprot.readString();
        struct.setBedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.earliestAgeOrLowestStage = iprot.readString();
        struct.setEarliestAgeOrLowestStageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.earliestEonOrLowestEonothem = iprot.readString();
        struct.setEarliestEonOrLowestEonothemIsSet(true);
      }
      if (incoming.get(3)) {
        struct.earliestEpochOrLowestSeries = iprot.readString();
        struct.setEarliestEpochOrLowestSeriesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.earliestEraOrLowestErathem = iprot.readString();
        struct.setEarliestEraOrLowestErathemIsSet(true);
      }
      if (incoming.get(5)) {
        struct.earliestPeriodOrLowestSystem = iprot.readString();
        struct.setEarliestPeriodOrLowestSystemIsSet(true);
      }
      if (incoming.get(6)) {
        struct.formation = iprot.readString();
        struct.setFormationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.geologicalContextID = iprot.readString();
        struct.setGeologicalContextIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(9)) {
        struct.highestBiostratigraphicZone = iprot.readString();
        struct.setHighestBiostratigraphicZoneIsSet(true);
      }
      if (incoming.get(10)) {
        struct.latestAgeOrHighestStage = iprot.readString();
        struct.setLatestAgeOrHighestStageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.latestEonOrHighestEonothem = iprot.readString();
        struct.setLatestEonOrHighestEonothemIsSet(true);
      }
      if (incoming.get(12)) {
        struct.latestEpochOrHighestSeries = iprot.readString();
        struct.setLatestEpochOrHighestSeriesIsSet(true);
      }
      if (incoming.get(13)) {
        struct.latestEraOrHighestErathem = iprot.readString();
        struct.setLatestEraOrHighestErathemIsSet(true);
      }
      if (incoming.get(14)) {
        struct.latestPeriodOrHighestSystem = iprot.readString();
        struct.setLatestPeriodOrHighestSystemIsSet(true);
      }
      if (incoming.get(15)) {
        struct.lithostratigraphicTerms = iprot.readString();
        struct.setLithostratigraphicTermsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.lowestBiostratigraphicZone = iprot.readString();
        struct.setLowestBiostratigraphicZoneIsSet(true);
      }
      if (incoming.get(17)) {
        struct.member = iprot.readString();
        struct.setMemberIsSet(true);
      }
    }
  }

}

