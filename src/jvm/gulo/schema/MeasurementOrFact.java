/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Darwin Core MeasurementOrFact class structure.
 * 
 * http://rs.tdwg.org/dwc/terms/index.htm#MeasurementOrFact
 */
public class MeasurementOrFact implements org.apache.thrift.TBase<MeasurementOrFact, MeasurementOrFact._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MeasurementOrFact");

  private static final org.apache.thrift.protocol.TField MEASUREMENT_ACCURACY_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementAccuracy", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEASUREMENT_DETERMINED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementDeterminedBy", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MEASUREMENT_DETERMINED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementDeterminedDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MEASUREMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MEASUREMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementMethod", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MEASUREMENT_REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementRemarks", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MEASUREMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MEASUREMENT_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementUnit", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MEASUREMENT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementValue", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MeasurementOrFactStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MeasurementOrFactTupleSchemeFactory());
  }

  public String measurementAccuracy; // required
  public String measurementDeterminedBy; // required
  public String measurementDeterminedDate; // required
  public String measurementID; // required
  public String measurementMethod; // required
  public String measurementRemarks; // required
  public String measurementType; // required
  public String measurementUnit; // required
  public String measurementValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEASUREMENT_ACCURACY((short)1, "measurementAccuracy"),
    MEASUREMENT_DETERMINED_BY((short)2, "measurementDeterminedBy"),
    MEASUREMENT_DETERMINED_DATE((short)3, "measurementDeterminedDate"),
    MEASUREMENT_ID((short)4, "measurementID"),
    MEASUREMENT_METHOD((short)5, "measurementMethod"),
    MEASUREMENT_REMARKS((short)6, "measurementRemarks"),
    MEASUREMENT_TYPE((short)7, "measurementType"),
    MEASUREMENT_UNIT((short)8, "measurementUnit"),
    MEASUREMENT_VALUE((short)9, "measurementValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEASUREMENT_ACCURACY
          return MEASUREMENT_ACCURACY;
        case 2: // MEASUREMENT_DETERMINED_BY
          return MEASUREMENT_DETERMINED_BY;
        case 3: // MEASUREMENT_DETERMINED_DATE
          return MEASUREMENT_DETERMINED_DATE;
        case 4: // MEASUREMENT_ID
          return MEASUREMENT_ID;
        case 5: // MEASUREMENT_METHOD
          return MEASUREMENT_METHOD;
        case 6: // MEASUREMENT_REMARKS
          return MEASUREMENT_REMARKS;
        case 7: // MEASUREMENT_TYPE
          return MEASUREMENT_TYPE;
        case 8: // MEASUREMENT_UNIT
          return MEASUREMENT_UNIT;
        case 9: // MEASUREMENT_VALUE
          return MEASUREMENT_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEASUREMENT_ACCURACY, new org.apache.thrift.meta_data.FieldMetaData("measurementAccuracy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEASUREMENT_DETERMINED_BY, new org.apache.thrift.meta_data.FieldMetaData("measurementDeterminedBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEASUREMENT_DETERMINED_DATE, new org.apache.thrift.meta_data.FieldMetaData("measurementDeterminedDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEASUREMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("measurementID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEASUREMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("measurementMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEASUREMENT_REMARKS, new org.apache.thrift.meta_data.FieldMetaData("measurementRemarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEASUREMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("measurementType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEASUREMENT_UNIT, new org.apache.thrift.meta_data.FieldMetaData("measurementUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEASUREMENT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("measurementValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MeasurementOrFact.class, metaDataMap);
  }

  public MeasurementOrFact() {
  }

  public MeasurementOrFact(
    String measurementAccuracy,
    String measurementDeterminedBy,
    String measurementDeterminedDate,
    String measurementID,
    String measurementMethod,
    String measurementRemarks,
    String measurementType,
    String measurementUnit,
    String measurementValue)
  {
    this();
    this.measurementAccuracy = measurementAccuracy;
    this.measurementDeterminedBy = measurementDeterminedBy;
    this.measurementDeterminedDate = measurementDeterminedDate;
    this.measurementID = measurementID;
    this.measurementMethod = measurementMethod;
    this.measurementRemarks = measurementRemarks;
    this.measurementType = measurementType;
    this.measurementUnit = measurementUnit;
    this.measurementValue = measurementValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MeasurementOrFact(MeasurementOrFact other) {
    if (other.isSetMeasurementAccuracy()) {
      this.measurementAccuracy = other.measurementAccuracy;
    }
    if (other.isSetMeasurementDeterminedBy()) {
      this.measurementDeterminedBy = other.measurementDeterminedBy;
    }
    if (other.isSetMeasurementDeterminedDate()) {
      this.measurementDeterminedDate = other.measurementDeterminedDate;
    }
    if (other.isSetMeasurementID()) {
      this.measurementID = other.measurementID;
    }
    if (other.isSetMeasurementMethod()) {
      this.measurementMethod = other.measurementMethod;
    }
    if (other.isSetMeasurementRemarks()) {
      this.measurementRemarks = other.measurementRemarks;
    }
    if (other.isSetMeasurementType()) {
      this.measurementType = other.measurementType;
    }
    if (other.isSetMeasurementUnit()) {
      this.measurementUnit = other.measurementUnit;
    }
    if (other.isSetMeasurementValue()) {
      this.measurementValue = other.measurementValue;
    }
  }

  public MeasurementOrFact deepCopy() {
    return new MeasurementOrFact(this);
  }

  @Override
  public void clear() {
    this.measurementAccuracy = null;
    this.measurementDeterminedBy = null;
    this.measurementDeterminedDate = null;
    this.measurementID = null;
    this.measurementMethod = null;
    this.measurementRemarks = null;
    this.measurementType = null;
    this.measurementUnit = null;
    this.measurementValue = null;
  }

  public String getMeasurementAccuracy() {
    return this.measurementAccuracy;
  }

  public MeasurementOrFact setMeasurementAccuracy(String measurementAccuracy) {
    this.measurementAccuracy = measurementAccuracy;
    return this;
  }

  public void unsetMeasurementAccuracy() {
    this.measurementAccuracy = null;
  }

  /** Returns true if field measurementAccuracy is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementAccuracy() {
    return this.measurementAccuracy != null;
  }

  public void setMeasurementAccuracyIsSet(boolean value) {
    if (!value) {
      this.measurementAccuracy = null;
    }
  }

  public String getMeasurementDeterminedBy() {
    return this.measurementDeterminedBy;
  }

  public MeasurementOrFact setMeasurementDeterminedBy(String measurementDeterminedBy) {
    this.measurementDeterminedBy = measurementDeterminedBy;
    return this;
  }

  public void unsetMeasurementDeterminedBy() {
    this.measurementDeterminedBy = null;
  }

  /** Returns true if field measurementDeterminedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementDeterminedBy() {
    return this.measurementDeterminedBy != null;
  }

  public void setMeasurementDeterminedByIsSet(boolean value) {
    if (!value) {
      this.measurementDeterminedBy = null;
    }
  }

  public String getMeasurementDeterminedDate() {
    return this.measurementDeterminedDate;
  }

  public MeasurementOrFact setMeasurementDeterminedDate(String measurementDeterminedDate) {
    this.measurementDeterminedDate = measurementDeterminedDate;
    return this;
  }

  public void unsetMeasurementDeterminedDate() {
    this.measurementDeterminedDate = null;
  }

  /** Returns true if field measurementDeterminedDate is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementDeterminedDate() {
    return this.measurementDeterminedDate != null;
  }

  public void setMeasurementDeterminedDateIsSet(boolean value) {
    if (!value) {
      this.measurementDeterminedDate = null;
    }
  }

  public String getMeasurementID() {
    return this.measurementID;
  }

  public MeasurementOrFact setMeasurementID(String measurementID) {
    this.measurementID = measurementID;
    return this;
  }

  public void unsetMeasurementID() {
    this.measurementID = null;
  }

  /** Returns true if field measurementID is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementID() {
    return this.measurementID != null;
  }

  public void setMeasurementIDIsSet(boolean value) {
    if (!value) {
      this.measurementID = null;
    }
  }

  public String getMeasurementMethod() {
    return this.measurementMethod;
  }

  public MeasurementOrFact setMeasurementMethod(String measurementMethod) {
    this.measurementMethod = measurementMethod;
    return this;
  }

  public void unsetMeasurementMethod() {
    this.measurementMethod = null;
  }

  /** Returns true if field measurementMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementMethod() {
    return this.measurementMethod != null;
  }

  public void setMeasurementMethodIsSet(boolean value) {
    if (!value) {
      this.measurementMethod = null;
    }
  }

  public String getMeasurementRemarks() {
    return this.measurementRemarks;
  }

  public MeasurementOrFact setMeasurementRemarks(String measurementRemarks) {
    this.measurementRemarks = measurementRemarks;
    return this;
  }

  public void unsetMeasurementRemarks() {
    this.measurementRemarks = null;
  }

  /** Returns true if field measurementRemarks is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementRemarks() {
    return this.measurementRemarks != null;
  }

  public void setMeasurementRemarksIsSet(boolean value) {
    if (!value) {
      this.measurementRemarks = null;
    }
  }

  public String getMeasurementType() {
    return this.measurementType;
  }

  public MeasurementOrFact setMeasurementType(String measurementType) {
    this.measurementType = measurementType;
    return this;
  }

  public void unsetMeasurementType() {
    this.measurementType = null;
  }

  /** Returns true if field measurementType is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementType() {
    return this.measurementType != null;
  }

  public void setMeasurementTypeIsSet(boolean value) {
    if (!value) {
      this.measurementType = null;
    }
  }

  public String getMeasurementUnit() {
    return this.measurementUnit;
  }

  public MeasurementOrFact setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  public void unsetMeasurementUnit() {
    this.measurementUnit = null;
  }

  /** Returns true if field measurementUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementUnit() {
    return this.measurementUnit != null;
  }

  public void setMeasurementUnitIsSet(boolean value) {
    if (!value) {
      this.measurementUnit = null;
    }
  }

  public String getMeasurementValue() {
    return this.measurementValue;
  }

  public MeasurementOrFact setMeasurementValue(String measurementValue) {
    this.measurementValue = measurementValue;
    return this;
  }

  public void unsetMeasurementValue() {
    this.measurementValue = null;
  }

  /** Returns true if field measurementValue is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementValue() {
    return this.measurementValue != null;
  }

  public void setMeasurementValueIsSet(boolean value) {
    if (!value) {
      this.measurementValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEASUREMENT_ACCURACY:
      if (value == null) {
        unsetMeasurementAccuracy();
      } else {
        setMeasurementAccuracy((String)value);
      }
      break;

    case MEASUREMENT_DETERMINED_BY:
      if (value == null) {
        unsetMeasurementDeterminedBy();
      } else {
        setMeasurementDeterminedBy((String)value);
      }
      break;

    case MEASUREMENT_DETERMINED_DATE:
      if (value == null) {
        unsetMeasurementDeterminedDate();
      } else {
        setMeasurementDeterminedDate((String)value);
      }
      break;

    case MEASUREMENT_ID:
      if (value == null) {
        unsetMeasurementID();
      } else {
        setMeasurementID((String)value);
      }
      break;

    case MEASUREMENT_METHOD:
      if (value == null) {
        unsetMeasurementMethod();
      } else {
        setMeasurementMethod((String)value);
      }
      break;

    case MEASUREMENT_REMARKS:
      if (value == null) {
        unsetMeasurementRemarks();
      } else {
        setMeasurementRemarks((String)value);
      }
      break;

    case MEASUREMENT_TYPE:
      if (value == null) {
        unsetMeasurementType();
      } else {
        setMeasurementType((String)value);
      }
      break;

    case MEASUREMENT_UNIT:
      if (value == null) {
        unsetMeasurementUnit();
      } else {
        setMeasurementUnit((String)value);
      }
      break;

    case MEASUREMENT_VALUE:
      if (value == null) {
        unsetMeasurementValue();
      } else {
        setMeasurementValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEASUREMENT_ACCURACY:
      return getMeasurementAccuracy();

    case MEASUREMENT_DETERMINED_BY:
      return getMeasurementDeterminedBy();

    case MEASUREMENT_DETERMINED_DATE:
      return getMeasurementDeterminedDate();

    case MEASUREMENT_ID:
      return getMeasurementID();

    case MEASUREMENT_METHOD:
      return getMeasurementMethod();

    case MEASUREMENT_REMARKS:
      return getMeasurementRemarks();

    case MEASUREMENT_TYPE:
      return getMeasurementType();

    case MEASUREMENT_UNIT:
      return getMeasurementUnit();

    case MEASUREMENT_VALUE:
      return getMeasurementValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEASUREMENT_ACCURACY:
      return isSetMeasurementAccuracy();
    case MEASUREMENT_DETERMINED_BY:
      return isSetMeasurementDeterminedBy();
    case MEASUREMENT_DETERMINED_DATE:
      return isSetMeasurementDeterminedDate();
    case MEASUREMENT_ID:
      return isSetMeasurementID();
    case MEASUREMENT_METHOD:
      return isSetMeasurementMethod();
    case MEASUREMENT_REMARKS:
      return isSetMeasurementRemarks();
    case MEASUREMENT_TYPE:
      return isSetMeasurementType();
    case MEASUREMENT_UNIT:
      return isSetMeasurementUnit();
    case MEASUREMENT_VALUE:
      return isSetMeasurementValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MeasurementOrFact)
      return this.equals((MeasurementOrFact)that);
    return false;
  }

  public boolean equals(MeasurementOrFact that) {
    if (that == null)
      return false;

    boolean this_present_measurementAccuracy = true && this.isSetMeasurementAccuracy();
    boolean that_present_measurementAccuracy = true && that.isSetMeasurementAccuracy();
    if (this_present_measurementAccuracy || that_present_measurementAccuracy) {
      if (!(this_present_measurementAccuracy && that_present_measurementAccuracy))
        return false;
      if (!this.measurementAccuracy.equals(that.measurementAccuracy))
        return false;
    }

    boolean this_present_measurementDeterminedBy = true && this.isSetMeasurementDeterminedBy();
    boolean that_present_measurementDeterminedBy = true && that.isSetMeasurementDeterminedBy();
    if (this_present_measurementDeterminedBy || that_present_measurementDeterminedBy) {
      if (!(this_present_measurementDeterminedBy && that_present_measurementDeterminedBy))
        return false;
      if (!this.measurementDeterminedBy.equals(that.measurementDeterminedBy))
        return false;
    }

    boolean this_present_measurementDeterminedDate = true && this.isSetMeasurementDeterminedDate();
    boolean that_present_measurementDeterminedDate = true && that.isSetMeasurementDeterminedDate();
    if (this_present_measurementDeterminedDate || that_present_measurementDeterminedDate) {
      if (!(this_present_measurementDeterminedDate && that_present_measurementDeterminedDate))
        return false;
      if (!this.measurementDeterminedDate.equals(that.measurementDeterminedDate))
        return false;
    }

    boolean this_present_measurementID = true && this.isSetMeasurementID();
    boolean that_present_measurementID = true && that.isSetMeasurementID();
    if (this_present_measurementID || that_present_measurementID) {
      if (!(this_present_measurementID && that_present_measurementID))
        return false;
      if (!this.measurementID.equals(that.measurementID))
        return false;
    }

    boolean this_present_measurementMethod = true && this.isSetMeasurementMethod();
    boolean that_present_measurementMethod = true && that.isSetMeasurementMethod();
    if (this_present_measurementMethod || that_present_measurementMethod) {
      if (!(this_present_measurementMethod && that_present_measurementMethod))
        return false;
      if (!this.measurementMethod.equals(that.measurementMethod))
        return false;
    }

    boolean this_present_measurementRemarks = true && this.isSetMeasurementRemarks();
    boolean that_present_measurementRemarks = true && that.isSetMeasurementRemarks();
    if (this_present_measurementRemarks || that_present_measurementRemarks) {
      if (!(this_present_measurementRemarks && that_present_measurementRemarks))
        return false;
      if (!this.measurementRemarks.equals(that.measurementRemarks))
        return false;
    }

    boolean this_present_measurementType = true && this.isSetMeasurementType();
    boolean that_present_measurementType = true && that.isSetMeasurementType();
    if (this_present_measurementType || that_present_measurementType) {
      if (!(this_present_measurementType && that_present_measurementType))
        return false;
      if (!this.measurementType.equals(that.measurementType))
        return false;
    }

    boolean this_present_measurementUnit = true && this.isSetMeasurementUnit();
    boolean that_present_measurementUnit = true && that.isSetMeasurementUnit();
    if (this_present_measurementUnit || that_present_measurementUnit) {
      if (!(this_present_measurementUnit && that_present_measurementUnit))
        return false;
      if (!this.measurementUnit.equals(that.measurementUnit))
        return false;
    }

    boolean this_present_measurementValue = true && this.isSetMeasurementValue();
    boolean that_present_measurementValue = true && that.isSetMeasurementValue();
    if (this_present_measurementValue || that_present_measurementValue) {
      if (!(this_present_measurementValue && that_present_measurementValue))
        return false;
      if (!this.measurementValue.equals(that.measurementValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_measurementAccuracy = true && (isSetMeasurementAccuracy());
    builder.append(present_measurementAccuracy);
    if (present_measurementAccuracy)
      builder.append(measurementAccuracy);

    boolean present_measurementDeterminedBy = true && (isSetMeasurementDeterminedBy());
    builder.append(present_measurementDeterminedBy);
    if (present_measurementDeterminedBy)
      builder.append(measurementDeterminedBy);

    boolean present_measurementDeterminedDate = true && (isSetMeasurementDeterminedDate());
    builder.append(present_measurementDeterminedDate);
    if (present_measurementDeterminedDate)
      builder.append(measurementDeterminedDate);

    boolean present_measurementID = true && (isSetMeasurementID());
    builder.append(present_measurementID);
    if (present_measurementID)
      builder.append(measurementID);

    boolean present_measurementMethod = true && (isSetMeasurementMethod());
    builder.append(present_measurementMethod);
    if (present_measurementMethod)
      builder.append(measurementMethod);

    boolean present_measurementRemarks = true && (isSetMeasurementRemarks());
    builder.append(present_measurementRemarks);
    if (present_measurementRemarks)
      builder.append(measurementRemarks);

    boolean present_measurementType = true && (isSetMeasurementType());
    builder.append(present_measurementType);
    if (present_measurementType)
      builder.append(measurementType);

    boolean present_measurementUnit = true && (isSetMeasurementUnit());
    builder.append(present_measurementUnit);
    if (present_measurementUnit)
      builder.append(measurementUnit);

    boolean present_measurementValue = true && (isSetMeasurementValue());
    builder.append(present_measurementValue);
    if (present_measurementValue)
      builder.append(measurementValue);

    return builder.toHashCode();
  }

  public int compareTo(MeasurementOrFact other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MeasurementOrFact typedOther = (MeasurementOrFact)other;

    lastComparison = Boolean.valueOf(isSetMeasurementAccuracy()).compareTo(typedOther.isSetMeasurementAccuracy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementAccuracy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementAccuracy, typedOther.measurementAccuracy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasurementDeterminedBy()).compareTo(typedOther.isSetMeasurementDeterminedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementDeterminedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementDeterminedBy, typedOther.measurementDeterminedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasurementDeterminedDate()).compareTo(typedOther.isSetMeasurementDeterminedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementDeterminedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementDeterminedDate, typedOther.measurementDeterminedDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasurementID()).compareTo(typedOther.isSetMeasurementID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementID, typedOther.measurementID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasurementMethod()).compareTo(typedOther.isSetMeasurementMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementMethod, typedOther.measurementMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasurementRemarks()).compareTo(typedOther.isSetMeasurementRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementRemarks, typedOther.measurementRemarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasurementType()).compareTo(typedOther.isSetMeasurementType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementType, typedOther.measurementType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasurementUnit()).compareTo(typedOther.isSetMeasurementUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementUnit, typedOther.measurementUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasurementValue()).compareTo(typedOther.isSetMeasurementValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementValue, typedOther.measurementValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MeasurementOrFact(");
    boolean first = true;

    sb.append("measurementAccuracy:");
    if (this.measurementAccuracy == null) {
      sb.append("null");
    } else {
      sb.append(this.measurementAccuracy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurementDeterminedBy:");
    if (this.measurementDeterminedBy == null) {
      sb.append("null");
    } else {
      sb.append(this.measurementDeterminedBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurementDeterminedDate:");
    if (this.measurementDeterminedDate == null) {
      sb.append("null");
    } else {
      sb.append(this.measurementDeterminedDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurementID:");
    if (this.measurementID == null) {
      sb.append("null");
    } else {
      sb.append(this.measurementID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurementMethod:");
    if (this.measurementMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.measurementMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurementRemarks:");
    if (this.measurementRemarks == null) {
      sb.append("null");
    } else {
      sb.append(this.measurementRemarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurementType:");
    if (this.measurementType == null) {
      sb.append("null");
    } else {
      sb.append(this.measurementType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurementUnit:");
    if (this.measurementUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.measurementUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurementValue:");
    if (this.measurementValue == null) {
      sb.append("null");
    } else {
      sb.append(this.measurementValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeasurementOrFactStandardSchemeFactory implements SchemeFactory {
    public MeasurementOrFactStandardScheme getScheme() {
      return new MeasurementOrFactStandardScheme();
    }
  }

  private static class MeasurementOrFactStandardScheme extends StandardScheme<MeasurementOrFact> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MeasurementOrFact struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEASUREMENT_ACCURACY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measurementAccuracy = iprot.readString();
              struct.setMeasurementAccuracyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEASUREMENT_DETERMINED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measurementDeterminedBy = iprot.readString();
              struct.setMeasurementDeterminedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEASUREMENT_DETERMINED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measurementDeterminedDate = iprot.readString();
              struct.setMeasurementDeterminedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEASUREMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measurementID = iprot.readString();
              struct.setMeasurementIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEASUREMENT_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measurementMethod = iprot.readString();
              struct.setMeasurementMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEASUREMENT_REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measurementRemarks = iprot.readString();
              struct.setMeasurementRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEASUREMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measurementType = iprot.readString();
              struct.setMeasurementTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEASUREMENT_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measurementUnit = iprot.readString();
              struct.setMeasurementUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MEASUREMENT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measurementValue = iprot.readString();
              struct.setMeasurementValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MeasurementOrFact struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.measurementAccuracy != null) {
        oprot.writeFieldBegin(MEASUREMENT_ACCURACY_FIELD_DESC);
        oprot.writeString(struct.measurementAccuracy);
        oprot.writeFieldEnd();
      }
      if (struct.measurementDeterminedBy != null) {
        oprot.writeFieldBegin(MEASUREMENT_DETERMINED_BY_FIELD_DESC);
        oprot.writeString(struct.measurementDeterminedBy);
        oprot.writeFieldEnd();
      }
      if (struct.measurementDeterminedDate != null) {
        oprot.writeFieldBegin(MEASUREMENT_DETERMINED_DATE_FIELD_DESC);
        oprot.writeString(struct.measurementDeterminedDate);
        oprot.writeFieldEnd();
      }
      if (struct.measurementID != null) {
        oprot.writeFieldBegin(MEASUREMENT_ID_FIELD_DESC);
        oprot.writeString(struct.measurementID);
        oprot.writeFieldEnd();
      }
      if (struct.measurementMethod != null) {
        oprot.writeFieldBegin(MEASUREMENT_METHOD_FIELD_DESC);
        oprot.writeString(struct.measurementMethod);
        oprot.writeFieldEnd();
      }
      if (struct.measurementRemarks != null) {
        oprot.writeFieldBegin(MEASUREMENT_REMARKS_FIELD_DESC);
        oprot.writeString(struct.measurementRemarks);
        oprot.writeFieldEnd();
      }
      if (struct.measurementType != null) {
        oprot.writeFieldBegin(MEASUREMENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.measurementType);
        oprot.writeFieldEnd();
      }
      if (struct.measurementUnit != null) {
        oprot.writeFieldBegin(MEASUREMENT_UNIT_FIELD_DESC);
        oprot.writeString(struct.measurementUnit);
        oprot.writeFieldEnd();
      }
      if (struct.measurementValue != null) {
        oprot.writeFieldBegin(MEASUREMENT_VALUE_FIELD_DESC);
        oprot.writeString(struct.measurementValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeasurementOrFactTupleSchemeFactory implements SchemeFactory {
    public MeasurementOrFactTupleScheme getScheme() {
      return new MeasurementOrFactTupleScheme();
    }
  }

  private static class MeasurementOrFactTupleScheme extends TupleScheme<MeasurementOrFact> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MeasurementOrFact struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMeasurementAccuracy()) {
        optionals.set(0);
      }
      if (struct.isSetMeasurementDeterminedBy()) {
        optionals.set(1);
      }
      if (struct.isSetMeasurementDeterminedDate()) {
        optionals.set(2);
      }
      if (struct.isSetMeasurementID()) {
        optionals.set(3);
      }
      if (struct.isSetMeasurementMethod()) {
        optionals.set(4);
      }
      if (struct.isSetMeasurementRemarks()) {
        optionals.set(5);
      }
      if (struct.isSetMeasurementType()) {
        optionals.set(6);
      }
      if (struct.isSetMeasurementUnit()) {
        optionals.set(7);
      }
      if (struct.isSetMeasurementValue()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetMeasurementAccuracy()) {
        oprot.writeString(struct.measurementAccuracy);
      }
      if (struct.isSetMeasurementDeterminedBy()) {
        oprot.writeString(struct.measurementDeterminedBy);
      }
      if (struct.isSetMeasurementDeterminedDate()) {
        oprot.writeString(struct.measurementDeterminedDate);
      }
      if (struct.isSetMeasurementID()) {
        oprot.writeString(struct.measurementID);
      }
      if (struct.isSetMeasurementMethod()) {
        oprot.writeString(struct.measurementMethod);
      }
      if (struct.isSetMeasurementRemarks()) {
        oprot.writeString(struct.measurementRemarks);
      }
      if (struct.isSetMeasurementType()) {
        oprot.writeString(struct.measurementType);
      }
      if (struct.isSetMeasurementUnit()) {
        oprot.writeString(struct.measurementUnit);
      }
      if (struct.isSetMeasurementValue()) {
        oprot.writeString(struct.measurementValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MeasurementOrFact struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.measurementAccuracy = iprot.readString();
        struct.setMeasurementAccuracyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.measurementDeterminedBy = iprot.readString();
        struct.setMeasurementDeterminedByIsSet(true);
      }
      if (incoming.get(2)) {
        struct.measurementDeterminedDate = iprot.readString();
        struct.setMeasurementDeterminedDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.measurementID = iprot.readString();
        struct.setMeasurementIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.measurementMethod = iprot.readString();
        struct.setMeasurementMethodIsSet(true);
      }
      if (incoming.get(5)) {
        struct.measurementRemarks = iprot.readString();
        struct.setMeasurementRemarksIsSet(true);
      }
      if (incoming.get(6)) {
        struct.measurementType = iprot.readString();
        struct.setMeasurementTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.measurementUnit = iprot.readString();
        struct.setMeasurementUnitIsSet(true);
      }
      if (incoming.get(8)) {
        struct.measurementValue = iprot.readString();
        struct.setMeasurementValueIsSet(true);
      }
    }
  }

}

