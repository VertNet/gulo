/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The RecordSource uniquely identifies a Darwin Core Record node. The sourceID
 * comes from source_id column in a Darwin Core Archive.
 */
public class RecordSource implements org.apache.thrift.TBase<RecordSource, RecordSource._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecordSource");

  private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATASET_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetUUID", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecordSourceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecordSourceTupleSchemeFactory());
  }

  public String sourceID; // required
  public String datasetUUID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SOURCE_ID((short)1, "sourceID"),
    DATASET_UUID((short)2, "datasetUUID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOURCE_ID
          return SOURCE_ID;
        case 2: // DATASET_UUID
          return DATASET_UUID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATASET_UUID, new org.apache.thrift.meta_data.FieldMetaData("datasetUUID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecordSource.class, metaDataMap);
  }

  public RecordSource() {
  }

  public RecordSource(
    String sourceID,
    String datasetUUID)
  {
    this();
    this.sourceID = sourceID;
    this.datasetUUID = datasetUUID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecordSource(RecordSource other) {
    if (other.isSetSourceID()) {
      this.sourceID = other.sourceID;
    }
    if (other.isSetDatasetUUID()) {
      this.datasetUUID = other.datasetUUID;
    }
  }

  public RecordSource deepCopy() {
    return new RecordSource(this);
  }

  @Override
  public void clear() {
    this.sourceID = null;
    this.datasetUUID = null;
  }

  public String getSourceID() {
    return this.sourceID;
  }

  public RecordSource setSourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  public void unsetSourceID() {
    this.sourceID = null;
  }

  /** Returns true if field sourceID is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceID() {
    return this.sourceID != null;
  }

  public void setSourceIDIsSet(boolean value) {
    if (!value) {
      this.sourceID = null;
    }
  }

  public String getDatasetUUID() {
    return this.datasetUUID;
  }

  public RecordSource setDatasetUUID(String datasetUUID) {
    this.datasetUUID = datasetUUID;
    return this;
  }

  public void unsetDatasetUUID() {
    this.datasetUUID = null;
  }

  /** Returns true if field datasetUUID is set (has been assigned a value) and false otherwise */
  public boolean isSetDatasetUUID() {
    return this.datasetUUID != null;
  }

  public void setDatasetUUIDIsSet(boolean value) {
    if (!value) {
      this.datasetUUID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SOURCE_ID:
      if (value == null) {
        unsetSourceID();
      } else {
        setSourceID((String)value);
      }
      break;

    case DATASET_UUID:
      if (value == null) {
        unsetDatasetUUID();
      } else {
        setDatasetUUID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SOURCE_ID:
      return getSourceID();

    case DATASET_UUID:
      return getDatasetUUID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SOURCE_ID:
      return isSetSourceID();
    case DATASET_UUID:
      return isSetDatasetUUID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecordSource)
      return this.equals((RecordSource)that);
    return false;
  }

  public boolean equals(RecordSource that) {
    if (that == null)
      return false;

    boolean this_present_sourceID = true && this.isSetSourceID();
    boolean that_present_sourceID = true && that.isSetSourceID();
    if (this_present_sourceID || that_present_sourceID) {
      if (!(this_present_sourceID && that_present_sourceID))
        return false;
      if (!this.sourceID.equals(that.sourceID))
        return false;
    }

    boolean this_present_datasetUUID = true && this.isSetDatasetUUID();
    boolean that_present_datasetUUID = true && that.isSetDatasetUUID();
    if (this_present_datasetUUID || that_present_datasetUUID) {
      if (!(this_present_datasetUUID && that_present_datasetUUID))
        return false;
      if (!this.datasetUUID.equals(that.datasetUUID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_sourceID = true && (isSetSourceID());
    builder.append(present_sourceID);
    if (present_sourceID)
      builder.append(sourceID);

    boolean present_datasetUUID = true && (isSetDatasetUUID());
    builder.append(present_datasetUUID);
    if (present_datasetUUID)
      builder.append(datasetUUID);

    return builder.toHashCode();
  }

  public int compareTo(RecordSource other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RecordSource typedOther = (RecordSource)other;

    lastComparison = Boolean.valueOf(isSetSourceID()).compareTo(typedOther.isSetSourceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceID, typedOther.sourceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatasetUUID()).compareTo(typedOther.isSetDatasetUUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatasetUUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetUUID, typedOther.datasetUUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecordSource(");
    boolean first = true;

    sb.append("sourceID:");
    if (this.sourceID == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datasetUUID:");
    if (this.datasetUUID == null) {
      sb.append("null");
    } else {
      sb.append(this.datasetUUID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sourceID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sourceID' was not present! Struct: " + toString());
    }
    if (datasetUUID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'datasetUUID' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecordSourceStandardSchemeFactory implements SchemeFactory {
    public RecordSourceStandardScheme getScheme() {
      return new RecordSourceStandardScheme();
    }
  }

  private static class RecordSourceStandardScheme extends StandardScheme<RecordSource> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecordSource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceID = iprot.readString();
              struct.setSourceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATASET_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datasetUUID = iprot.readString();
              struct.setDatasetUUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecordSource struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sourceID != null) {
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeString(struct.sourceID);
        oprot.writeFieldEnd();
      }
      if (struct.datasetUUID != null) {
        oprot.writeFieldBegin(DATASET_UUID_FIELD_DESC);
        oprot.writeString(struct.datasetUUID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecordSourceTupleSchemeFactory implements SchemeFactory {
    public RecordSourceTupleScheme getScheme() {
      return new RecordSourceTupleScheme();
    }
  }

  private static class RecordSourceTupleScheme extends TupleScheme<RecordSource> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecordSource struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sourceID);
      oprot.writeString(struct.datasetUUID);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecordSource struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sourceID = iprot.readString();
      struct.setSourceIDIsSet(true);
      struct.datasetUUID = iprot.readString();
      struct.setDatasetUUIDIsSet(true);
    }
  }

}

